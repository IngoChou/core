var BitmapData = require("awayjs-core/lib/core/base/BitmapData");
var Matrix = require("awayjs-core/lib/core/geom/Matrix");
var Rectangle = require("awayjs-core/lib/core/geom/Rectangle");
var URLLoader = require("awayjs-core/lib/core/net/URLLoader");
var URLLoaderDataFormat = require("awayjs-core/lib/core/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/core/net/URLRequest");
var AwayEvent = require("awayjs-core/lib/events/Event");
var IOErrorEvent = require("awayjs-core/lib/events/IOErrorEvent");
var ParserUtils = require("awayjs-core/lib/parsers/ParserUtils");
var ColorUtils = require("awayjs-core/lib/utils/ColorUtils");

var BitmapDataTest = (function () {
    function BitmapDataTest() {
        var _this = this;
        var transparent = true;
        var initcolour = 0xffffffff;

        //---------------------------------------
        // Load a PNG
        this.urlRequest = new URLRequest('assets/256x256.png');
        this.urlLoader = new URLLoader();
        this.urlLoader.dataFormat = URLLoaderDataFormat.BLOB;

        this.urlLoader.load(this.urlRequest);
        this.urlLoader.addEventListener(AwayEvent.COMPLETE, function (event) {
            return _this.imgLoaded(event);
        });
        this.urlLoader.addEventListener(IOErrorEvent.IO_ERROR, function (event) {
            return _this.imgLoadedError(event);
        });

        //---------------------------------------
        // BitmapData Object - 1
        this.bitmapData = new BitmapData(256, 256, transparent, initcolour);
        document.body.appendChild(this.bitmapData.canvas);

        //---------------------------------------
        // BitmapData Object - 2
        this.bitmapDataB = new BitmapData(256, 256, transparent, initcolour);
        this.bitmapDataB.canvas.style.position = 'absolute';
        this.bitmapDataB.canvas.style.left = '540px';
        document.body.appendChild(this.bitmapDataB.canvas);

        //---------------------------------------
        // BitmapData - setPixel test
        console['time']("bitmapdata"); // start setPixel operation benchmark ( TypeScript does not support console.time - so hacking it in ) .

        this.bitmapDataB.lock();

        for (var i = 0; i < 10000; i++) {
            var x = Math.random() * this.bitmapDataB.width | 0;
            var y = Math.random() * this.bitmapDataB.height | 0;
            this.bitmapDataB.setPixel(x, y, Math.random() * 0xffFFFFFF); // 255 opaque
        }

        this.bitmapDataB.unlock();
        console['timeEnd']("bitmapdata"); // benchmark the setPixel operation

        document.onmousedown = function (event) {
            return _this.onMouseDown(event);
        };
    }
    BitmapDataTest.prototype.onMouseDown = function (event) {
        if (this.bitmapData.width === 512) {
            if (this.image.complete) {
                this.bitmapDataB.lock(); // Lock bitmap - speeds up setPixelOperations

                //---------------------------------------
                // Resize BitmapData
                this.bitmapData.width = 256;
                this.bitmapData.height = 256;

                //---------------------------------------
                // copy loaded image to first BitmapData
                var rect = new Rectangle(0, 0, this.image.width, this.image.height);
                this.bitmapData.drawImage(this.image, rect, rect);

                //---------------------------------------
                // copy image into second bitmap data ( and scale it up 2X )
                rect.width = rect.width * 2;
                rect.height = rect.height * 2;

                this.bitmapDataB.copyPixels(this.bitmapData, this.bitmapData.rect, rect);

                for (var d = 0; d < 1000; d++) {
                    var x = Math.random() * this.bitmapDataB.width | 0;
                    var y = Math.random() * this.bitmapDataB.height | 0;
                    this.bitmapDataB.setPixel(x, y, Math.random() * 0xFFFFFFFF); // 255 opaque
                }

                this.bitmapDataB.unlock(); // Unlock bitmapdata
            } else {
                //---------------------------------------
                // image is not loaded - fill bitmapdata with red
                this.bitmapData.width = 256;
                this.bitmapData.height = 256;
                this.bitmapData.fillRect(this.bitmapData.rect, 0xffff0000);
            }
        } else {
            //---------------------------------------
            // resize bitmapdata;
            this.bitmapData.lock();

            this.bitmapData.width = 512;
            this.bitmapData.height = 512;
            this.bitmapData.fillRect(this.bitmapData.rect, 0xffff0000); // fill it RED

            for (var d = 0; d < 1000; d++) {
                var x = Math.random() * this.bitmapData.width | 0;
                var y = Math.random() * this.bitmapData.height | 0;
                this.bitmapData.setPixel(x, y, Math.random() * 0xFFFFFFFF);
            }

            this.bitmapData.unlock();

            //---------------------------------------
            // copy bitmapdata
            var targetRect = this.bitmapDataB.rect.clone();
            targetRect.width = targetRect.width / 2;
            targetRect.height = targetRect.height / 2;

            this.bitmapDataB.copyPixels(this.bitmapData, this.bitmapDataB.rect, targetRect); // copy first bitmapdata object into the second one
        }

        var m = new Matrix(.5, .08, .08, .5, this.image.width / 2, this.image.height / 2);
        this.bitmapData.draw(this.bitmapData, m);

        this.bitmapData.setPixel32(0, 0, 0xccff0000);
        this.bitmapData.setPixel32(1, 0, 0xcc00ff00);
        this.bitmapData.setPixel32(2, 0, 0xcc0000ff);

        this.bitmapDataB.draw(this.bitmapData, m);

        console.log('GetPixel 0,0: ', ColorUtils.ARGBToHexString(ColorUtils.float32ColorToARGB(this.bitmapData.getPixel(0, 0))));
        console.log('GetPixel 1,0: ', ColorUtils.ARGBToHexString(ColorUtils.float32ColorToARGB(this.bitmapData.getPixel(1, 0))));
        console.log('GetPixel 2,0: ', ColorUtils.ARGBToHexString(ColorUtils.float32ColorToARGB(this.bitmapData.getPixel(2, 0))));
    };

    BitmapDataTest.prototype.imgLoadedError = function (event) {
        console.log('error');
    };

    BitmapDataTest.prototype.imgLoaded = function (event) {
        var _this = this;
        var loader = event.target;
        this.image = ParserUtils.blobToImage(loader.data);
        this.image.onload = function (event) {
            return _this.onImageLoad(event);
        };
    };

    BitmapDataTest.prototype.onImageLoad = function (event) {
        this.bitmapData.drawImage(this.image, new Rectangle(0, 0, this.image.width, this.image.height), new Rectangle(0, 0, this.image.width / 2, this.image.height / 2));

        this.bitmapData.draw(this.bitmapData, new Matrix(.5, .08, .08, .5, this.image.width / 2, this.image.height / 2));
    };
    return BitmapDataTest;
})();

//# sourceMappingURL=data:application/json;base64,