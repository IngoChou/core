var TimerEvent = require("awayjs-core/lib/events/TimerEvent");
var getTimer = require("awayjs-core/lib/utils/getTimer");
var Timer = require("awayjs-core/lib/utils/Timer");

/**
*
*/
var TimerTest = (function () {
    function TimerTest() {
        var _this = this;
        this.oneSecondTimer = new Timer(1000);
        this.oneSecondTimer.addEventListener(TimerEvent.TIMER, function (event) {
            return _this.onSecTimerEvent(event);
        });
        this.oneSecondTimer.start();

        this.repeatTenTimes = new Timer(100, 10);
        this.repeatTenTimes.addEventListener(TimerEvent.TIMER, function (event) {
            return _this.repeatTenTimesEvent(event);
        });
        this.repeatTenTimes.addEventListener(TimerEvent.TIMER_COMPLETE, function (event) {
            return _this.repeatTenTimesComplete(event);
        });
        this.repeatTenTimes.start();
    }
    TimerTest.prototype.repeatTenTimesEvent = function (event) {
        var t = event.target;
        console.log('repeatTenTimesEvent', t.currentCount);
    };

    TimerTest.prototype.repeatTenTimesComplete = function (event) {
        var t = event.target;
        console.log('repeatTenTimesComplete', t.currentCount);
    };

    TimerTest.prototype.onSecTimerEvent = function (event) {
        console.log('onSecTimerEvent, tick');
        console.log('getTimer() : ', getTimer());
    };
    return TimerTest;
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzL1RpbWVyVGVzdC50cyJdLCJuYW1lcyI6WyJUaW1lclRlc3QiLCJUaW1lclRlc3QuY29uc3RydWN0b3IiLCJUaW1lclRlc3QucmVwZWF0VGVuVGltZXNFdmVudCIsIlRpbWVyVGVzdC5yZXBlYXRUZW5UaW1lc0NvbXBsZXRlIiwiVGltZXJUZXN0Lm9uU2VjVGltZXJFdmVudCJdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQW9FO0FBQ3BFLHdEQUFnRTtBQUNoRSxrREFBMEQ7O0FBRTFEOztFQUVHO0FBQ0g7SUFLQ0E7UUFBQUMsaUJBVUNBO1FBUkFBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLElBQUlBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBO1FBQ3JDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxnQkFBZ0JBLENBQUNBLFVBQVVBLENBQUNBLEtBQUtBLEVBQUVBLFVBQUNBLEtBQWdCQTttQkFBS0EsS0FBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7UUFBM0JBLENBQTJCQSxDQUFDQTtRQUN6R0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7O1FBRTNCQSxJQUFJQSxDQUFDQSxjQUFjQSxHQUFHQSxJQUFJQSxLQUFLQSxDQUFDQSxHQUFHQSxFQUFFQSxFQUFFQSxDQUFDQTtRQUN4Q0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxVQUFVQSxDQUFDQSxLQUFLQSxFQUFFQSxVQUFDQSxLQUFnQkE7bUJBQUtBLEtBQUlBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7UUFBL0JBLENBQStCQSxDQUFDQTtRQUM3R0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxVQUFVQSxDQUFDQSxjQUFjQSxFQUFFQSxVQUFDQSxLQUFnQkE7bUJBQUtBLEtBQUlBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7UUFBbENBLENBQWtDQSxDQUFDQTtRQUN6SEEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7SUFDNUJBLENBQUNBO0lBRURELDBDQUFBQSxVQUE0QkEsS0FBZ0JBO1FBRTNDRSxJQUFJQSxDQUFDQSxHQUFpQkEsS0FBS0EsQ0FBQ0EsTUFBTUE7UUFDbENBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLHFCQUFxQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsWUFBWUEsQ0FBQ0E7SUFDbkRBLENBQUNBOztJQUVERiw2Q0FBQUEsVUFBK0JBLEtBQWdCQTtRQUU5Q0csSUFBSUEsQ0FBQ0EsR0FBaUJBLEtBQUtBLENBQUNBLE1BQU1BO1FBQ2xDQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSx3QkFBd0JBLEVBQUVBLENBQUNBLENBQUNBLFlBQVlBLENBQUNBO0lBQ3REQSxDQUFDQTs7SUFFREgsc0NBQUFBLFVBQXdCQSxLQUFnQkE7UUFFdkNJLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLHVCQUF1QkEsQ0FBQ0E7UUFDcENBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLGVBQWVBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO0lBQ3pDQSxDQUFDQTtJQUNGSixpQkFBQ0E7QUFBREEsQ0FBQ0EsSUFBQTtBQUFBIiwiZmlsZSI6InV0aWxzL1RpbWVyVGVzdC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1jb3JlLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUaW1lckV2ZW50XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZXZlbnRzL1RpbWVyRXZlbnRcIik7XG5pbXBvcnQgZ2V0VGltZXJcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL2dldFRpbWVyXCIpO1xuaW1wb3J0IFRpbWVyXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi91dGlscy9UaW1lclwiKTtcblxuLyoqXG4gKiBcbiAqL1xuY2xhc3MgVGltZXJUZXN0XG57XG5cdHByaXZhdGUgb25lU2Vjb25kVGltZXI6VGltZXI7XG5cdHByaXZhdGUgcmVwZWF0VGVuVGltZXM6VGltZXI7XG5cblx0Y29uc3RydWN0b3IoKVxuXHR7XG5cdFx0dGhpcy5vbmVTZWNvbmRUaW1lciA9IG5ldyBUaW1lcigxMDAwKTtcblx0XHR0aGlzLm9uZVNlY29uZFRpbWVyLmFkZEV2ZW50TGlzdGVuZXIoVGltZXJFdmVudC5USU1FUiwgKGV2ZW50OlRpbWVyRXZlbnQpID0+IHRoaXMub25TZWNUaW1lckV2ZW50KGV2ZW50KSk7XG5cdFx0dGhpcy5vbmVTZWNvbmRUaW1lci5zdGFydCgpO1xuXG5cdFx0dGhpcy5yZXBlYXRUZW5UaW1lcyA9IG5ldyBUaW1lcigxMDAsIDEwKTtcblx0XHR0aGlzLnJlcGVhdFRlblRpbWVzLmFkZEV2ZW50TGlzdGVuZXIoVGltZXJFdmVudC5USU1FUiwgKGV2ZW50OlRpbWVyRXZlbnQpID0+IHRoaXMucmVwZWF0VGVuVGltZXNFdmVudChldmVudCkpO1xuXHRcdHRoaXMucmVwZWF0VGVuVGltZXMuYWRkRXZlbnRMaXN0ZW5lcihUaW1lckV2ZW50LlRJTUVSX0NPTVBMRVRFLCAoZXZlbnQ6VGltZXJFdmVudCkgPT4gdGhpcy5yZXBlYXRUZW5UaW1lc0NvbXBsZXRlKGV2ZW50KSk7XG5cdFx0dGhpcy5yZXBlYXRUZW5UaW1lcy5zdGFydCgpO1xuXHR9XG5cblx0cHJpdmF0ZSByZXBlYXRUZW5UaW1lc0V2ZW50KGV2ZW50OlRpbWVyRXZlbnQpOnZvaWRcblx0e1xuXHRcdHZhciB0OlRpbWVyID0gPFRpbWVyPiBldmVudC50YXJnZXQ7XG5cdFx0Y29uc29sZS5sb2coJ3JlcGVhdFRlblRpbWVzRXZlbnQnLCB0LmN1cnJlbnRDb3VudCk7XG5cdH1cblxuXHRwcml2YXRlIHJlcGVhdFRlblRpbWVzQ29tcGxldGUoZXZlbnQ6VGltZXJFdmVudCk6dm9pZFxuXHR7XG5cdFx0dmFyIHQ6VGltZXIgPSA8VGltZXI+IGV2ZW50LnRhcmdldDtcblx0XHRjb25zb2xlLmxvZygncmVwZWF0VGVuVGltZXNDb21wbGV0ZScsIHQuY3VycmVudENvdW50KTtcblx0fVxuXG5cdHByaXZhdGUgb25TZWNUaW1lckV2ZW50KGV2ZW50OlRpbWVyRXZlbnQpOnZvaWRcblx0e1xuXHRcdGNvbnNvbGUubG9nKCdvblNlY1RpbWVyRXZlbnQsIHRpY2snKTtcblx0XHRjb25zb2xlLmxvZygnZ2V0VGltZXIoKSA6ICcsIGdldFRpbWVyKCkpO1xuXHR9XG59Il19