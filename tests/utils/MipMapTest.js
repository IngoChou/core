var BitmapData = require("awayjs-core/lib/core/base/BitmapData");
var Matrix = require("awayjs-core/lib/core/geom/Matrix");
var Rectangle = require("awayjs-core/lib/core/geom/Rectangle");
var URLLoader = require("awayjs-core/lib/core/net/URLLoader");
var URLLoaderDataFormat = require("awayjs-core/lib/core/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/core/net/URLRequest");
var Event = require("awayjs-core/lib/events/Event");
var ParserUtils = require("awayjs-core/lib/parsers/ParserUtils");
var TextureUtils = require("awayjs-core/lib/utils/TextureUtils");

var MipMapTest = (function () {
    function MipMapTest() {
        var _this = this;
        this._rect = new Rectangle();
        this._matrix = new Matrix();
        //---------------------------------------
        // Load a PNG
        var mipUrlRequest = new URLRequest('assets/1024x1024.png');
        this.mipLoader = new URLLoader();
        this.mipLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.mipLoader.load(mipUrlRequest);
        this.mipLoader.addEventListener(Event.COMPLETE, function (event) {
            return _this.mipImgLoaded(event);
        });

        document.onmousedown = function (e) {
            return _this.onMouseDown(e);
        };
    }
    MipMapTest.prototype.mipImgLoaded = function (event) {
        var _this = this;
        var loader = event.target;
        var image = ParserUtils.blobToImage(loader.data);
        image.onload = function (event) {
            return _this.onImageLoad(event);
        };
    };

    MipMapTest.prototype.onImageLoad = function (event) {
        var image = event.target;
        alert('Each click will generate a level of MipMap');

        this.sourceBitmap = new BitmapData(1024, 1024, true, 0xff0000);
        this.sourceBitmap.drawImage(image, this.sourceBitmap.rect, this.sourceBitmap.rect);
        this.sourceBitmap.canvas.style.position = 'absolute';
        this.sourceBitmap.canvas.style.left = '0px';
        this.sourceBitmap.canvas.style.top = '1030px';

        //document.body.appendChild( this.sourceBitmap.canvas );
        this.mipMap = new BitmapData(1024, 1024, true, 0xff0000);
        this.mipMap.canvas.style.position = 'absolute';
        this.mipMap.canvas.style.left = '0px';
        this.mipMap.canvas.style.top = '0px';

        document.body.appendChild(this.mipMap.canvas);

        this._rect.width = this.sourceBitmap.width;
        this._rect.height = this.sourceBitmap.height;

        this.w = this.sourceBitmap.width;
        this.h = this.sourceBitmap.height;
    };

    MipMapTest.prototype.onMouseDown = function (e) {
        this.generateMipMap(this.sourceBitmap, this.mipMap);
    };

    MipMapTest.prototype.generateMipMap = function (source, mipmap, alpha, side) {
        if (typeof mipmap === "undefined") { mipmap = null; }
        if (typeof alpha === "undefined") { alpha = false; }
        if (typeof side === "undefined") { side = -1; }
        var c = this.w;
        var i;

        console['time']('MipMap' + c);

        if ((this.w >= 1) || (this.h >= 1)) {
            if (alpha)
                mipmap.fillRect(this._rect, 0);

            this._matrix.a = this._rect.width / source.width;
            this._matrix.d = this._rect.height / source.height;

            mipmap.width = this.w;
            mipmap.height = this.h;
            mipmap.copyPixels(source, source.rect, new Rectangle(0, 0, this.w, this.h));

            this.w >>= 1;
            this.h >>= 1;

            this._rect.width = this.w > 1 ? this.w : 1;
            this._rect.height = this.h > 1 ? this.h : 1;
        }

        console.log('TextureUtils.isBitmapDataValid: ', TextureUtils.isBitmapDataValid(mipmap));

        console['timeEnd']('MipMap' + c);
    };
    return MipMapTest;
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzL01pcE1hcFRlc3QudHMiXSwibmFtZXMiOlsiTWlwTWFwVGVzdCIsIk1pcE1hcFRlc3QuY29uc3RydWN0b3IiLCJNaXBNYXBUZXN0Lm1pcEltZ0xvYWRlZCIsIk1pcE1hcFRlc3Qub25JbWFnZUxvYWQiLCJNaXBNYXBUZXN0Lm9uTW91c2VEb3duIiwiTWlwTWFwVGVzdC5nZW5lcmF0ZU1pcE1hcCJdLCJtYXBwaW5ncyI6IkFBQUEsZ0VBQXNFO0FBQ3RFLHdEQUErRDtBQUMvRCw4REFBb0U7QUFDcEUsNkRBQW1FO0FBQ25FLGlGQUFxRjtBQUNyRiwrREFBcUU7QUFDckUsbURBQTBEO0FBQzFELGdFQUFzRTtBQUN0RSxnRUFBc0U7O0FBRXRFO0lBV0NBO1FBQUFDLGlCQVlDQTtRQWpCREEsS0FBUUEsS0FBS0EsR0FBeUJBLElBQUlBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3REQSxLQUFRQSxPQUFPQSxHQUFvQkEsSUFBSUEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFNL0NBLHlDQUF5Q0E7UUFDekNBLGFBQWFBO1FBRWJBLElBQUlBLGFBQWFBLEdBQUdBLElBQUlBLFVBQVVBLENBQUVBLHNCQUFzQkEsQ0FBQ0E7UUFDM0RBLElBQUlBLENBQUNBLFNBQVNBLEdBQUlBLElBQUlBLFNBQVNBLENBQUNBLENBQUNBO1FBQ2pDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFVQSxHQUFHQSxtQkFBbUJBLENBQUNBLElBQUlBO1FBQ3BEQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFFQSxhQUFhQSxDQUFFQTtRQUNwQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsZ0JBQWdCQSxDQUFFQSxLQUFLQSxDQUFDQSxRQUFRQSxFQUFHQSxVQUFDQSxLQUFXQTttQkFBS0EsS0FBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7UUFBeEJBLENBQXdCQSxDQUFFQTs7UUFFN0ZBLFFBQVFBLENBQUNBLFdBQVdBLEdBQUdBLFVB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R0FBZ0JBLElBQUlBO0FBQUFBLFFBQUVBLG9DQUFBQSxLQUFLQSxHQUFXQSxLQUFLQTtBQUFBQSxRQUFFQSxtQ0FBQUEsSUFBSUEsR0FBVUEsQ0FBQ0EsQ0FBQ0E7QUFBQUEsUUFFL0dBLElBQUlBLENBQUNBLEdBQVVBLElBQUlBLENBQUNBLENBQUNBO1FBQ3JCQSxJQUFJQSxDQUFDQTs7UUFFTEEsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7O1FBRTdCQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFFQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFFQTtZQUVwQ0EsSUFBSUEsS0FBS0E7Z0JBQ1JBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBOztZQUVoQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsR0FBR0EsTUFBTUEsQ0FBQ0EsS0FBS0E7WUFDaERBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBLE1BQU1BOztZQUVsREEsTUFBTUEsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDckJBLE1BQU1BLENBQUNBLE1BQU1BLEdBQUVBLElBQUlBLENBQUNBLENBQUNBO1lBQ3JCQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFFQSxNQUFNQSxFQUFHQSxNQUFNQSxDQUFDQSxJQUFJQSxFQUFHQSxJQUFJQSxTQUFTQSxDQUFFQSxDQUFDQSxFQUFHQSxDQUFDQSxFQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxFQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFFQSxDQUFFQTs7WUFFcEZBLElBQUlBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBO1lBQ1pBLElBQUlBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBOztZQUVaQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0E7U0FDMUNBOztRQUVEQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFFQSxrQ0FBa0NBLEVBQUdBLFlBQVlBLENBQUNBLGlCQUFpQkEsQ0FBRUEsTUFBTUEsQ0FBRUEsQ0FBQ0E7O1FBRTNGQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxRQUFRQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUVqQ0EsQ0FBQ0E7SUFDRkwsa0JBQUNBO0FBQURBLENBQUNBLElBQUE7QUFBQSIsImZpbGUiOiJ1dGlscy9NaXBNYXBUZXN0LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9yb2JiYXRlbWFuL1dlYnN0b3JtUHJvamVjdHMvYXdheWpzLWNvcmUvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJpdG1hcERhdGFcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9iYXNlL0JpdG1hcERhdGFcIik7XG5pbXBvcnQgTWF0cml4XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9nZW9tL01hdHJpeFwiKTtcbmltcG9ydCBSZWN0YW5nbGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9nZW9tL1JlY3RhbmdsZVwiKTtcbmltcG9ydCBVUkxMb2FkZXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9uZXQvVVJMTG9hZGVyXCIpO1xuaW1wb3J0IFVSTExvYWRlckRhdGFGb3JtYXRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL25ldC9VUkxMb2FkZXJEYXRhRm9ybWF0XCIpO1xuaW1wb3J0IFVSTFJlcXVlc3RcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9uZXQvVVJMUmVxdWVzdFwiKTtcbmltcG9ydCBFdmVudFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2V2ZW50cy9FdmVudFwiKTtcbmltcG9ydCBQYXJzZXJVdGlsc1x0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9wYXJzZXJzL1BhcnNlclV0aWxzXCIpO1xuaW1wb3J0IFRleHR1cmVVdGlsc1x0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi91dGlscy9UZXh0dXJlVXRpbHNcIik7XG5cbmNsYXNzIE1pcE1hcFRlc3RcbntcblxuXHRwcml2YXRlIG1pcExvYWRlciAgICAgICA6IFVSTExvYWRlcjtcblx0cHJpdmF0ZSBzb3VyY2VCaXRtYXAgICAgOiBCaXRtYXBEYXRhO1xuXHRwcml2YXRlIG1pcE1hcCAgICAgICAgICA6IEJpdG1hcERhdGE7XG5cdHByaXZhdGUgX3JlY3QgICAgICAgICAgIDogUmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZSgpO1xuXHRwcml2YXRlIF9tYXRyaXggICAgICAgICA6IE1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcblx0cHJpdmF0ZSB3ICAgICAgICAgICAgICAgOiBudW1iZXI7XG5cdHByaXZhdGUgaCAgICAgICAgICAgICAgIDogbnVtYmVyO1xuXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0Ly8gTG9hZCBhIFBOR1xuXG5cdFx0dmFyIG1pcFVybFJlcXVlc3QgPSBuZXcgVVJMUmVxdWVzdCggJ2Fzc2V0cy8xMDI0eDEwMjQucG5nJyk7XG5cdFx0dGhpcy5taXBMb2FkZXIgID0gbmV3IFVSTExvYWRlcigpO1xuXHRcdHRoaXMubWlwTG9hZGVyLmRhdGFGb3JtYXQgPSBVUkxMb2FkZXJEYXRhRm9ybWF0LkJMT0I7XG5cdFx0dGhpcy5taXBMb2FkZXIubG9hZCggbWlwVXJsUmVxdWVzdCApO1xuXHRcdHRoaXMubWlwTG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoIEV2ZW50LkNPTVBMRVRFICwgKGV2ZW50OkV2ZW50KSA9PiB0aGlzLm1pcEltZ0xvYWRlZChldmVudCkgKTtcblxuXHRcdGRvY3VtZW50Lm9ubW91c2Vkb3duID0gKCBlICkgPT4gdGhpcy5vbk1vdXNlRG93biggZSApO1xuXHR9XG5cblx0cHJpdmF0ZSBtaXBJbWdMb2FkZWQoZXZlbnQ6RXZlbnQpXG5cdHtcblx0XHR2YXIgbG9hZGVyICA6IFVSTExvYWRlciAgICAgICAgPSA8VVJMTG9hZGVyID4gZXZlbnQudGFyZ2V0O1xuXHRcdHZhciBpbWFnZSA6IEhUTUxJbWFnZUVsZW1lbnQgPSBQYXJzZXJVdGlscy5ibG9iVG9JbWFnZShsb2FkZXIuZGF0YSk7XG5cdFx0aW1hZ2Uub25sb2FkID0gKCBldmVudCApID0+IHRoaXMub25JbWFnZUxvYWQoIGV2ZW50ICk7XG5cdH1cblxuXHRwcml2YXRlIG9uSW1hZ2VMb2FkIChldmVudClcblx0e1xuXHRcdHZhciBpbWFnZSA6IEhUTUxJbWFnZUVsZW1lbnQgPSA8SFRNTEltYWdlRWxlbWVudD4gZXZlbnQudGFyZ2V0O1xuXHRcdGFsZXJ0KCAnRWFjaCBjbGljayB3aWxsIGdlbmVyYXRlIGEgbGV2ZWwgb2YgTWlwTWFwJyk7XG5cblx0XHR0aGlzLnNvdXJjZUJpdG1hcCAgICAgICAgICAgICAgICAgICAgICAgID0gbmV3IEJpdG1hcERhdGEoIDEwMjQgLCAxMDI0ICwgdHJ1ZSAsIDB4ZmYwMDAwICk7XG5cdFx0dGhpcy5zb3VyY2VCaXRtYXAuZHJhd0ltYWdlKCBpbWFnZSAsIHRoaXMuc291cmNlQml0bWFwLnJlY3QgLCB0aGlzLnNvdXJjZUJpdG1hcC5yZWN0ICk7XG5cdFx0dGhpcy5zb3VyY2VCaXRtYXAuY2FudmFzLnN0eWxlLnBvc2l0aW9uICA9ICdhYnNvbHV0ZSc7XG5cdFx0dGhpcy5zb3VyY2VCaXRtYXAuY2FudmFzLnN0eWxlLmxlZnQgICAgICA9ICcwcHgnO1xuXHRcdHRoaXMuc291cmNlQml0bWFwLmNhbnZhcy5zdHlsZS50b3AgICAgICAgPSAnMTAzMHB4JztcblxuXHRcdC8vZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggdGhpcy5zb3VyY2VCaXRtYXAuY2FudmFzICk7XG5cblx0XHR0aGlzLm1pcE1hcCA9IG5ldyBCaXRtYXBEYXRhKCAxMDI0ICwgMTAyNCAsIHRydWUgLCAweGZmMDAwMCApO1xuXHRcdHRoaXMubWlwTWFwLmNhbnZhcy5zdHlsZS5wb3NpdGlvbiAgPSAnYWJzb2x1dGUnO1xuXHRcdHRoaXMubWlwTWFwLmNhbnZhcy5zdHlsZS5sZWZ0ICAgICAgPSAnMHB4Jztcblx0XHR0aGlzLm1pcE1hcC5jYW52YXMuc3R5bGUudG9wICAgICAgID0gJzBweCc7XG5cblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCB0aGlzLm1pcE1hcC5jYW52YXMgKTtcblxuXHRcdHRoaXMuX3JlY3Qud2lkdGggICAgPSB0aGlzLnNvdXJjZUJpdG1hcC53aWR0aDtcblx0XHR0aGlzLl9yZWN0LmhlaWdodCAgID0gdGhpcy5zb3VyY2VCaXRtYXAuaGVpZ2h0O1xuXG5cdFx0dGhpcy53ID0gdGhpcy5zb3VyY2VCaXRtYXAud2lkdGg7XG5cdFx0dGhpcy5oID0gdGhpcy5zb3VyY2VCaXRtYXAuaGVpZ2h0O1xuXG5cdH1cblxuXHRwcml2YXRlIG9uTW91c2VEb3duKCBlIClcblx0e1xuXHRcdHRoaXMuZ2VuZXJhdGVNaXBNYXAoIHRoaXMuc291cmNlQml0bWFwICwgIHRoaXMubWlwTWFwICk7XG5cdH1cblx0XG5cdHB1YmxpYyBnZW5lcmF0ZU1pcE1hcCggc291cmNlIDogQml0bWFwRGF0YSAsIG1pcG1hcCA6IEJpdG1hcERhdGEgPSBudWxsLCBhbHBoYTpib29sZWFuID0gZmFsc2UsIHNpZGU6bnVtYmVyID0gLTEpXG5cdHtcblx0XHR2YXIgYzpudW1iZXIgPSB0aGlzLnc7XG5cdFx0dmFyIGk6bnVtYmVyO1xuXG5cdFx0Y29uc29sZVsndGltZSddKCdNaXBNYXAnICsgYyk7XG5cdFx0XG5cdFx0aWYgKCh0aGlzLncgPj0gMSApIHx8ICh0aGlzLmggPj0gMSkpIHtcblxuXHRcdFx0aWYgKGFscGhhKVxuXHRcdFx0XHRtaXBtYXAuZmlsbFJlY3QodGhpcy5fcmVjdCwgMCk7XG5cblx0XHRcdHRoaXMuX21hdHJpeC5hID0gdGhpcy5fcmVjdC53aWR0aCAvIHNvdXJjZS53aWR0aDtcblx0XHRcdHRoaXMuX21hdHJpeC5kID0gdGhpcy5fcmVjdC5oZWlnaHQgLyBzb3VyY2UuaGVpZ2h0O1xuXG5cdFx0XHRtaXBtYXAud2lkdGggPSB0aGlzLnc7XG5cdFx0XHRtaXBtYXAuaGVpZ2h0PSB0aGlzLmg7XG5cdFx0XHRtaXBtYXAuY29weVBpeGVscyggc291cmNlICwgc291cmNlLnJlY3QgLCBuZXcgUmVjdGFuZ2xlKCAwICwgMCAsIHRoaXMudyAsIHRoaXMuaCApICk7XG5cblx0XHRcdHRoaXMudyA+Pj0gMTtcblx0XHRcdHRoaXMuaCA+Pj0gMTtcblxuXHRcdFx0dGhpcy5fcmVjdC53aWR0aCA9IHRoaXMudyA+IDE/IHRoaXMudyA6IDE7XG5cdFx0XHR0aGlzLl9yZWN0LmhlaWdodCA9IHRoaXMuaCA+IDE/IHRoaXMuaCA6IDE7XG5cdFx0fVxuXG5cdFx0Y29uc29sZS5sb2coICdUZXh0dXJlVXRpbHMuaXNCaXRtYXBEYXRhVmFsaWQ6ICcgLCBUZXh0dXJlVXRpbHMuaXNCaXRtYXBEYXRhVmFsaWQoIG1pcG1hcCApKTtcblxuXHRcdGNvbnNvbGVbJ3RpbWVFbmQnXSgnTWlwTWFwJyArIGMpO1xuXG5cdH1cbn0iXX0=