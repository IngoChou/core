var BitmapImage2D = require("awayjs-core/lib/data/BitmapImage2D");
var Matrix = require("awayjs-core/lib/geom/Matrix");
var Rectangle = require("awayjs-core/lib/geom/Rectangle");
var URLLoader = require("awayjs-core/lib/net/URLLoader");
var URLLoaderDataFormat = require("awayjs-core/lib/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var Event = require("awayjs-core/lib/events/Event");
var ParserUtils = require("awayjs-core/lib/parsers/ParserUtils");
var ImageUtils = require("awayjs-core/lib/utils/ImageUtils");
var MipMapTest = (function () {
    function MipMapTest() {
        //---------------------------------------
        // Load a PNG
        var _this = this;
        this._rect = new Rectangle();
        this._matrix = new Matrix();
        var mipUrlRequest = new URLRequest('assets/1024x1024.png');
        this.mipLoader = new URLLoader();
        this.mipLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.mipLoader.load(mipUrlRequest);
        this.mipLoader.addEventListener(Event.COMPLETE, function (event) { return _this.mipImgLoaded(event); });
        document.onmousedown = function (e) { return _this.onMouseDown(e); };
    }
    MipMapTest.prototype.mipImgLoaded = function (event) {
        var _this = this;
        var loader = event.target;
        var image = ParserUtils.blobToImage(loader.data);
        image.onload = function (event) { return _this.onImageLoad(event); };
    };
    MipMapTest.prototype.onImageLoad = function (event) {
        var image = event.target;
        alert('Each click will generate a level of MipMap');
        this.sourceBitmap = new BitmapImage2D(1024, 1024, true, 0xff0000);
        this.sourceBitmap.draw(image);
        this.sourceBitmap.getCanvas().style.position = 'absolute';
        this.sourceBitmap.getCanvas().style.left = '0px';
        this.sourceBitmap.getCanvas().style.top = '1030px';
        //document.body.appendChild( this.sourceBitmap.canvas );
        this.mipMap = new BitmapImage2D(1024, 1024, true, 0xff0000);
        this.mipMap.getCanvas().style.position = 'absolute';
        this.mipMap.getCanvas().style.left = '0px';
        this.mipMap.getCanvas().style.top = '0px';
        document.body.appendChild(this.mipMap.getCanvas());
        this._rect.width = this.sourceBitmap.width;
        this._rect.height = this.sourceBitmap.height;
        this.w = this.sourceBitmap.width;
        this.h = this.sourceBitmap.height;
    };
    MipMapTest.prototype.onMouseDown = function (e) {
        this.generateMipMap(this.sourceBitmap, this.mipMap);
    };
    MipMapTest.prototype.generateMipMap = function (source, mipmap, alpha, side) {
        if (mipmap === void 0) { mipmap = null; }
        if (alpha === void 0) { alpha = false; }
        if (side === void 0) { side = -1; }
        var c = this.w;
        var i;
        console['time']('MipMap' + c);
        if ((this.w >= 1) || (this.h >= 1)) {
            if (alpha)
                mipmap.fillRect(this._rect, 0);
            this._matrix.a = this._rect.width / source.width;
            this._matrix.d = this._rect.height / source.height;
            mipmap.width = this.w;
            mipmap.height = this.h;
            mipmap.copyPixels(source, source.rect, new Rectangle(0, 0, this.w, this.h));
            this.w >>= 1;
            this.h >>= 1;
            this._rect.width = this.w > 1 ? this.w : 1;
            this._rect.height = this.h > 1 ? this.h : 1;
        }
        console.log('ImageUtils.isBitmapImage2DValid: ', ImageUtils.isImage2DValid(mipmap));
        console['timeEnd']('MipMap' + c);
    };
    return MipMapTest;
})();

//# sourceMappingURL=data:application/json;base64,