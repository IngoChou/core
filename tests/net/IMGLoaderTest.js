var URLLoader = require("awayjs-core/lib/net/URLLoader");
var URLLoaderDataFormat = require("awayjs-core/lib/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var Event = require("awayjs-core/lib/events/Event");
var IOErrorEvent = require("awayjs-core/lib/events/IOErrorEvent");
var ParserUtils = require("awayjs-core/lib/parsers/ParserUtils");
var IMGLoaderTest = (function () {
    function IMGLoaderTest() {
        //-----------------------------------------------------------------------------------------------
        // load a png
        //-----------------------------------------------------------------------------------------------
        var _this = this;
        this.pngLoader = new URLLoader();
        this.pngLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.pngLoader.addEventListener(Event.COMPLETE, function (event) { return _this.pngLoaderComplete(event); });
        this.pngLoader.addEventListener(IOErrorEvent.IO_ERROR, function (event) { return _this.ioError(event); });
        this.pngLoader.load(new URLRequest('assets/2.png'));
        //-----------------------------------------------------------------------------------------------
        // Load a jpg
        //-----------------------------------------------------------------------------------------------
        this.jpgLoader = new URLLoader();
        this.jpgLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.jpgLoader.addEventListener(Event.COMPLETE, function (event) { return _this.jpgLoaderComplete(event); });
        this.jpgLoader.addEventListener(IOErrorEvent.IO_ERROR, function (event) { return _this.ioError(event); });
        this.jpgLoader.load(new URLRequest('assets/1.jpg'));
        //-----------------------------------------------------------------------------------------------
        // Load file of wrong format
        //-----------------------------------------------------------------------------------------------
        this.noAnImageLoader = new URLLoader();
        this.noAnImageLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.noAnImageLoader.addEventListener(Event.COMPLETE, function (event) { return _this.noAnImageLoaderComplete(event); });
        this.noAnImageLoader.addEventListener(IOErrorEvent.IO_ERROR, function (event) { return _this.ioError(event); });
        this.noAnImageLoader.load(new URLRequest('assets/data.txt'));
        //-----------------------------------------------------------------------------------------------
        // Load image that does not exist
        //-----------------------------------------------------------------------------------------------
        this.wrongURLLoader = new URLLoader();
        this.wrongURLLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.wrongURLLoader.addEventListener(Event.COMPLETE, function (event) { return _this.wrongURLLoaderComplete(event); });
        this.wrongURLLoader.addEventListener(IOErrorEvent.IO_ERROR, function (event) { return _this.ioError(event); });
        this.wrongURLLoader.load(new URLRequest('assets/iDontExist.png'));
    }
    IMGLoaderTest.prototype.pngLoaderComplete = function (e) {
        this.logSuccessfullLoad(e);
        var imgLoader = e.target;
        document.body.appendChild(ParserUtils.blobToImage(imgLoader.data));
    };
    IMGLoaderTest.prototype.jpgLoaderComplete = function (e) {
        this.logSuccessfullLoad(e);
        var imgLoader = e.target;
        document.body.appendChild(ParserUtils.blobToImage(imgLoader.data));
    };
    IMGLoaderTest.prototype.noAnImageLoaderComplete = function (e) {
        this.logSuccessfullLoad(e);
    };
    IMGLoaderTest.prototype.wrongURLLoaderComplete = function (e) {
        this.logSuccessfullLoad(e);
    };
    IMGLoaderTest.prototype.logSuccessfullLoad = function (event) {
        var imgLoader = event.target;
        console.log('IMG.Event.Complete', imgLoader.url);
    };
    IMGLoaderTest.prototype.ioError = function (event) {
        var imgLoader = event.target;
        console.log('ioError', imgLoader.url);
    };
    IMGLoaderTest.prototype.abortError = function (event) {
        var imgLoader = event.target;
        console.log('abortError', imgLoader.url);
    };
    return IMGLoaderTest;
})();

//# sourceMappingURL=data:application/json;base64,