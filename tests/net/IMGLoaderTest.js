var URLLoader = require("awayjs-core/lib/core/net/URLLoader");
var URLLoaderDataFormat = require("awayjs-core/lib/core/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/core/net/URLRequest");
var Event = require("awayjs-core/lib/events/Event");
var IOErrorEvent = require("awayjs-core/lib/events/IOErrorEvent");
var ParserUtils = require("awayjs-core/lib/parsers/ParserUtils");

var IMGLoaderTest = (function () {
    function IMGLoaderTest() {
        var _this = this;
        //-----------------------------------------------------------------------------------------------
        // load a png
        //-----------------------------------------------------------------------------------------------
        var pngURLrq = new URLRequest('assets/2.png');

        this.pngLoader = new URLLoader();
        this.pngLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.pngLoader.addEventListener(Event.COMPLETE, function (event) {
            return _this.pngLoaderComplete(event);
        });
        this.pngLoader.addEventListener(IOErrorEvent.IO_ERROR, function (event) {
            return _this.ioError(event);
        });
        this.pngLoader.load(pngURLrq);

        //-----------------------------------------------------------------------------------------------
        // Load a jpg
        //-----------------------------------------------------------------------------------------------
        var jpgURLrq = new URLRequest('assets/1.jpg');

        this.jpgLoader = new URLLoader();
        this.jpgLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.jpgLoader.addEventListener(Event.COMPLETE, function (event) {
            return _this.jpgLoaderComplete(event);
        });
        this.jpgLoader.addEventListener(IOErrorEvent.IO_ERROR, function (event) {
            return _this.ioError(event);
        });
        this.jpgLoader.load(jpgURLrq);

        //-----------------------------------------------------------------------------------------------
        // Load file of wrong format
        //-----------------------------------------------------------------------------------------------
        var notURLrq = new URLRequest('assets/data.txt');

        this.noAnImageLoader = new URLLoader();
        this.noAnImageLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.noAnImageLoader.addEventListener(Event.COMPLETE, function (event) {
            return _this.noAnImageLoaderComplete(event);
        });
        this.noAnImageLoader.addEventListener(IOErrorEvent.IO_ERROR, function (event) {
            return _this.ioError(event);
        });
        this.noAnImageLoader.load(notURLrq);

        //-----------------------------------------------------------------------------------------------
        // Load image that does not exist
        //-----------------------------------------------------------------------------------------------
        var wrongURLrq = new URLRequest('assets/iDontExist.png');

        this.wrongURLLoader = new URLLoader();
        this.wrongURLLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.wrongURLLoader.addEventListener(Event.COMPLETE, function (event) {
            return _this.wrongURLLoaderComplete(event);
        });
        this.wrongURLLoader.addEventListener(IOErrorEvent.IO_ERROR, function (event) {
            return _this.ioError(event);
        });
        this.wrongURLLoader.load(wrongURLrq);
    }
    IMGLoaderTest.prototype.pngLoaderComplete = function (e) {
        this.logSuccessfullLoad(e);

        var imgLoader = e.target;
        document.body.appendChild(ParserUtils.blobToImage(imgLoader.data));
    };

    IMGLoaderTest.prototype.jpgLoaderComplete = function (e) {
        this.logSuccessfullLoad(e);

        var imgLoader = e.target;
        document.body.appendChild(ParserUtils.blobToImage(imgLoader.data));
    };

    IMGLoaderTest.prototype.noAnImageLoaderComplete = function (e) {
        this.logSuccessfullLoad(e);
    };

    IMGLoaderTest.prototype.wrongURLLoaderComplete = function (e) {
        this.logSuccessfullLoad(e);
    };

    IMGLoaderTest.prototype.logSuccessfullLoad = function (event) {
        var imgLoader = event.target;
        console.log('IMG.Event.Complete', imgLoader.url);
    };

    IMGLoaderTest.prototype.ioError = function (event) {
        var imgLoader = event.target;
        console.log('ioError', imgLoader.url);
    };

    IMGLoaderTest.prototype.abortError = function (event) {
        var imgLoader = event.target;
        console.log('abortError', imgLoader.url);
    };
    return IMGLoaderTest;
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5ldC9JTUdMb2FkZXJUZXN0LnRzIl0sIm5hbWVzIjpbIklNR0xvYWRlclRlc3QiLCJJTUdMb2FkZXJUZXN0LmNvbnN0cnVjdG9yIiwiSU1HTG9hZGVyVGVzdC5wbmdMb2FkZXJDb21wbGV0ZSIsIklNR0xvYWRlclRlc3QuanBnTG9hZGVyQ29tcGxldGUiLCJJTUdMb2FkZXJUZXN0Lm5vQW5JbWFnZUxvYWRlckNvbXBsZXRlIiwiSU1HTG9hZGVyVGVzdC53cm9uZ1VSTExvYWRlckNvbXBsZXRlIiwiSU1HTG9hZGVyVGVzdC5sb2dTdWNjZXNzZnVsbExvYWQiLCJJTUdMb2FkZXJUZXN0LmlvRXJyb3IiLCJJTUdMb2FkZXJUZXN0LmFib3J0RXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBLDZEQUFtRTtBQUNuRSxpRkFBcUY7QUFDckYsK0RBQXFFO0FBQ3JFLG1EQUEwRDtBQUMxRCxpRUFBdUU7QUFDdkUsZ0VBQXNFOztBQUV0RTtJQVFDQTtRQUFBQyxpQkFrRENBO1FBL0NBQSxpR0FBaUdBO1FBQ2pHQSxhQUFhQTtRQUNiQSxpR0FBaUdBO1FBRWpHQSxJQUFJQSxRQUFRQSxHQUFjQSxJQUFJQSxVQUFVQSxDQUFFQSxjQUFjQSxDQUFDQTs7UUFFekRBLElBQUlBLENBQUNBLFNBQVNBLEdBQVlBLElBQUlBLFNBQVNBLENBQUNBLENBQUNBO1FBQ3pDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFVQSxHQUFHQSxtQkFBbUJBLENBQUNBLElBQUlBO1FBQ3BEQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxnQkFBZ0JBLENBQUVBLEtBQUtBLENBQUNBLFFBQVFBLEVBQUdBLFVBQUVBLEtBQWFBO21CQUFLQSxLQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLEtBQUtBLENBQUNBO1FBQTdCQSxDQUE2QkEsQ0FBRUE7UUFDckdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGdCQUFnQkEsQ0FBRUEsWUFBWUEsQ0FBQ0EsUUFBUUEsRUFBR0EsVUFBRUEsS0FBb0JBO21CQUFN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QUVBLFNBQVNBLEVBQUdBLFNBQVNBLENBQUNBLEdBQUdBLENBQUVBO0lBRXpDQSxDQUFDQTs7SUFFRFAscUNBQUFBLFVBQXFCQSxLQUFhQTtRQUdqQ1EsSUFBSUEsU0FBU0EsR0FBMkJBLEtBQUtBLENBQUNBLE1BQU1BO1FBQ3BEQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFFQSxZQUFZQSxFQUFHQSxTQUFTQSxDQUFDQSxHQUFHQSxDQUFFQTtJQUU1Q0EsQ0FBQ0E7SUFFRlIscUJBQUNBO0FBQURBLENBQUNBLElBQUE7QUFBQSIsImZpbGUiOiJuZXQvSU1HTG9hZGVyVGVzdC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1jb3JlLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVUkxMb2FkZXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9uZXQvVVJMTG9hZGVyXCIpO1xuaW1wb3J0IFVSTExvYWRlckRhdGFGb3JtYXRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL25ldC9VUkxMb2FkZXJEYXRhRm9ybWF0XCIpO1xuaW1wb3J0IFVSTFJlcXVlc3RcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9uZXQvVVJMUmVxdWVzdFwiKTtcbmltcG9ydCBFdmVudFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2V2ZW50cy9FdmVudFwiKTtcbmltcG9ydCBJT0Vycm9yRXZlbnRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZXZlbnRzL0lPRXJyb3JFdmVudFwiKTtcbmltcG9ydCBQYXJzZXJVdGlsc1x0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9wYXJzZXJzL1BhcnNlclV0aWxzXCIpO1xuXG5jbGFzcyBJTUdMb2FkZXJUZXN0XG57XG5cblx0cHJpdmF0ZSBwbmdMb2FkZXIgICAgICAgOiBVUkxMb2FkZXI7XG5cdHByaXZhdGUganBnTG9hZGVyICAgICAgIDogVVJMTG9hZGVyO1xuXHRwcml2YXRlIG5vQW5JbWFnZUxvYWRlciA6IFVSTExvYWRlcjtcblx0cHJpdmF0ZSB3cm9uZ1VSTExvYWRlciAgOiBVUkxMb2FkZXI7XG5cblx0Y29uc3RydWN0b3IoKVxuXHR7XG5cblx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0Ly8gbG9hZCBhIHBuZ1xuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdHZhciBwbmdVUkxycSAgICAgICAgICAgID0gbmV3IFVSTFJlcXVlc3QoICdhc3NldHMvMi5wbmcnKTtcblxuXHRcdHRoaXMucG5nTG9hZGVyICAgICAgICAgID0gbmV3IFVSTExvYWRlcigpO1xuXHRcdHRoaXMucG5nTG9hZGVyLmRhdGFGb3JtYXQgPSBVUkxMb2FkZXJEYXRhRm9ybWF0LkJMT0I7XG5cdFx0dGhpcy5wbmdMb2FkZXIuYWRkRXZlbnRMaXN0ZW5lciggRXZlbnQuQ09NUExFVEUgLCAoIGV2ZW50IDogRXZlbnQpID0+IHRoaXMucG5nTG9hZGVyQ29tcGxldGUoZXZlbnQpICk7XG5cdFx0dGhpcy5wbmdMb2FkZXIuYWRkRXZlbnRMaXN0ZW5lciggSU9FcnJvckV2ZW50LklPX0VSUk9SICwgKCBldmVudCA6IElPRXJyb3JFdmVudCApID0+IHRoaXMuaW9FcnJvcihldmVudCkgKTtcblx0XHR0aGlzLnBuZ0xvYWRlci5sb2FkKCBwbmdVUkxycSApO1xuXG5cdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdC8vIExvYWQgYSBqcGdcblx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHR2YXIganBnVVJMcnEgICAgICAgICAgICA9IG5ldyBVUkxSZXF1ZXN0KCAnYXNzZXRzLzEuanBnJyk7XG5cblx0XHR0aGlzLmpwZ0xvYWRlciAgICAgICAgICA9IG5ldyBVUkxMb2FkZXIoKTtcblx0XHR0aGlzLmpwZ0xvYWRlci5kYXRhRm9ybWF0ID0gVVJMTG9hZGVyRGF0YUZvcm1hdC5CTE9CO1xuXHRcdHRoaXMuanBnTG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoIEV2ZW50LkNPTVBMRVRFICwgKCBldmVudCA6IEV2ZW50KSA9PiB0aGlzLmpwZ0xvYWRlckNvbXBsZXRlKGV2ZW50KSApO1xuXHRcdHRoaXMuanBnTG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoIElPRXJyb3JFdmVudC5JT19FUlJPUiAsICggZXZlbnQgOiBJT0Vycm9yRXZlbnQgKSA9PiB0aGlzLmlvRXJyb3IoZXZlbnQpICk7XG5cdFx0dGhpcy5qcGdMb2FkZXIubG9hZCgganBnVVJMcnEgKTtcblxuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHQvLyBMb2FkIGZpbGUgb2Ygd3JvbmcgZm9ybWF0XG5cdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdFx0dmFyIG5vdFVSTHJxICAgICAgICAgICAgPSBuZXcgVVJMUmVxdWVzdCggJ2Fzc2V0cy9kYXRhLnR4dCcpO1xuXG5cdFx0dGhpcy5ub0FuSW1hZ2VMb2FkZXIgICAgPSBuZXcgVVJMTG9hZGVyKCk7XG5cdFx0dGhpcy5ub0FuSW1hZ2VMb2FkZXIuZGF0YUZvcm1hdCA9IFVSTExvYWRlckRhdGFGb3JtYXQuQkxPQjtcblx0XHR0aGlzLm5vQW5JbWFnZUxvYWRlci5hZGRFdmVudExpc3RlbmVyKCBFdmVudC5DT01QTEVURSAsICggZXZlbnQgOiBFdmVudCkgPT4gdGhpcy5ub0FuSW1hZ2VMb2FkZXJDb21wbGV0ZShldmVudCkgKTtcblx0XHR0aGlzLm5vQW5JbWFnZUxvYWRlci5hZGRFdmVudExpc3RlbmVyKCBJT0Vycm9yRXZlbnQuSU9fRVJST1IgLCAoIGV2ZW50IDogSU9FcnJvckV2ZW50ICkgPT4gdGhpcy5pb0Vycm9yKGV2ZW50KSApO1xuXHRcdHRoaXMubm9BbkltYWdlTG9hZGVyLmxvYWQoIG5vdFVSTHJxIClcblxuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHQvLyBMb2FkIGltYWdlIHRoYXQgZG9lcyBub3QgZXhpc3Rcblx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHR2YXIgd3JvbmdVUkxycSAgICAgICAgICAgID0gbmV3IFVSTFJlcXVlc3QoICdhc3NldHMvaURvbnRFeGlzdC5wbmcnKTtcblxuXHRcdHRoaXMud3JvbmdVUkxMb2FkZXIgICAgID0gbmV3IFVSTExvYWRlcigpO1xuXHRcdHRoaXMud3JvbmdVUkxMb2FkZXIuZGF0YUZvcm1hdCA9IFVSTExvYWRlckRhdGFGb3JtYXQuQkxPQjtcblx0XHR0aGlzLndyb25nVVJMTG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoIEV2ZW50LkNPTVBMRVRFICwgKCBldmVudCA6IEV2ZW50KSA9PiB0aGlzLndyb25nVVJMTG9hZGVyQ29tcGxldGUoZXZlbnQpICk7XG5cdFx0dGhpcy53cm9uZ1VSTExvYWRlci5hZGRFdmVudExpc3RlbmVyKCBJT0Vycm9yRXZlbnQuSU9fRVJST1IgLCAoIGV2ZW50IDogSU9FcnJvckV2ZW50ICkgPT4gdGhpcy5pb0Vycm9yKGV2ZW50KSApO1xuXHRcdHRoaXMud3JvbmdVUkxMb2FkZXIubG9hZCggd3JvbmdVUkxycSApO1xuXHR9XG5cblx0cHJpdmF0ZSBwbmdMb2FkZXJDb21wbGV0ZSAoIGUgOiBFdmVudCApIDogdm9pZFxuXHR7XG5cblx0XHR0aGlzLmxvZ1N1Y2Nlc3NmdWxsTG9hZCggZSApO1xuXG5cblx0XHR2YXIgaW1nTG9hZGVyIDogVVJMTG9hZGVyID0gPFVSTExvYWRlcj4gZS50YXJnZXQ7XG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggUGFyc2VyVXRpbHMuYmxvYlRvSW1hZ2UoaW1nTG9hZGVyLmRhdGEpICk7XG5cblx0fVxuXG5cdHByaXZhdGUganBnTG9hZGVyQ29tcGxldGUgKCBlIDogRXZlbnQgKSA6IHZvaWRcblx0e1xuXG5cdFx0dGhpcy5sb2dTdWNjZXNzZnVsbExvYWQoIGUgKTtcblxuXHRcdHZhciBpbWdMb2FkZXIgOiBVUkxMb2FkZXIgPSA8VVJMTG9hZGVyPiBlLnRhcmdldDtcblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCBQYXJzZXJVdGlscy5ibG9iVG9JbWFnZShpbWdMb2FkZXIuZGF0YSkgKTtcblxuXHR9XG5cblx0cHJpdmF0ZSBub0FuSW1hZ2VMb2FkZXJDb21wbGV0ZSAoIGUgOiBFdmVudCApIDogdm9pZFxuXHR7XG5cblx0XHR0aGlzLmxvZ1N1Y2Nlc3NmdWxsTG9hZCggZSApO1xuXG5cdH1cblxuXHRwcml2YXRlIHdyb25nVVJMTG9hZGVyQ29tcGxldGUgKCBlIDogRXZlbnQgKSA6IHZvaWRcblx0e1xuXG5cdFx0dGhpcy5sb2dTdWNjZXNzZnVsbExvYWQoIGUgKTtcblxuXHR9XG5cblx0cHJpdmF0ZSBsb2dTdWNjZXNzZnVsbExvYWQoIGV2ZW50IDogRXZlbnQpIDogdm9pZFxuXHR7XG5cblx0XHR2YXIgaW1nTG9hZGVyIDogVVJMTG9hZGVyID0gPFVSTExvYWRlcj4gZXZlbnQudGFyZ2V0O1xuXHRcdGNvbnNvbGUubG9nKCAnSU1HLkV2ZW50LkNvbXBsZXRlJyAsIGltZ0xvYWRlci51cmwgKTtcblxuXHR9XG5cblx0cHJpdmF0ZSBpb0Vycm9yICggZXZlbnQgOiBJT0Vycm9yRXZlbnQgKSA6IHZvaWRcblx0e1xuXG5cdFx0dmFyIGltZ0xvYWRlciA6IFVSTExvYWRlciA9IDxVUkxMb2FkZXI+IGV2ZW50LnRhcmdldDtcblx0XHRjb25zb2xlLmxvZyggJ2lvRXJyb3InICwgaW1nTG9hZGVyLnVybCApO1xuXG5cdH1cblxuXHRwcml2YXRlIGFib3J0RXJyb3IgKCBldmVudCA6IEV2ZW50ICkgOiB2b2lkXG5cdHtcblxuXHRcdHZhciBpbWdMb2FkZXIgOiBVUkxMb2FkZXIgPSA8VVJMTG9hZGVyPiBldmVudC50YXJnZXQ7XG5cdFx0Y29uc29sZS5sb2coICdhYm9ydEVycm9yJyAsIGltZ0xvYWRlci51cmwgKTtcblxuXHR9XG5cbn0iXX0=