var URLLoader = require("awayjs-core/lib/net/URLLoader");
var URLLoaderDataFormat = require("awayjs-core/lib/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var URLRequestMethod = require("awayjs-core/lib/net/URLRequestMethod");
var URLVariables = require("awayjs-core/lib/net/URLVariables");
var Event = require("awayjs-core/lib/events/Event");
var IOErrorEvent = require("awayjs-core/lib/events/IOErrorEvent");
var HTTPStatusEvent = require("awayjs-core/lib/events/HTTPStatusEvent");
/**
 *
 */
var LoaderTest = (function () {
    function LoaderTest() {
        var _this = this;
        console.log('start');
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        // POST URL Variables to PHP script
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        this.urlLoaderPostURLVars = new URLLoader();
        this.urlLoaderPostURLVars.dataFormat = URLLoaderDataFormat.VARIABLES;
        var urlStr = 'fname=karim&lname=' + Math.floor(Math.random() * 100);
        var urlVars = new URLVariables(urlStr);
        var req = new URLRequest('assets/saveData.php');
        req.method = URLRequestMethod.POST;
        req.data = urlVars;
        this.urlLoaderPostURLVars.addEventListener(Event.COMPLETE, function (event) { return _this.postURLTestComplete(event); });
        this.urlLoaderPostURLVars.addEventListener(IOErrorEvent.IO_ERROR, function (event) { return _this.ioError(event); });
        this.urlLoaderPostURLVars.load(req);
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        // GET CSV File
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        var csrReq = new URLRequest('assets/airports.csv');
        this.urlLoaderGetCSV = new URLLoader();
        this.urlLoaderGetCSV.dataFormat = URLLoaderDataFormat.TEXT;
        this.urlLoaderGetCSV.addEventListener(Event.COMPLETE, function (event) { return _this.getCsvComplete(event); });
        this.urlLoaderGetCSV.addEventListener(Event.OPEN, function (event) { return _this.getCsvOpen(event); });
        this.urlLoaderGetCSV.addEventListener(IOErrorEvent.IO_ERROR, function (event) { return _this.ioError(event); });
        this.urlLoaderGetCSV.load(csrReq);
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        // ERROR test - load a non-existing object
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        var errorReq = new URLRequest('assets/generatingError');
        this.urlLoaderErrorTest = new URLLoader();
        this.urlLoaderErrorTest.dataFormat = URLLoaderDataFormat.TEXT;
        this.urlLoaderErrorTest.addEventListener(Event.COMPLETE, function (event) { return _this.errorComplete(event); });
        this.urlLoaderErrorTest.addEventListener(IOErrorEvent.IO_ERROR, function (event) { return _this.ioError(event); });
        this.urlLoaderErrorTest.addEventListener(HTTPStatusEvent.HTTP_STATUS, function (event) { return _this.httpStatusChange(event); });
        this.urlLoaderErrorTest.load(errorReq);
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        // GET URL Vars - get URL variables
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        var csrReq = new URLRequest('assets/getUrlVars.php');
        this.urlLoaderGetURLVars = new URLLoader();
        this.urlLoaderGetURLVars.dataFormat = URLLoaderDataFormat.VARIABLES;
        this.urlLoaderGetURLVars.addEventListener(IOErrorEvent.IO_ERROR, function (event) { return _this.ioError(event); });
        this.urlLoaderGetURLVars.addEventListener(Event.COMPLETE, function (event) { return _this.getURLVarsComplete(event); });
        this.urlLoaderGetURLVars.load(csrReq);
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        // LOAD Binary file
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        var binReq = new URLRequest('assets/suzanne.awd');
        this.urlLoaderBinary = new URLLoader();
        this.urlLoaderBinary.dataFormat = URLLoaderDataFormat.BINARY;
        this.urlLoaderBinary.addEventListener(IOErrorEvent.IO_ERROR, function (event) { return _this.ioError(event); });
        this.urlLoaderBinary.addEventListener(Event.COMPLETE, function (event) { return _this.binFileLoaded(event); });
        this.urlLoaderBinary.load(binReq);
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        // LOAD Blob file
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        var blobReq = new URLRequest('assets/2.png');
        this.urlLoaderBlob = new URLLoader();
        this.urlLoaderBlob.dataFormat = URLLoaderDataFormat.BLOB;
        this.urlLoaderBlob.addEventListener(Event.COMPLETE, function (event) { return _this.blobFileLoaded(event); });
        this.urlLoaderBlob.load(blobReq);
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        // ARRAY_BUFFER Test
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        var arrBReq = new URLRequest('assets/1.jpg');
        this.urlLoaderArrb = new URLLoader();
        this.urlLoaderArrb.dataFormat = URLLoaderDataFormat.ARRAY_BUFFER;
        this.urlLoaderArrb.addEventListener(Event.COMPLETE, function (event) { return _this.arrayBufferLoaded(event); });
        this.urlLoaderArrb.load(arrBReq);
    }
    LoaderTest.prototype.arrayBufferLoaded = function (event) {
        var arrayBuffer = this.urlLoaderArrb.data;
        var byteArray = new Uint8Array(arrayBuffer);
        console.log('LoaderTest.arrayBufferLoaded', byteArray[1]);
        for (var i = 0; i < byteArray.byteLength; i++) {
        }
    };
    LoaderTest.prototype.blobFileLoaded = function (event) {
        var blob = new Blob([this.urlLoaderBlob.data], { type: 'image/png' });
        var img = document.createElement('img');
        img.src = this.createObjectURL(blob); //window['URL']['createObjectURL'](blob);
        img.onload = function (e) {
            window['URL']['revokeObjectURL'](img.src); // Clean up after yourself.
        };
        console.log('LoaderTest.blobFileLoaded', blob);
        document.body.appendChild(img);
    };
    LoaderTest.prototype.createObjectURL = function (fileBlob) {
        // For some reason TypeScript has "window.URL.createObjectURL" in it's dictionary -
        // but window.URL causes an error
        // cannot make my own .d.ts file either ( results in duplicate definition error )
        // This HACK gets it to work: window['URL']['createObjectURL']
        if (window['URL']) {
            if (window['URL']['createObjectURL']) {
                return window['URL']['createObjectURL'](fileBlob);
            }
        }
        else {
            if (window['webkitURL']) {
                return window['webkitURL']['createObjectURL'](fileBlob);
            }
        }
        return null;
    };
    LoaderTest.prototype.binFileLoaded = function (event) {
        var loader = event.target;
        console.log('LoaderTest.binFileLoaded', loader.data.length);
    };
    LoaderTest.prototype.getURLVarsComplete = function (event) {
        var loader = event.target;
        console.log('LoaderTest.getURLVarsComplete', loader.data);
    };
    LoaderTest.prototype.httpStatusChange = function (event) {
        console.log('LoaderTest.httpStatusChange', event.status);
    };
    LoaderTest.prototype.ioError = function (event) {
        var loader = event.target;
        console.log('LoaderTest.ioError', loader.url);
    };
    LoaderTest.prototype.errorComplete = function (event) {
        var loader = event.target;
        console.log('Loader.errorComplete'); //, loader.data );
    };
    LoaderTest.prototype.postURLTestComplete = function (event) {
        var loader = event.target;
        console.log('LoaderTest.postURLTestComplete', loader.data);
    };
    LoaderTest.prototype.getCsvComplete = function (event) {
        var loader = event.target;
        console.log('LoaderTest.getCsvComplete'); //, loader.data );
    };
    LoaderTest.prototype.getCsvOpen = function (event) {
        var loader = event.target;
        console.log('LoaderTest.getCsvOpen');
    };
    return LoaderTest;
})();

//# sourceMappingURL=data:application/json;base64,