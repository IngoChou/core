var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var AssetEvent = require("awayjs-core/lib/events/AssetEvent");
var ParserEvent = require("awayjs-core/lib/events/ParserEvent");
var Loader = require("awayjs-core/lib/library/Loader");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var ParserBase = require("awayjs-core/lib/parsers/ParserBase");
var ParserDataFormat = require("awayjs-core/lib/parsers/ParserDataFormat");
var LoaderTest = (function () {
    function LoaderTest() {
        var _this = this;
        //---------------------------------------------------------------------------------------------------------------------
        // Enable Custom Parser ( JSON file format with multiple texture dependencies )
        Loader.enableParser(JSONTextureParser);
        //---------------------------------------------------------------------------------------------------------------------
        // LOAD A SINGLE IMAGE
        this.alImage = new Loader();
        this.alImage.addEventListener(AssetEvent.ASSET_COMPLETE, function (event) { return _this.onAssetComplete(event); });
        this.alImage.addEventListener(AssetEvent.TEXTURE_SIZE_ERROR, function (event) { return _this.onTextureSizeError(event); });
        this.alImage.load(new URLRequest('assets/1024x1024.png'));
        //---------------------------------------------------------------------------------------------------------------------
        // LOAD A SINGLE IMAGE - With wrong dimensions
        this.alErrorImage = new Loader();
        this.alErrorImage.addEventListener(AssetEvent.ASSET_COMPLETE, function (event) { return _this.onAssetComplete(event); });
        this.alErrorImage.addEventListener(AssetEvent.TEXTURE_SIZE_ERROR, function (event) { return _this.onTextureSizeError(event); });
        this.alErrorImage.load(new URLRequest('assets/2.png'));
        //---------------------------------------------------------------------------------------------------------------------
        // LOAD WITH A JSON PARSER
        this.alJson = new Loader();
        this.alJson.addEventListener(AssetEvent.ASSET_COMPLETE, function (event) { return _this.onAssetComplete(event); });
        this.alJson.addEventListener(AssetEvent.TEXTURE_SIZE_ERROR, function (event) { return _this.onTextureSizeError(event); });
        this.alJson.addEventListener(ParserEvent.PARSE_COMPLETE, function (event) { return _this.onParseComplete(event); });
        this.alJson.load(new URLRequest('assets/JSNParserTest.json'));
    }
    LoaderTest.prototype.onParseComplete = function (event) {
        console.log('--------------------------------------------------------------------------------');
        console.log('LoaderTest.onParseComplete', event);
        console.log('--------------------------------------------------------------------------------');
    };
    LoaderTest.prototype.onTextureSizeError = function (event) {
        var assetLoader = event.target;
        console.log('--------------------------------------------------------------------------------');
        console.log('LoaderTest.onTextureSizeError', assetLoader.baseDependency._iLoader.url, event);
        console.log('--------------------------------------------------------------------------------');
    };
    LoaderTest.prototype.onAssetComplete = function (event) {
        var assetLoader = event.target;
        console.log('--------------------------------------------------------------------------------');
        console.log('LoaderTest.onAssetComplete', assetLoader.baseDependency._iLoader.url, event);
        console.log('--------------------------------------------------------------------------------');
    };
    return LoaderTest;
})();
/**
 * ImageParser provides a "parser" for natively supported image types (jpg, png). While it simply loads bytes into
 * a loader object, it wraps it in a BitmapImage2DResource so resource management can happen consistently without
 * exception cases.
 */
var JSONTextureParser = (function (_super) {
    __extends(JSONTextureParser, _super);
    /**
     * Creates a new ImageParser object.
     * @param uri The url or id of the data or file to be parsed.
     * @param extra The holder for extra contextual data that the parser might need.
     */
    function JSONTextureParser() {
        _super.call(this, ParserDataFormat.PLAIN_TEXT);
        this.STATE_PARSE_DATA = 0;
        this.STATE_LOAD_IMAGES = 1;
        this.STATE_COMPLETE = 2;
        this._state = -1;
        this._dependencyCount = 0;
        this._loadedTextures = new Array();
        this._state = this.STATE_PARSE_DATA;
    }
    /**
     * Indicates whether or not a given file extension is supported by the parser.
     * @param extension The file extension of a potential file to be parsed.
     * @return Whether or not the given file type is supported.
     */
    JSONTextureParser.supportsType = function (extension) {
        extension = extension.toLowerCase();
        return extension == "json";
    };
    /**
     * Tests whether a data block can be parsed by the parser.
     * @param data The data block to potentially be parsed.
     * @return Whether or not the given data is supported.
     */
    JSONTextureParser.supportsData = function (data) {
        try {
            var obj = JSON.parse(data);
            if (obj)
                return true;
            return false;
        }
        catch (e) {
            return false;
        }
        return false;
    };
    /**
     * @inheritDoc
     */
    JSONTextureParser.prototype._iResolveDependency = function (resourceDependency) {
        var resource = resourceDependency.assets[0];
        this._pFinalizeAsset(resource, resourceDependency._iLoader.url);
        this._loadedTextures.push(resource);
        //console.log( 'JSONTextureParser._iResolveDependency' , resourceDependency );
        //console.log( 'JSONTextureParser._iResolveDependency resource: ' , resource );
        this._dependencyCount--;
        if (this._dependencyCount == 0)
            this._state = this.STATE_COMPLETE;
    };
    /**
     * @inheritDoc
     */
    JSONTextureParser.prototype._iResolveDependencyFailure = function (resourceDependency) {
        this._dependencyCount--;
        if (this._dependencyCount == 0)
            this._state = this.STATE_COMPLETE;
    };
    JSONTextureParser.prototype.parseJson = function () {
        if (JSONTextureParser.supportsData(this.data)) {
            try {
                var json = JSON.parse(this.data);
                var data = json.data;
                var rec;
                var rq;
                for (var c = 0; c < data.length; c++) {
                    rec = data[c];
                    var uri = rec.image;
                    var id = rec.id;
                    rq = new URLRequest(uri);
                    this._pAddDependency('JSON_ID_' + id, rq, false, null, true);
                }
                this._dependencyCount = data.length;
                this._state = this.STATE_LOAD_IMAGES;
                this._pPauseAndRetrieveDependencies();
            }
            catch (e) {
                this._state = this.STATE_COMPLETE;
            }
        }
    };
    /**
     * @inheritDoc
     */
    JSONTextureParser.prototype._pProceedParsing = function () {
        console.log('JSONTextureParser._pProceedParsing', this._state);
        switch (this._state) {
            case this.STATE_PARSE_DATA:
                this.parseJson();
                return ParserBase.MORE_TO_PARSE;
                break;
            case this.STATE_LOAD_IMAGES:
                break;
            case this.STATE_COMPLETE:
                return ParserBase.PARSING_DONE;
                break;
        }
        return ParserBase.MORE_TO_PARSE;
    };
    return JSONTextureParser;
})(ParserBase);

//# sourceMappingURL=data:application/json;base64,