var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BitmapImage2D = require("awayjs-core/lib/data/BitmapImage2D");
var AssetEvent = require("awayjs-core/lib/events/AssetEvent");
var LoaderEvent = require("awayjs-core/lib/events/LoaderEvent");
var AssetLibrary = require("awayjs-core/lib/library/AssetLibrary");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var ParserBase = require("awayjs-core/lib/parsers/ParserBase");
var ParserDataFormat = require("awayjs-core/lib/parsers/ParserDataFormat");
var AssetLibraryTest = (function () {
    function AssetLibraryTest() {
        var _this = this;
        this.height = 0;
        var session;
        AssetLibrary.enableParser(JSONTextureParser);
        session = AssetLibrary.getLoaderSession();
        session.addEventListener(LoaderEvent.RESOURCE_COMPLETE, function (event) { return _this.onResourceComplete(event); });
        session.addEventListener(AssetEvent.ASSET_COMPLETE, function (event) { return _this.onAssetComplete(event); });
        session.load(new URLRequest('assets/JSNParserTest.json'));
        session = AssetLibrary.getLoaderSession();
        session.addEventListener(LoaderEvent.RESOURCE_COMPLETE, function (event) { return _this.onResourceComplete(event); });
        session.addEventListener(AssetEvent.ASSET_COMPLETE, function (event) { return _this.onAssetComplete(event); });
        session.load(new URLRequest('assets/1024x1024.png'));
        session = AssetLibrary.getLoaderSession();
        session.addEventListener(LoaderEvent.RESOURCE_COMPLETE, function (event) { return _this.onResourceComplete(event); });
        session.addEventListener(AssetEvent.ASSET_COMPLETE, function (event) { return _this.onAssetComplete(event); });
        session.load(new URLRequest('assets/atlas.xml'));
    }
    AssetLibraryTest.prototype.onAssetComplete = function (event) {
        console.log('------------------------------------------------------------------------------');
        console.log('AssetEvent.ASSET_COMPLETE', event.asset);
        console.log('------------------------------------------------------------------------------');
        if (event.asset.isAsset(BitmapImage2D)) {
            var bitmapData = event.asset;
            document.body.appendChild(bitmapData.getCanvas());
            bitmapData.getCanvas().style.position = 'absolute';
            bitmapData.getCanvas().style.top = this.height + 'px';
            this.height += (bitmapData.getCanvas().height + 10);
        }
    };
    AssetLibraryTest.prototype.onResourceComplete = function (event) {
        var loader = event.target;
        console.log('------------------------------------------------------------------------------');
        console.log('LoaderEvent.RESOURCE_COMPLETE', event);
        console.log('------------------------------------------------------------------------------');
    };
    return AssetLibraryTest;
})();
/**
* ImageParser provides a "parser" for natively supported image types (jpg, png). While it simply loads bytes into
* a loader object, it wraps it in a BitmapImage2DResource so resource management can happen consistently without
* exception cases.
*/
var JSONTextureParser = (function (_super) {
    __extends(JSONTextureParser, _super);
    /**
     * Creates a new ImageParser object.
     * @param uri The url or id of the data or file to be parsed.
     * @param extra The holder for extra contextual data that the parser might need.
     */
    function JSONTextureParser() {
        _super.call(this, ParserDataFormat.PLAIN_TEXT);
        this.STATE_PARSE_DATA = 0;
        this.STATE_LOAD_IMAGES = 1;
        this.STATE_COMPLETE = 2;
        this._state = -1;
        this._dependencyCount = 0;
        this._loadedTextures = new Array();
        this._state = this.STATE_PARSE_DATA;
    }
    /**
     * Indicates whether or not a given file extension is supported by the parser.
     * @param extension The file extension of a potential file to be parsed.
     * @return Whether or not the given file type is supported.
     */
    JSONTextureParser.supportsType = function (extension) {
        extension = extension.toLowerCase();
        return extension == "json";
    };
    /**
     * Tests whether a data block can be parsed by the parser.
     * @param data The data block to potentially be parsed.
     * @return Whether or not the given data is supported.
     */
    JSONTextureParser.supportsData = function (data) {
        try {
            var obj = JSON.parse(data);
            if (obj)
                return true;
            return false;
        }
        catch (e) {
            return false;
        }
        return false;
    };
    /**
     * @inheritDoc
     */
    JSONTextureParser.prototype._iResolveDependency = function (resourceDependency) {
        var resource = resourceDependency.assets[0];
        this._pFinalizeAsset(resource, resourceDependency._iLoader.url);
        this._loadedTextures.push(resource);
        //console.log( 'JSONTextureParser._iResolveDependency' , resourceDependency );
        //console.log( 'JSONTextureParser._iResolveDependency resource: ' , resource );
        this._dependencyCount--;
        if (this._dependencyCount == 0)
            this._state = this.STATE_COMPLETE;
    };
    /**
     * @inheritDoc
     */
    JSONTextureParser.prototype._iResolveDependencyFailure = function (resourceDependency) {
        this._dependencyCount--;
        if (this._dependencyCount == 0)
            this._state = this.STATE_COMPLETE;
    };
    JSONTextureParser.prototype.parseJson = function () {
        if (JSONTextureParser.supportsData(this.data)) {
            try {
                var json = JSON.parse(this.data);
                var data = json.data;
                var rec;
                var rq;
                for (var c = 0; c < data.length; c++) {
                    rec = data[c];
                    var uri = rec.image;
                    var id = rec.id;
                    rq = new URLRequest(uri);
                    this._pAddDependency('JSON_ID_' + id, rq, false, null, true);
                }
                this._dependencyCount = data.length;
                this._state = this.STATE_LOAD_IMAGES;
                this._pPauseAndRetrieveDependencies();
            }
            catch (e) {
                this._state = this.STATE_COMPLETE;
            }
        }
    };
    /**
     * @inheritDoc
     */
    JSONTextureParser.prototype._pProceedParsing = function () {
        console.log('JSONTextureParser._pProceedParsing', this._state);
        switch (this._state) {
            case this.STATE_PARSE_DATA:
                this.parseJson();
                return ParserBase.MORE_TO_PARSE;
                break;
            case this.STATE_LOAD_IMAGES:
                break;
            case this.STATE_COMPLETE:
                return ParserBase.PARSING_DONE;
                break;
        }
        return ParserBase.MORE_TO_PARSE;
    };
    return JSONTextureParser;
})(ParserBase);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnJhcnkvQXNzZXRMaWJyYXJ5VGVzdC50cyJdLCJuYW1lcyI6WyJBc3NldExpYnJhcnlUZXN0IiwiQXNzZXRMaWJyYXJ5VGVzdC5jb25zdHJ1Y3RvciIsIkFzc2V0TGlicmFyeVRlc3Qub25Bc3NldENvbXBsZXRlIiwiQXNzZXRMaWJyYXJ5VGVzdC5vblJlc291cmNlQ29tcGxldGUiLCJKU09OVGV4dHVyZVBhcnNlciIsIkpTT05UZXh0dXJlUGFyc2VyLmNvbnN0cnVjdG9yIiwiSlNPTlRleHR1cmVQYXJzZXIuc3VwcG9ydHNUeXBlIiwiSlNPTlRleHR1cmVQYXJzZXIuc3VwcG9ydHNEYXRhIiwiSlNPTlRleHR1cmVQYXJzZXIuX2lSZXNvbHZlRGVwZW5kZW5jeSIsIkpTT05UZXh0dXJlUGFyc2VyLl9pUmVzb2x2ZURlcGVuZGVuY3lGYWlsdXJlIiwiSlNPTlRleHR1cmVQYXJzZXIucGFyc2VKc29uIiwiSlNPTlRleHR1cmVQYXJzZXIuX3BQcm9jZWVkUGFyc2luZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTyxhQUFhLFdBQVksb0NBQW9DLENBQUMsQ0FBQztBQUN0RSxJQUFPLFVBQVUsV0FBYSxtQ0FBbUMsQ0FBQyxDQUFDO0FBQ25FLElBQU8sV0FBVyxXQUFhLG9DQUFvQyxDQUFDLENBQUM7QUFFckUsSUFBTyxZQUFZLFdBQWEsc0NBQXNDLENBQUMsQ0FBQztBQUd4RSxJQUFPLFVBQVUsV0FBYSxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ2hFLElBQU8sVUFBVSxXQUFhLG9DQUFvQyxDQUFDLENBQUM7QUFDcEUsSUFBTyxnQkFBZ0IsV0FBWSwwQ0FBMEMsQ0FBQyxDQUFDO0FBRy9FLElBQU0sZ0JBQWdCO0lBS3JCQSxTQUxLQSxnQkFBZ0JBO1FBQXRCQyxpQkF5RENBO1FBdERRQSxXQUFNQSxHQUFZQSxDQUFDQSxDQUFDQTtRQUkzQkEsSUFBSUEsT0FBcUJBLENBQUNBO1FBRTFCQSxZQUFZQSxDQUFDQSxZQUFZQSxDQUFDQSxpQkFBaUJBLENBQUNB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QSxDQUFDQSxjQUFjQTtnQkFDdkJBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBLFlBQVlBLENBQUNBO2dCQUMvQkEsS0FBS0EsQ0FBQ0E7UUFDUkEsQ0FBQ0E7UUFFREEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsYUFBYUEsQ0FBQ0E7SUFDakNBLENBQUNBO0lBQ0ZQLHdCQUFDQTtBQUFEQSxDQTdJQSxBQTZJQ0EsRUE3SStCLFVBQVUsRUE2SXpDIiwiZmlsZSI6ImxpYnJhcnkvQXNzZXRMaWJyYXJ5VGVzdC5qcyIsInNvdXJjZVJvb3QiOiIuL3Rlc3RzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJpdG1hcEltYWdlMkRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2RhdGEvQml0bWFwSW1hZ2UyRFwiKTtcbmltcG9ydCBBc3NldEV2ZW50XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2V2ZW50cy9Bc3NldEV2ZW50XCIpO1xuaW1wb3J0IExvYWRlckV2ZW50XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2V2ZW50cy9Mb2FkZXJFdmVudFwiKTtcbmltcG9ydCBQYXJzZXJFdmVudFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9ldmVudHMvUGFyc2VyRXZlbnRcIik7XG5pbXBvcnQgQXNzZXRMaWJyYXJ5XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2xpYnJhcnkvQXNzZXRMaWJyYXJ5XCIpO1xuaW1wb3J0IExvYWRlclNlc3Npb25cdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbGlicmFyeS9Mb2FkZXJTZXNzaW9uXCIpO1xuaW1wb3J0IElBc3NldFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2xpYnJhcnkvSUFzc2V0XCIpO1xuaW1wb3J0IFVSTFJlcXVlc3RcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbmV0L1VSTFJlcXVlc3RcIik7XG5pbXBvcnQgUGFyc2VyQmFzZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9wYXJzZXJzL1BhcnNlckJhc2VcIik7XG5pbXBvcnQgUGFyc2VyRGF0YUZvcm1hdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvcGFyc2Vycy9QYXJzZXJEYXRhRm9ybWF0XCIpO1xuaW1wb3J0IFJlc291cmNlRGVwZW5kZW5jeVx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3BhcnNlcnMvUmVzb3VyY2VEZXBlbmRlbmN5XCIpO1xuXG5jbGFzcyBBc3NldExpYnJhcnlUZXN0XG57XG5cblx0cHJpdmF0ZSBoZWlnaHQgOiBudW1iZXIgPSAwO1xuXHRcblx0Y29uc3RydWN0b3IoKVxuXHR7XG5cdFx0dmFyIHNlc3Npb246TG9hZGVyU2Vzc2lvbjtcblx0XHRcblx0XHRBc3NldExpYnJhcnkuZW5hYmxlUGFyc2VyKEpTT05UZXh0dXJlUGFyc2VyKTtcblxuXHRcdHNlc3Npb24gPSBBc3NldExpYnJhcnkuZ2V0TG9hZGVyU2Vzc2lvbigpO1xuXHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggTG9hZGVyRXZlbnQuUkVTT1VSQ0VfQ09NUExFVEUgLCAoZXZlbnQ6TG9hZGVyRXZlbnQpID0+IHRoaXMub25SZXNvdXJjZUNvbXBsZXRlKGV2ZW50KSApO1xuXHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lcihBc3NldEV2ZW50LkFTU0VUX0NPTVBMRVRFICwgKGV2ZW50OkFzc2V0RXZlbnQpID0+IHRoaXMub25Bc3NldENvbXBsZXRlKGV2ZW50KSApO1xuXHRcdHNlc3Npb24ubG9hZChuZXcgVVJMUmVxdWVzdCgnYXNzZXRzL0pTTlBhcnNlclRlc3QuanNvbicpICk7XG5cblx0XHRzZXNzaW9uID0gQXNzZXRMaWJyYXJ5LmdldExvYWRlclNlc3Npb24oKTtcblx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoIExvYWRlckV2ZW50LlJFU09VUkNFX0NPTVBMRVRFICwgKGV2ZW50OkxvYWRlckV2ZW50KSA9PiB0aGlzLm9uUmVzb3VyY2VDb21wbGV0ZShldmVudCkgKTtcblx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoQXNzZXRFdmVudC5BU1NFVF9DT01QTEVURSAsIChldmVudDpBc3NldEV2ZW50KSA9PiB0aGlzLm9uQXNzZXRDb21wbGV0ZShldmVudCkgKTtcblx0XHRzZXNzaW9uLmxvYWQobmV3IFVSTFJlcXVlc3QoJ2Fzc2V0cy8xMDI0eDEwMjQucG5nJykgKTtcblxuXHRcdHNlc3Npb24gPSBBc3NldExpYnJhcnkuZ2V0TG9hZGVyU2Vzc2lvbigpO1xuXHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggTG9hZGVyRXZlbnQuUkVTT1VSQ0VfQ09NUExFVEUgLCAoZXZlbnQ6TG9hZGVyRXZlbnQpID0+IHRoaXMub25SZXNvdXJjZUNvbXBsZXRlKGV2ZW50KSApO1xuXHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lcihBc3NldEV2ZW50LkFTU0VUX0NPTVBMRVRFICwgKGV2ZW50OkFzc2V0RXZlbnQpID0+IHRoaXMub25Bc3NldENvbXBsZXRlKGV2ZW50KSApO1xuXHRcdHNlc3Npb24ubG9hZChuZXcgVVJMUmVxdWVzdCgnYXNzZXRzL2F0bGFzLnhtbCcpICk7XG5cdH1cblxuXHRwdWJsaWMgb25Bc3NldENvbXBsZXRlKGV2ZW50OkFzc2V0RXZlbnQpXG5cdHtcblxuXHRcdGNvbnNvbGUubG9nKCAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7XG5cdFx0Y29uc29sZS5sb2coICdBc3NldEV2ZW50LkFTU0VUX0NPTVBMRVRFJyAsIGV2ZW50LmFzc2V0KTtcblx0XHRjb25zb2xlLmxvZyggJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xuXG5cdFx0aWYgKGV2ZW50LmFzc2V0LmlzQXNzZXQoQml0bWFwSW1hZ2UyRCkpIHtcblx0XHRcdHZhciBiaXRtYXBEYXRhIDogQml0bWFwSW1hZ2UyRCA9IDxCaXRtYXBJbWFnZTJEPiBldmVudC5hc3NldDtcblxuXHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggYml0bWFwRGF0YS5nZXRDYW52YXMoKSApO1xuXG5cdFx0XHRiaXRtYXBEYXRhLmdldENhbnZhcygpLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0XHRcdGJpdG1hcERhdGEuZ2V0Q2FudmFzKCkuc3R5bGUudG9wID0gdGhpcy5oZWlnaHQgKyAncHgnO1xuXG5cblx0XHRcdHRoaXMuaGVpZ2h0ICs9ICggYml0bWFwRGF0YS5nZXRDYW52YXMoKS5oZWlnaHQgKyAxMCApIDtcblx0XHR9XG5cdH1cblx0cHVibGljIG9uUmVzb3VyY2VDb21wbGV0ZShldmVudDpMb2FkZXJFdmVudClcblx0e1xuXG5cdFx0dmFyIGxvYWRlciA6IExvYWRlclNlc3Npb24gPSA8TG9hZGVyU2Vzc2lvbj4gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Y29uc29sZS5sb2coICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcblx0XHRjb25zb2xlLmxvZyggJ0xvYWRlckV2ZW50LlJFU09VUkNFX0NPTVBMRVRFJyAsIGV2ZW50ICApO1xuXHRcdGNvbnNvbGUubG9nKCAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7XG5cblx0fVxuXG59XG5cbi8qKlxuKiBJbWFnZVBhcnNlciBwcm92aWRlcyBhIFwicGFyc2VyXCIgZm9yIG5hdGl2ZWx5IHN1cHBvcnRlZCBpbWFnZSB0eXBlcyAoanBnLCBwbmcpLiBXaGlsZSBpdCBzaW1wbHkgbG9hZHMgYnl0ZXMgaW50b1xuKiBhIGxvYWRlciBvYmplY3QsIGl0IHdyYXBzIGl0IGluIGEgQml0bWFwSW1hZ2UyRFJlc291cmNlIHNvIHJlc291cmNlIG1hbmFnZW1lbnQgY2FuIGhhcHBlbiBjb25zaXN0ZW50bHkgd2l0aG91dFxuKiBleGNlcHRpb24gY2FzZXMuXG4qL1xuY2xhc3MgSlNPTlRleHR1cmVQYXJzZXIgZXh0ZW5kcyBQYXJzZXJCYXNlXG57XG5cdHByaXZhdGUgU1RBVEVfUEFSU0VfREFUQTpudW1iZXIgPSAwO1xuXHRwcml2YXRlIFNUQVRFX0xPQURfSU1BR0VTOm51bWJlciA9IDE7XG5cdHByaXZhdGUgU1RBVEVfQ09NUExFVEU6bnVtYmVyID0gMjtcblxuXHRwcml2YXRlIF9zdGF0ZTpudW1iZXIgPSAtMTtcblx0cHJpdmF0ZSBfc3RhcnRlZFBhcnNpbmc6Ym9vbGVhbjtcblx0cHJpdmF0ZSBfZG9uZVBhcnNpbmc6Ym9vbGVhbjtcblx0cHJpdmF0ZSBfZGVwZW5kZW5jeUNvdW50Om51bWJlciA9IDA7XG5cdHByaXZhdGUgX2xvYWRlZFRleHR1cmVzOkFycmF5PEJpdG1hcEltYWdlMkQ+O1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IEltYWdlUGFyc2VyIG9iamVjdC5cblx0ICogQHBhcmFtIHVyaSBUaGUgdXJsIG9yIGlkIG9mIHRoZSBkYXRhIG9yIGZpbGUgdG8gYmUgcGFyc2VkLlxuXHQgKiBAcGFyYW0gZXh0cmEgVGhlIGhvbGRlciBmb3IgZXh0cmEgY29udGV4dHVhbCBkYXRhIHRoYXQgdGhlIHBhcnNlciBtaWdodCBuZWVkLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKVxuXHR7XG5cdFx0c3VwZXIoUGFyc2VyRGF0YUZvcm1hdC5QTEFJTl9URVhUKTtcblxuXHRcdHRoaXMuX2xvYWRlZFRleHR1cmVzID0gbmV3IEFycmF5PEJpdG1hcEltYWdlMkQ+KCk7XG5cdFx0dGhpcy5fc3RhdGUgPSB0aGlzLlNUQVRFX1BBUlNFX0RBVEE7XG5cdH1cblxuXHQvKipcblx0ICogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IGEgZ2l2ZW4gZmlsZSBleHRlbnNpb24gaXMgc3VwcG9ydGVkIGJ5IHRoZSBwYXJzZXIuXG5cdCAqIEBwYXJhbSBleHRlbnNpb24gVGhlIGZpbGUgZXh0ZW5zaW9uIG9mIGEgcG90ZW50aWFsIGZpbGUgdG8gYmUgcGFyc2VkLlxuXHQgKiBAcmV0dXJuIFdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBmaWxlIHR5cGUgaXMgc3VwcG9ydGVkLlxuXHQgKi9cblxuXHRwdWJsaWMgc3RhdGljIHN1cHBvcnRzVHlwZShleHRlbnNpb24gOiBzdHJpbmcpIDogYm9vbGVhblxuXHR7XG5cdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIGV4dGVuc2lvbiA9PSBcImpzb25cIjtcblx0fVxuXG5cdC8qKlxuXHQgKiBUZXN0cyB3aGV0aGVyIGEgZGF0YSBibG9jayBjYW4gYmUgcGFyc2VkIGJ5IHRoZSBwYXJzZXIuXG5cdCAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIGJsb2NrIHRvIHBvdGVudGlhbGx5IGJlIHBhcnNlZC5cblx0ICogQHJldHVybiBXaGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gZGF0YSBpcyBzdXBwb3J0ZWQuXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIHN1cHBvcnRzRGF0YShkYXRhIDogYW55KSA6IGJvb2xlYW5cblx0e1xuXHRcdHRyeSB7XG5cdFx0XHR2YXIgb2JqID0gSlNPTi5wYXJzZShkYXRhKTtcblxuXHRcdFx0aWYgKG9iailcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfaVJlc29sdmVEZXBlbmRlbmN5KHJlc291cmNlRGVwZW5kZW5jeTpSZXNvdXJjZURlcGVuZGVuY3kpXG5cdHtcblx0XHR2YXIgcmVzb3VyY2UgOiBCaXRtYXBJbWFnZTJEID0gPEJpdG1hcEltYWdlMkQ+IHJlc291cmNlRGVwZW5kZW5jeS5hc3NldHNbMF07XG5cblx0XHR0aGlzLl9wRmluYWxpemVBc3NldCg8SUFzc2V0PiByZXNvdXJjZSwgcmVzb3VyY2VEZXBlbmRlbmN5Ll9pTG9hZGVyLnVybCk7XG5cblx0XHR0aGlzLl9sb2FkZWRUZXh0dXJlcy5wdXNoKCByZXNvdXJjZSApO1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ0pTT05UZXh0dXJlUGFyc2VyLl9pUmVzb2x2ZURlcGVuZGVuY3knICwgcmVzb3VyY2VEZXBlbmRlbmN5ICk7XG5cdFx0Ly9jb25zb2xlLmxvZyggJ0pTT05UZXh0dXJlUGFyc2VyLl9pUmVzb2x2ZURlcGVuZGVuY3kgcmVzb3VyY2U6ICcgLCByZXNvdXJjZSApO1xuXG5cdFx0dGhpcy5fZGVwZW5kZW5jeUNvdW50LS07XG5cblx0XHRpZiAoIHRoaXMuX2RlcGVuZGVuY3lDb3VudCA9PSAwKVxuXHRcdFx0dGhpcy5fc3RhdGUgPSB0aGlzLlNUQVRFX0NPTVBMRVRFO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgX2lSZXNvbHZlRGVwZW5kZW5jeUZhaWx1cmUocmVzb3VyY2VEZXBlbmRlbmN5OlJlc291cmNlRGVwZW5kZW5jeSlcblx0e1xuXHRcdHRoaXMuX2RlcGVuZGVuY3lDb3VudC0tO1xuXG5cdFx0aWYgKCB0aGlzLl9kZXBlbmRlbmN5Q291bnQgPT0gMClcblx0XHRcdHRoaXMuX3N0YXRlID0gdGhpcy5TVEFURV9DT01QTEVURTtcblx0fVxuXG5cdHByaXZhdGUgcGFyc2VKc29uKCApIDogdm9pZFxuXHR7XG5cdFx0aWYgKEpTT05UZXh0dXJlUGFyc2VyLnN1cHBvcnRzRGF0YSh0aGlzLmRhdGEpKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIganNvbjphbnkgPSBKU09OLnBhcnNlKHRoaXMuZGF0YSk7XG5cdFx0XHRcdHZhciBkYXRhOkFycmF5PGFueT4gPSA8QXJyYXk8YW55Pj4ganNvbi5kYXRhO1xuXG5cdFx0XHRcdHZhciByZWM6YW55O1xuXHRcdFx0XHR2YXIgcnE6VVJMUmVxdWVzdDtcblxuXHRcdFx0XHRmb3IgKHZhciBjIDogbnVtYmVyID0gMDsgYyA8IGRhdGEubGVuZ3RoOyBjICsrKSB7XG5cdFx0XHRcdFx0cmVjID0gZGF0YVtjXTtcblxuXHRcdFx0XHRcdHZhciB1cmk6c3RyaW5nID0gPHN0cmluZz4gcmVjLmltYWdlO1xuXHRcdFx0XHRcdHZhciBpZDpzdHJpbmcgPSA8c3RyaW5nPiByZWMuaWQ7XG5cblx0XHRcdFx0XHRycSA9IG5ldyBVUkxSZXF1ZXN0KHVyaSk7XG5cblx0XHRcdFx0XHR0aGlzLl9wQWRkRGVwZW5kZW5jeSgnSlNPTl9JRF8nICsgaWQsIHJxLCBmYWxzZSwgbnVsbCwgdHJ1ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLl9kZXBlbmRlbmN5Q291bnQgPSBkYXRhLmxlbmd0aDtcblx0XHRcdFx0dGhpcy5fc3RhdGUgPSB0aGlzLlNUQVRFX0xPQURfSU1BR0VTO1xuXG5cdFx0XHRcdHRoaXMuX3BQYXVzZUFuZFJldHJpZXZlRGVwZW5kZW5jaWVzKCk7XG5cblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0dGhpcy5fc3RhdGUgPSB0aGlzLlNUQVRFX0NPTVBMRVRFO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfcFByb2NlZWRQYXJzaW5nKCkgOiBib29sZWFuXG5cdHtcblx0XHRjb25zb2xlLmxvZyggJ0pTT05UZXh0dXJlUGFyc2VyLl9wUHJvY2VlZFBhcnNpbmcnICwgdGhpcy5fc3RhdGUgKTtcblxuXHRcdHN3aXRjaCAodGhpcy5fc3RhdGUpIHtcblx0XHRcdGNhc2UgdGhpcy5TVEFURV9QQVJTRV9EQVRBOlxuXHRcdFx0XHR0aGlzLnBhcnNlSnNvbigpO1xuXHRcdFx0XHRyZXR1cm4gUGFyc2VyQmFzZS5NT1JFX1RPX1BBUlNFO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgdGhpcy5TVEFURV9MT0FEX0lNQUdFUzpcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIHRoaXMuU1RBVEVfQ09NUExFVEU6XG5cdFx0XHRcdHJldHVybiBQYXJzZXJCYXNlLlBBUlNJTkdfRE9ORTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFBhcnNlckJhc2UuTU9SRV9UT19QQVJTRTtcblx0fVxufSJdfQ==