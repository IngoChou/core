var BitmapData = require("awayjs-core/lib/core/base/BitmapData");
var Rectangle = require("awayjs-core/lib/core/geom/Rectangle");
var URLLoader = require("awayjs-core/lib/core/net/URLLoader");
var URLLoaderDataFormat = require("awayjs-core/lib/core/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/core/net/URLRequest");
var Event = require("awayjs-core/lib/events/Event");
var ParserUtils = require("awayjs-core/lib/parsers/ParserUtils");
var BitmapTexture = require("awayjs-core/lib/textures/BitmapTexture");
var Debug = require("awayjs-core/lib/utils/Debug");

var BitmapTextureTest = (function () {
    function BitmapTextureTest() {
        var _this = this;
        //---------------------------------------
        // Load a PNG
        var mipUrlRequest = new URLRequest('assets/1024x1024.png');
        this.mipLoader = new URLLoader();
        this.mipLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.mipLoader.load(mipUrlRequest);
        this.mipLoader.addEventListener(Event.COMPLETE, function (e) {
            return _this.mipImgLoaded(e);
        });
    }
    BitmapTextureTest.prototype.mipImgLoaded = function (e) {
        var _this = this;
        var loader = e.target;
        var image = ParserUtils.blobToImage(loader.data);
        image.onload = function (event) {
            return _this.onImageLoad(event);
        };
    };

    BitmapTextureTest.prototype.onImageLoad = function (event) {
        var image = event.target;

        var rect = new Rectangle(0, 0, image.width, image.height);

        console.log('Event', image);

        this.bitmapData = new BitmapData(image.width, image.height);
        this.bitmapData.drawImage(image, rect, rect);

        this.target = new BitmapTexture(this.bitmapData, true); //new HTMLImageElementTexture( loader.image , false );

        Debug.log('BitmapData', this.bitmapData);
        Debug.log('BitmapTexture', this.target);
    };
    return BitmapTextureTest;
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHR1cmVzL0JpdG1hcFRleHR1cmVUZXN0LnRzIl0sIm5hbWVzIjpbIkJpdG1hcFRleHR1cmVUZXN0IiwiQml0bWFwVGV4dHVyZVRlc3QuY29uc3RydWN0b3IiLCJCaXRtYXBUZXh0dXJlVGVzdC5taXBJbWdMb2FkZWQiLCJCaXRtYXBUZXh0dXJlVGVzdC5vbkltYWdlTG9hZCJdLCJtYXBwaW5ncyI6IkFBQUEsZ0VBQXNFO0FBQ3RFLDhEQUFvRTtBQUNwRSw2REFBbUU7QUFDbkUsaUZBQXFGO0FBQ3JGLCtEQUFxRTtBQUNyRSxtREFBMEQ7QUFDMUQsZ0VBQXNFO0FBQ3RFLHFFQUEwRTtBQUMxRSxrREFBeUQ7O0FBRXpEO0lBT0NBO1FBQUFDLGlCQVlDQTtRQVRBQSx5Q0FBeUNBO1FBQ3pDQSxhQUFhQTtRQUViQSxJQUFJQSxhQUFhQSxHQUFHQSxJQUFJQSxVQUFVQSxDQUFFQSxzQkFBc0JBLENBQUNBO1FBQzNEQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFJQSxJQUFJQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUNqQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsVUFBVUEsR0FBR0EsbUJBQW1CQSxDQUFDQSxJQUFJQTtRQUNwREEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBRUEsYUFBYUEsQ0FBRUE7UUFDcENBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGdCQUFnQkEsQ0FBRUEsS0FBS0EsQ0FBQ0EsUUFBUUEsRUFBR0EsVUFBQ0EsQ0FBQ0E7bUJBQUtBLEtBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO1FBQXBCQSxDQUFvQkEsQ0FBRUE7SUFFaEZBLENBQUNBO0lBRURELDJDQUFBQSxVQUFzQkEsQ0FBQ0E7UUFBdkJFLGlCQU1DQTtRQUhBQSxJQUFJQSxNQUFNQSxHQUFvQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUE7UUFDdERBLElBQUlBLEtBQUtBLEdBQXNCQSxXQUFXQSxDQUFDQSxXQUFXQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNuRUEsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsVUFBRUEsS0FBS0E7bUJBQU1BLEtBQUlBLENBQUNBLFdBQVdBLENBQUVBLEtBQUtBLENBQUVBO1FBQXpCQSxDQUF5QkE7SUFDdERBLENBQUNBOztJQUVERiwwQ0FBQUEsVUFBcUJBLEtBQUtBO1FBRXpCRyxJQUFJQSxLQUFLQSxHQUF5Q0EsS0FBS0EsQ0FBQ0EsTUFBTUE7O1FBRTlEQSxJQUFJQSxJQUFJQSxHQUF3QkEsSUFBSUEsU0FBU0EsQ0FBRUEsQ0FBQ0EsRUFBR0EsQ0FBQ0EsRUFBR0EsS0FBS0EsQ0FBQ0EsS0FBS0EsRUFBR0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBRUE7O1FBRW5GQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFFQSxPQUFPQSxFQUFHQSxLQUFLQSxDQUFFQTs7UUFFOUJBLElBQUlBLENBQUNBLFVBQVVBLEdBQTJCQSxJQUFJQSxVQUFVQSxDQUFFQSxLQUFLQSxDQUFDQSxLQUFLQSxFQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFFQTtRQUN0RkEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsU0FBU0EsQ0FBRUEsS0FBS0EsRUFBR0EsSUFBSUEsRUFBSUEsSUFBSUEsQ0FBRUE7O1FBRWpEQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUErQkEsSUFBSUEsYUFBYUEsQ0FBRUEsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBR0EsSUFBSUEsQ0FBRUEsRUFBQ0Esc0RBQXNEQTs7UUFFNUlBLEtBQUtBLENBQUNBLEdBQUdBLENBQUVBLFlBQVlBLEVBQWFBLElBQUlBLENBQUNBLFVBQVVBLENBQUVBO1FBQ3JEQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFFQSxlQUFlQSxFQUFTQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFFQTtJQUVqREEsQ0FBQ0E7SUFDRkgseUJBQUNBO0FBQURBLENBQUNBLElBQUE7QUFBQSIsImZpbGUiOiJ0ZXh0dXJlcy9CaXRtYXBUZXh0dXJlVGVzdC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1jb3JlLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCaXRtYXBEYXRhXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2NvcmUvYmFzZS9CaXRtYXBEYXRhXCIpO1xuaW1wb3J0IFJlY3RhbmdsZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2dlb20vUmVjdGFuZ2xlXCIpO1xuaW1wb3J0IFVSTExvYWRlclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL25ldC9VUkxMb2FkZXJcIik7XG5pbXBvcnQgVVJMTG9hZGVyRGF0YUZvcm1hdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2NvcmUvbmV0L1VSTExvYWRlckRhdGFGb3JtYXRcIik7XG5pbXBvcnQgVVJMUmVxdWVzdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL25ldC9VUkxSZXF1ZXN0XCIpO1xuaW1wb3J0IEV2ZW50XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZXZlbnRzL0V2ZW50XCIpO1xuaW1wb3J0IFBhcnNlclV0aWxzXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3BhcnNlcnMvUGFyc2VyVXRpbHNcIik7XG5pbXBvcnQgQml0bWFwVGV4dHVyZVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvQml0bWFwVGV4dHVyZVwiKTtcbmltcG9ydCBEZWJ1Z1x0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL0RlYnVnXCIpO1xuXG5jbGFzcyBCaXRtYXBUZXh0dXJlVGVzdFxue1xuXG5cdHByaXZhdGUgbWlwTG9hZGVyICAgICAgIDogVVJMTG9hZGVyO1xuXHRwcml2YXRlIGJpdG1hcERhdGEgICAgICA6IEJpdG1hcERhdGE7XG5cdHByaXZhdGUgdGFyZ2V0ICAgICAgICAgIDogQml0bWFwVGV4dHVyZTtcblxuXHRjb25zdHJ1Y3RvcigpXG5cdHtcblxuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0Ly8gTG9hZCBhIFBOR1xuXG5cdFx0dmFyIG1pcFVybFJlcXVlc3QgPSBuZXcgVVJMUmVxdWVzdCggJ2Fzc2V0cy8xMDI0eDEwMjQucG5nJyk7XG5cdFx0dGhpcy5taXBMb2FkZXIgID0gbmV3IFVSTExvYWRlcigpO1xuXHRcdHRoaXMubWlwTG9hZGVyLmRhdGFGb3JtYXQgPSBVUkxMb2FkZXJEYXRhRm9ybWF0LkJMT0I7XG5cdFx0dGhpcy5taXBMb2FkZXIubG9hZCggbWlwVXJsUmVxdWVzdCApO1xuXHRcdHRoaXMubWlwTG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoIEV2ZW50LkNPTVBMRVRFICwgKGUpID0+IHRoaXMubWlwSW1nTG9hZGVkKGUpICk7XG5cblx0fVxuXG5cdHByaXZhdGUgbWlwSW1nTG9hZGVkKCBlIClcblx0e1xuXG5cdFx0dmFyIGxvYWRlciAgOiBVUkxMb2FkZXIgICAgICAgID0gPFVSTExvYWRlciA+IGUudGFyZ2V0O1xuXHRcdHZhciBpbWFnZSA6IEhUTUxJbWFnZUVsZW1lbnQgPSBQYXJzZXJVdGlscy5ibG9iVG9JbWFnZShsb2FkZXIuZGF0YSk7XG5cdFx0aW1hZ2Uub25sb2FkID0gKCBldmVudCApID0+IHRoaXMub25JbWFnZUxvYWQoIGV2ZW50ICk7XG5cdH1cblxuXHRwcml2YXRlIG9uSW1hZ2VMb2FkIChldmVudClcblx0e1xuXHRcdHZhciBpbWFnZSA6IEhUTUxJbWFnZUVsZW1lbnQgPSA8SFRNTEltYWdlRWxlbWVudD4gZXZlbnQudGFyZ2V0O1xuXG5cdFx0dmFyIHJlY3QgICAgOiBSZWN0YW5nbGUgICAgICAgPSBuZXcgUmVjdGFuZ2xlKCAwICwgMCAsIGltYWdlLndpZHRoICwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRjb25zb2xlLmxvZyggJ0V2ZW50JyAsIGltYWdlICk7XG5cblx0XHR0aGlzLmJpdG1hcERhdGEgICAgICAgICAgICAgICAgICAgICAgICAgPSBuZXcgQml0bWFwRGF0YSggaW1hZ2Uud2lkdGggLCBpbWFnZS5oZWlnaHQgKTtcblx0XHR0aGlzLmJpdG1hcERhdGEuZHJhd0ltYWdlKCBpbWFnZSAsIHJlY3QgLCAgcmVjdCApO1xuXG5cdFx0dGhpcy50YXJnZXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gbmV3IEJpdG1hcFRleHR1cmUoIHRoaXMuYml0bWFwRGF0YSAsIHRydWUgKTsvL25ldyBIVE1MSW1hZ2VFbGVtZW50VGV4dHVyZSggbG9hZGVyLmltYWdlICwgZmFsc2UgKTtcblxuXHRcdERlYnVnLmxvZyggJ0JpdG1hcERhdGEnICAgICAgICAgICAsIHRoaXMuYml0bWFwRGF0YSApO1xuXHRcdERlYnVnLmxvZyggJ0JpdG1hcFRleHR1cmUnICAgICAgICwgdGhpcy50YXJnZXQgKTtcblxuXHR9XG59Il19