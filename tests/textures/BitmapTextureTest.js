var BitmapData = require("awayjs-core/lib/base/BitmapData");
var Rectangle = require("awayjs-core/lib/geom/Rectangle");
var URLLoader = require("awayjs-core/lib/net/URLLoader");
var URLLoaderDataFormat = require("awayjs-core/lib/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var Event = require("awayjs-core/lib/events/Event");
var ParserUtils = require("awayjs-core/lib/parsers/ParserUtils");
var BitmapTexture = require("awayjs-core/lib/textures/BitmapTexture");
var Debug = require("awayjs-core/lib/utils/Debug");
var BitmapTextureTest = (function () {
    function BitmapTextureTest() {
        //---------------------------------------
        // Load a PNG
        var _this = this;
        var mipUrlRequest = new URLRequest('assets/1024x1024.png');
        this.mipLoader = new URLLoader();
        this.mipLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.mipLoader.load(mipUrlRequest);
        this.mipLoader.addEventListener(Event.COMPLETE, function (e) { return _this.mipImgLoaded(e); });
    }
    BitmapTextureTest.prototype.mipImgLoaded = function (e) {
        var _this = this;
        var loader = e.target;
        var image = ParserUtils.blobToImage(loader.data);
        image.onload = function (event) { return _this.onImageLoad(event); };
    };
    BitmapTextureTest.prototype.onImageLoad = function (event) {
        var image = event.target;
        var rect = new Rectangle(0, 0, image.width, image.height);
        console.log('Event', image);
        this.bitmapData = new BitmapData(image.width, image.height);
        this.bitmapData.draw(image);
        this.target = new BitmapTexture(this.bitmapData);
        Debug.log('BitmapData', this.bitmapData);
        Debug.log('BitmapTexture', this.target);
    };
    return BitmapTextureTest;
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHR1cmVzL2JpdG1hcHRleHR1cmV0ZXN0LnRzIl0sIm5hbWVzIjpbIkJpdG1hcFRleHR1cmVUZXN0IiwiQml0bWFwVGV4dHVyZVRlc3QuY29uc3RydWN0b3IiLCJCaXRtYXBUZXh0dXJlVGVzdC5taXBJbWdMb2FkZWQiLCJCaXRtYXBUZXh0dXJlVGVzdC5vbkltYWdlTG9hZCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxVQUFVLFdBQWEsaUNBQWlDLENBQUMsQ0FBQztBQUNqRSxJQUFPLFNBQVMsV0FBYSxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQy9ELElBQU8sU0FBUyxXQUFhLCtCQUErQixDQUFDLENBQUM7QUFDOUQsSUFBTyxtQkFBbUIsV0FBVyx5Q0FBeUMsQ0FBQyxDQUFDO0FBQ2hGLElBQU8sVUFBVSxXQUFhLGdDQUFnQyxDQUFDLENBQUM7QUFDaEUsSUFBTyxLQUFLLFdBQWMsOEJBQThCLENBQUMsQ0FBQztBQUMxRCxJQUFPLFdBQVcsV0FBYSxxQ0FBcUMsQ0FBQyxDQUFDO0FBQ3RFLElBQU8sYUFBYSxXQUFZLHdDQUF3QyxDQUFDLENBQUM7QUFDMUUsSUFBTyxLQUFLLFdBQWMsNkJBQTZCLENBQUMsQ0FBQztBQUV6RCxJQUFNLGlCQUFpQjtJQU90QkEsU0FQS0EsaUJBQWlCQTtRQVVyQkMseUNBQXlDQTtRQUN6Q0EsYUFBYUE7UUFYZkEsaUJBOENDQTtRQWpDQ0EsSUFBSUEsYUFBYUEsR0FBR0EsSUFBSUEsVUFBVUEsQ0FBRUEsc0JBQXNCQSxDQUFDQSxDQUFDQTtRQUM1REEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBSUEsSUFBSUEsU0FBU0EsRUFBRUEsQ0FBQ0E7UUFDbENBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFVBQVVBLEdBQUdBLG1CQUFtQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDckRBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUVBLGFBQWFBLENBQUVBLENBQUNBO1FBQ3JDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxnQkFBZ0JBLENBQUVBLEtBQUtBLENBQUNBLFFBQVFBLEVBQUdBLFVBQUNBLENBQUNBLElBQUtBLE9BQUFBLEtBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBLEVBQXBCQSxDQUFvQkEsQ0FBRUEsQ0FBQ0E7SUFFakZBLENBQUNBO0lBRU9ELHdDQUFZQSxHQUFwQkEsVUFBc0JBLENBQUNBO1FBQXZCRSxpQkFNQ0E7UUFIQUEsSUFBSUEsTUFBTUEsR0FBb0NBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBO1FBQ3ZEQSxJQUFJQSxLQUFLQSxHQUFzQkEsV0FBV0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDcEVBLEtBQUtBLENBQUNBLE1BQU1BLEdBQUdBLFVBQUVBLEtBQUtBLElBQU1BLE9BQUFBLEtBQUlBLENBQUNBLFdBQVdBLENBQUVBLEtBQUtBLENBQUVBLEVBQXpCQSxDQUF5QkEsQ0FBQ0E7SUFDdkRBLENBQUNBO0lBRU9GLHVDQUFXQSxHQUFuQkEsVUFBcUJBLEtBQUtBO1FBRXpCRyxJQUFJQSxLQUFLQSxHQUF5Q0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFFL0RBLElBQUlBLElBQUlBLEdBQXdCQSxJQUFJQSxTQUFTQSxDQUFFQSxDQUFDQSxFQUFHQSxDQUFDQSxFQUFHQSxLQUFLQSxDQUFDQSxLQUFLQSxFQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFFQSxDQUFDQTtRQUVwRkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBRUEsT0FBT0EsRUFBR0EsS0FBS0EsQ0FBRUEsQ0FBQ0E7UUFFL0JBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLElBQUlBLFVBQVVBLENBQUVBLEtBQUtBLENBQUNBLEtBQUtBLEVBQUdBLEtBQUtBLENBQUNBLE1BQU1BLENBQUVBLENBQUNBO1FBQy9EQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUU1QkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsYUFBYUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFFakRBLEtBQUtBLENBQUNBLEdBQUdBLENBQUVBLFlBQVlBLEVBQWFBLElBQUlBLENBQUNBLFVBQVVBLENBQUVBLENBQUNBO1FBQ3REQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFFQSxlQUFlQSxFQUFTQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFFQSxDQUFDQTtJQUVsREEsQ0FBQ0E7SUFDRkgsd0JBQUNBO0FBQURBLENBOUNBLEFBOENDQSxJQUFBIiwiZmlsZSI6InRleHR1cmVzL0JpdG1hcFRleHR1cmVUZXN0LmpzIiwic291cmNlUm9vdCI6Ii4vdGVzdHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQml0bWFwRGF0YVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9iYXNlL0JpdG1hcERhdGFcIik7XG5pbXBvcnQgUmVjdGFuZ2xlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vUmVjdGFuZ2xlXCIpO1xuaW1wb3J0IFVSTExvYWRlclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9uZXQvVVJMTG9hZGVyXCIpO1xuaW1wb3J0IFVSTExvYWRlckRhdGFGb3JtYXRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9uZXQvVVJMTG9hZGVyRGF0YUZvcm1hdFwiKTtcbmltcG9ydCBVUkxSZXF1ZXN0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL25ldC9VUkxSZXF1ZXN0XCIpO1xuaW1wb3J0IEV2ZW50XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZXZlbnRzL0V2ZW50XCIpO1xuaW1wb3J0IFBhcnNlclV0aWxzXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3BhcnNlcnMvUGFyc2VyVXRpbHNcIik7XG5pbXBvcnQgQml0bWFwVGV4dHVyZVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvQml0bWFwVGV4dHVyZVwiKTtcbmltcG9ydCBEZWJ1Z1x0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL0RlYnVnXCIpO1xuXG5jbGFzcyBCaXRtYXBUZXh0dXJlVGVzdFxue1xuXG5cdHByaXZhdGUgbWlwTG9hZGVyICAgICAgIDogVVJMTG9hZGVyO1xuXHRwcml2YXRlIGJpdG1hcERhdGEgICAgICA6IEJpdG1hcERhdGE7XG5cdHByaXZhdGUgdGFyZ2V0ICAgICAgICAgIDogQml0bWFwVGV4dHVyZTtcblxuXHRjb25zdHJ1Y3RvcigpXG5cdHtcblxuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0Ly8gTG9hZCBhIFBOR1xuXG5cdFx0dmFyIG1pcFVybFJlcXVlc3QgPSBuZXcgVVJMUmVxdWVzdCggJ2Fzc2V0cy8xMDI0eDEwMjQucG5nJyk7XG5cdFx0dGhpcy5taXBMb2FkZXIgID0gbmV3IFVSTExvYWRlcigpO1xuXHRcdHRoaXMubWlwTG9hZGVyLmRhdGFGb3JtYXQgPSBVUkxMb2FkZXJEYXRhRm9ybWF0LkJMT0I7XG5cdFx0dGhpcy5taXBMb2FkZXIubG9hZCggbWlwVXJsUmVxdWVzdCApO1xuXHRcdHRoaXMubWlwTG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoIEV2ZW50LkNPTVBMRVRFICwgKGUpID0+IHRoaXMubWlwSW1nTG9hZGVkKGUpICk7XG5cblx0fVxuXG5cdHByaXZhdGUgbWlwSW1nTG9hZGVkKCBlIClcblx0e1xuXG5cdFx0dmFyIGxvYWRlciAgOiBVUkxMb2FkZXIgICAgICAgID0gPFVSTExvYWRlciA+IGUudGFyZ2V0O1xuXHRcdHZhciBpbWFnZSA6IEhUTUxJbWFnZUVsZW1lbnQgPSBQYXJzZXJVdGlscy5ibG9iVG9JbWFnZShsb2FkZXIuZGF0YSk7XG5cdFx0aW1hZ2Uub25sb2FkID0gKCBldmVudCApID0+IHRoaXMub25JbWFnZUxvYWQoIGV2ZW50ICk7XG5cdH1cblxuXHRwcml2YXRlIG9uSW1hZ2VMb2FkIChldmVudClcblx0e1xuXHRcdHZhciBpbWFnZSA6IEhUTUxJbWFnZUVsZW1lbnQgPSA8SFRNTEltYWdlRWxlbWVudD4gZXZlbnQudGFyZ2V0O1xuXG5cdFx0dmFyIHJlY3QgICAgOiBSZWN0YW5nbGUgICAgICAgPSBuZXcgUmVjdGFuZ2xlKCAwICwgMCAsIGltYWdlLndpZHRoICwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRjb25zb2xlLmxvZyggJ0V2ZW50JyAsIGltYWdlICk7XG5cblx0XHR0aGlzLmJpdG1hcERhdGEgPSBuZXcgQml0bWFwRGF0YSggaW1hZ2Uud2lkdGggLCBpbWFnZS5oZWlnaHQgKTtcblx0XHR0aGlzLmJpdG1hcERhdGEuZHJhdyhpbWFnZSk7XG5cblx0XHR0aGlzLnRhcmdldCA9IG5ldyBCaXRtYXBUZXh0dXJlKHRoaXMuYml0bWFwRGF0YSk7XG5cblx0XHREZWJ1Zy5sb2coICdCaXRtYXBEYXRhJyAgICAgICAgICAgLCB0aGlzLmJpdG1hcERhdGEgKTtcblx0XHREZWJ1Zy5sb2coICdCaXRtYXBUZXh0dXJlJyAgICAgICAsIHRoaXMudGFyZ2V0ICk7XG5cblx0fVxufSJdfQ==