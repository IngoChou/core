var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var MipmapGenerator = require("awayjs-core/lib/textures/MipmapGenerator");
var TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
var CubeTextureBase = (function (_super) {
    __extends(CubeTextureBase, _super);
    function CubeTextureBase() {
        _super.call(this);
        this._mipmapDataArray = new Array(6);
        this._mipmapDataDirtyArray = new Array(6);
    }
    /**
     *
     * @param width
     * @param height
     * @private
     */
    CubeTextureBase.prototype._pSetSize = function (size) {
        if (this._pSize != size)
            this.invalidateSize();
        for (var i = 0; i < 6; i++)
            this._mipmapDataDirtyArray[i] = true;
        this._pSize = size;
    };
    /**
     * @inheritDoc
     */
    CubeTextureBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        for (var i = 0; i < 6; i++) {
            var mipmapData = this._mipmapDataArray[i];
            var len = mipmapData.length;
            for (var j = 0; j < len; j++)
                MipmapGenerator.freeMipMapHolder(mipmapData[j]);
        }
    };
    /**
     *
     */
    CubeTextureBase.prototype.invalidateContent = function () {
        _super.prototype.invalidateContent.call(this);
        for (var i = 0; i < 6; i++)
            this._mipmapDataDirtyArray[i] = true;
    };
    CubeTextureBase.prototype._iGetMipmapData = function (side) {
        if (this._mipmapDataDirtyArray[side]) {
            this._mipmapDataDirtyArray[side] = false;
            var mipmapData = this._mipmapDataArray[side] || (this._mipmapDataArray[side] = new Array());
            MipmapGenerator.generateMipMaps(this._iGetTextureData(side), mipmapData, true);
        }
        return this._mipmapDataArray[side];
    };
    CubeTextureBase.prototype._iGetTextureData = function (side) {
        throw new AbstractMethodError();
    };
    return CubeTextureBase;
})(TextureProxyBase);
module.exports = CubeTextureBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9jdWJldGV4dHVyZWJhc2UudHMiXSwibmFtZXMiOlsiQ3ViZVRleHR1cmVCYXNlIiwiQ3ViZVRleHR1cmVCYXNlLmNvbnN0cnVjdG9yIiwiQ3ViZVRleHR1cmVCYXNlLl9wU2V0U2l6ZSIsIkN1YmVUZXh0dXJlQmFzZS5kaXNwb3NlIiwiQ3ViZVRleHR1cmVCYXNlLmludmFsaWRhdGVDb250ZW50IiwiQ3ViZVRleHR1cmVCYXNlLl9pR2V0TWlwbWFwRGF0YSIsIkN1YmVUZXh0dXJlQmFzZS5faUdldFRleHR1cmVEYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFPLG1CQUFtQixXQUFZLDRDQUE0QyxDQUFDLENBQUM7QUFDcEYsSUFBTyxlQUFlLFdBQWEsMENBQTBDLENBQUMsQ0FBQztBQUMvRSxJQUFPLGdCQUFnQixXQUFhLDJDQUEyQyxDQUFDLENBQUM7QUFFakYsSUFBTSxlQUFlO0lBQVNBLFVBQXhCQSxlQUFlQSxVQUF5QkE7SUFLN0NBLFNBTEtBLGVBQWVBO1FBT25CQyxpQkFBT0EsQ0FBQ0E7UUFMRkEscUJBQWdCQSxHQUE0QkEsSUFBSUEsS0FBS0EsQ0FBb0JBLENBQUNBLENBQUNBLENBQUNBO1FBQzVFQSwwQkFBcUJBLEdBQWtCQSxJQUFJQSxLQUFLQSxDQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUtwRUEsQ0FBQ0E7SUFFREQ7Ozs7O09BS0dBO0lBQ0lBLG1DQUFTQSxHQUFoQkEsVUFBaUJBLElBQVdBO1FBRTNCRSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxJQUFJQSxJQUFJQSxDQUFDQTtZQUN2QkEsSUFBSUEsQ0FBQ0EsY0FBY0EsRUFBRUEsQ0FBQ0E7UUFFdkJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBO1lBQ2hDQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO1FBRXRDQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUNwQkEsQ0FBQ0E7SUFFREY7O09BRUdBO0lBQ0lBLGlDQUFPQSxHQUFkQTtRQUVDRyxnQkFBS0EsQ0FBQ0EsT0FBT0EsV0FBRUEsQ0FBQ0E7UUFFaEJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQ25DQSxJQUFJQSxVQUFVQSxHQUFxQkEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM1REEsSUFBSUEsR0FBR0EsR0FBVUEsVUFBVUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFDbkNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBLEVBQUVBO2dCQUNsQ0EsZUFBZUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNsREEsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFFREg7O09BRUdBO0lBQ0lBLDJDQUFpQkEsR0FBeEJBO1FBRUNJLGdCQUFLQSxDQUFDQSxpQkFBaUJBLFdBQUVBLENBQUNBO1FBRTFCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFVQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQTtZQUNoQ0EsSUFBSUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUN2Q0EsQ0FBQ0E7SUFFTUoseUNBQWVBLEdBQXRCQSxVQUF1QkEsSUFBV0E7UUFFakNLLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdENBLElBQUlBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFFekNBLElBQUlBLFVBQVVBLEdBQXFCQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsS0FBS0EsRUFBY0EsQ0FBQ0EsQ0FBQ0E7WUFDMUhBLGVBQWVBLENBQUNBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsVUFBVUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDaEZBLENBQUNBO1FBRURBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDcENBLENBQUNBO0lBRU1MLDBDQUFnQkEsR0FBdkJBLFVBQXdCQSxJQUFXQTtRQUVsQ00sTUFBTUEsSUFBSUEsbUJBQW1CQSxFQUFFQSxDQUFDQTtJQUNqQ0EsQ0FBQ0E7SUFDRk4sc0JBQUNBO0FBQURBLENBckVBLEFBcUVDQSxFQXJFNkIsZ0JBQWdCLEVBcUU3QztBQUVELEFBQXlCLGlCQUFoQixlQUFlLENBQUMiLCJmaWxlIjoidGV4dHVyZXMvQ3ViZVRleHR1cmVCYXNlLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCaXRtYXBEYXRhXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvYmFzZS9CaXRtYXBEYXRhXCIpO1xuaW1wb3J0IEFic3RyYWN0TWV0aG9kRXJyb3JcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2Vycm9ycy9BYnN0cmFjdE1ldGhvZEVycm9yXCIpO1xuaW1wb3J0IE1pcG1hcEdlbmVyYXRvclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9NaXBtYXBHZW5lcmF0b3JcIik7XG5pbXBvcnQgVGV4dHVyZVByb3h5QmFzZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9UZXh0dXJlUHJveHlCYXNlXCIpO1xuXG5jbGFzcyBDdWJlVGV4dHVyZUJhc2UgZXh0ZW5kcyBUZXh0dXJlUHJveHlCYXNlXG57XG5cdHB1YmxpYyBfbWlwbWFwRGF0YUFycmF5OkFycmF5PEFycmF5PEJpdG1hcERhdGE+PiA9IG5ldyBBcnJheTxBcnJheTxCaXRtYXBEYXRhPj4oNik7XG5cdHB1YmxpYyBfbWlwbWFwRGF0YURpcnR5QXJyYXk6QXJyYXk8Ym9vbGVhbj4gPSBuZXcgQXJyYXk8Ym9vbGVhbj4oNik7XG5cblx0Y29uc3RydWN0b3IoKVxuXHR7XG5cdFx0c3VwZXIoKTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gd2lkdGhcblx0ICogQHBhcmFtIGhlaWdodFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHVibGljIF9wU2V0U2l6ZShzaXplOm51bWJlcilcblx0e1xuXHRcdGlmICh0aGlzLl9wU2l6ZSAhPSBzaXplKVxuXHRcdFx0dGhpcy5pbnZhbGlkYXRlU2l6ZSgpO1xuXG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgPSAwOyBpIDwgNjsgaSsrKVxuXHRcdFx0dGhpcy5fbWlwbWFwRGF0YURpcnR5QXJyYXlbaV0gPSB0cnVlO1xuXG5cdFx0dGhpcy5fcFNpemUgPSBzaXplO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgZGlzcG9zZSgpXG5cdHtcblx0XHRzdXBlci5kaXNwb3NlKCk7XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCA2OyBpKyspIHtcblx0XHRcdHZhciBtaXBtYXBEYXRhOkFycmF5PEJpdG1hcERhdGE+ID0gdGhpcy5fbWlwbWFwRGF0YUFycmF5W2ldO1xuXHRcdFx0dmFyIGxlbjpudW1iZXIgPSBtaXBtYXBEYXRhLmxlbmd0aDtcblx0XHRcdGZvciAodmFyIGo6bnVtYmVyID0gMDsgaiA8IGxlbjsgaisrKVxuXHRcdFx0XHRNaXBtYXBHZW5lcmF0b3IuZnJlZU1pcE1hcEhvbGRlcihtaXBtYXBEYXRhW2pdKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBpbnZhbGlkYXRlQ29udGVudCgpOnZvaWRcblx0e1xuXHRcdHN1cGVyLmludmFsaWRhdGVDb250ZW50KCk7XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCA2OyBpKyspXG5cdFx0XHR0aGlzLl9taXBtYXBEYXRhRGlydHlBcnJheVtpXSA9IHRydWU7XG5cdH1cblxuXHRwdWJsaWMgX2lHZXRNaXBtYXBEYXRhKHNpZGU6bnVtYmVyKTpBcnJheTxCaXRtYXBEYXRhPlxuXHR7XG5cdFx0aWYgKHRoaXMuX21pcG1hcERhdGFEaXJ0eUFycmF5W3NpZGVdKSB7XG5cdFx0XHR0aGlzLl9taXBtYXBEYXRhRGlydHlBcnJheVtzaWRlXSA9IGZhbHNlO1xuXG5cdFx0XHR2YXIgbWlwbWFwRGF0YTpBcnJheTxCaXRtYXBEYXRhPiA9IHRoaXMuX21pcG1hcERhdGFBcnJheVtzaWRlXSB8fCAodGhpcy5fbWlwbWFwRGF0YUFycmF5W3NpZGVdID0gbmV3IEFycmF5PEJpdG1hcERhdGE+KCkpO1xuXHRcdFx0TWlwbWFwR2VuZXJhdG9yLmdlbmVyYXRlTWlwTWFwcyh0aGlzLl9pR2V0VGV4dHVyZURhdGEoc2lkZSksIG1pcG1hcERhdGEsIHRydWUpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl9taXBtYXBEYXRhQXJyYXlbc2lkZV07XG5cdH1cblxuXHRwdWJsaWMgX2lHZXRUZXh0dXJlRGF0YShzaWRlOm51bWJlcik6YW55XG5cdHtcblx0XHR0aHJvdyBuZXcgQWJzdHJhY3RNZXRob2RFcnJvcigpO1xuXHR9XG59XG5cbmV4cG9ydCA9IEN1YmVUZXh0dXJlQmFzZTsiXX0=