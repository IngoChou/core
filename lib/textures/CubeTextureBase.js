var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var MipmapGenerator = require("awayjs-core/lib/textures/MipmapGenerator");
var TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");

var CubeTextureBase = (function (_super) {
    __extends(CubeTextureBase, _super);
    function CubeTextureBase(generateMipmaps) {
        if (typeof generateMipmaps === "undefined") { generateMipmaps = false; }
        _super.call(this, generateMipmaps);
        this._mipmapDataArray = new Array(6);
        this._mipmapDataDirtyArray = new Array(6);
    }
    /**
    *
    * @param width
    * @param height
    * @private
    */
    CubeTextureBase.prototype._pSetSize = function (size) {
        if (this._pSize != size)
            this.invalidateSize();

        for (var i = 0; i < 6; i++)
            this._mipmapDataDirtyArray[i] = true;

        this._pSize = size;
    };

    /**
    * @inheritDoc
    */
    CubeTextureBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);

        for (var i = 0; i < 6; i++) {
            var mipmapData = this._mipmapDataArray[i];
            var len = mipmapData.length;
            for (var j = 0; j < len; j++)
                MipmapGenerator.freeMipMapHolder(mipmapData[j]);
        }
    };

    /**
    *
    */
    CubeTextureBase.prototype.invalidateContent = function () {
        _super.prototype.invalidateContent.call(this);

        for (var i = 0; i < 6; i++)
            this._mipmapDataDirtyArray[i] = true;
    };

    CubeTextureBase.prototype._iGetMipmapData = function (side) {
        if (this._mipmapDataDirtyArray[side]) {
            this._mipmapDataDirtyArray[side] = false;

            var mipmapData = this._mipmapDataArray[side] || (this._mipmapDataArray[side] = new Array());
            MipmapGenerator.generateMipMaps(this._iGetTextureData(side), mipmapData, true);
        }

        return this._mipmapDataArray[side];
    };

    CubeTextureBase.prototype._iGetTextureData = function (side) {
        throw new AbstractMethodError();
    };
    return CubeTextureBase;
})(TextureProxyBase);

module.exports = CubeTextureBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHR1cmVzL0N1YmVUZXh0dXJlQmFzZS50cyJdLCJuYW1lcyI6WyJDdWJlVGV4dHVyZUJhc2UiLCJDdWJlVGV4dHVyZUJhc2UuY29uc3RydWN0b3IiLCJDdWJlVGV4dHVyZUJhc2UuX3BTZXRTaXplIiwiQ3ViZVRleHR1cmVCYXNlLmRpc3Bvc2UiLCJDdWJlVGV4dHVyZUJhc2UuaW52YWxpZGF0ZUNvbnRlbnQiLCJDdWJlVGV4dHVyZUJhc2UuX2lHZXRNaXBtYXBEYXRhIiwiQ3ViZVRleHR1cmVCYXNlLl9pR2V0VGV4dHVyZURhdGEiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLCtFQUNvRjtBQUNwRix5RUFBK0U7QUFDL0UsMkVBQWlGOztBQUVqRjtJQUE4QkEsa0NBQWdCQTtJQUs3Q0EseUJBQVlBLGVBQStCQTtRQUEvQkMsOENBQUFBLGVBQWVBLEdBQVdBLEtBQUtBO0FBQUFBLFFBRTFDQSxXQUFNQSxPQUFBQSxlQUFlQSxDQUFDQTtRQUx2QkEsS0FBT0EsZ0JBQWdCQSxHQUE0QkEsSUFBSUEsS0FBS0EsQ0FBb0JBLENBQUNBLENBQUNBLENBQUNBO1FBQ25GQSxLQUFPQSxxQkFBcUJBLEdBQWtCQSxJQUFJQSxLQUFLQSxDQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUtwRUEsQ0FBQ0E7SUFRREQ7Ozs7O01BREdBOzBDQUNIQSxVQUFpQkEsSUFBV0E7UUFFM0JFLElBQUlBLElBQUlBLENBQUNBLE1BQU1BLElBQUlBLElBQUlBO1lBQ3RCQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxDQUFDQTs7UUFFdkJBLEtBQUtBLElBQUlBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBO1lBQ2hDQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBOztRQUV0Q0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUE7SUFDbkJBLENBQUNBOztJQUtERjs7TUFER0E7d0NBQ0hBO1FBRUNHLGdCQUFLQSxDQUFDQSxPQUFPQSxLQUFDQSxLQUFBQSxDQUFDQTs7UUFFZkEsS0FBS0EsSUFBSUEsQ0FBQ0EsR0FBVUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBRUE7WUFDbENBLElBQUlBLFVBQVVBLEdBQXFCQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLENBQUNBLENBQUNBO1lBQzNEQSxJQUFJQSxHQUFHQSxHQUFVQSxVQUFVQSxDQUFDQSxNQUFNQTtZQUNsQ0EsS0FBS0EsSUFBSUEsQ0FBQ0EsR0FBVUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBQ0EsRUFBRUE7Z0JBQ2xDQSxlQUFlQSxDQUFDQSxnQkFBZ0JBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1NBQ2pEQTtJQUNGQSxDQUFDQTs7SUFLREg7O01BREdBO2tEQUNIQTtRQUVDSSxnQkFBS0EsQ0FBQ0EsaUJBQWlCQSxLQUFDQSxLQUFBQSxDQUFDQTs7UUFFekJBLEtBQUtBLElBQUlBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBO1lBQ2hDQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO0lBQ3ZDQSxDQUFDQTs7SUFFREosNENBQUFBLFVBQXVCQSxJQUFXQTtRQUVqQ0ssSUFBSUEsSUFBSUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFFQTtZQUNyQ0EsSUFBSUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxLQUFLQTs7WUFFeENBLElBQUlBLFVBQVVBLEdBQXFCQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsS0FBS0EsQ0FBYUEsQ0FBQ0EsQ0FBQ0E7WUFDekhBLGVBQWVBLENBQUNBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsVUFBVUEsRUFBRUEsSUFBSUEsQ0FBQ0E7U0FDOUVBOztRQUVEQSxPQUFPQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBO0lBQ25DQSxDQUFDQTs7SUFFREwsNkNBQUFBLFVBQXdCQSxJQUFXQTtRQUVsQ00sTUFBTUEsSUFBSUEsbUJBQW1CQSxDQUFDQSxDQUFDQTtJQUNoQ0EsQ0FBQ0E7SUFDRk4sdUJBQUNBO0FBQURBLENBQUNBLEVBckU2QixnQkFBZ0IsRUFxRTdDOztBQUVELGdDQUF5QixDQUFBIiwiZmlsZSI6InRleHR1cmVzL0N1YmVUZXh0dXJlQmFzZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1jb3JlLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCaXRtYXBEYXRhXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9iYXNlL0JpdG1hcERhdGFcIik7XG5pbXBvcnQgQWJzdHJhY3RNZXRob2RFcnJvclx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZXJyb3JzL0Fic3RyYWN0TWV0aG9kRXJyb3JcIik7XG5pbXBvcnQgTWlwbWFwR2VuZXJhdG9yXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3RleHR1cmVzL01pcG1hcEdlbmVyYXRvclwiKTtcbmltcG9ydCBUZXh0dXJlUHJveHlCYXNlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3RleHR1cmVzL1RleHR1cmVQcm94eUJhc2VcIik7XG5cbmNsYXNzIEN1YmVUZXh0dXJlQmFzZSBleHRlbmRzIFRleHR1cmVQcm94eUJhc2Vcbntcblx0cHVibGljIF9taXBtYXBEYXRhQXJyYXk6QXJyYXk8QXJyYXk8Qml0bWFwRGF0YT4+ID0gbmV3IEFycmF5PEFycmF5PEJpdG1hcERhdGE+Pig2KTtcblx0cHVibGljIF9taXBtYXBEYXRhRGlydHlBcnJheTpBcnJheTxib29sZWFuPiA9IG5ldyBBcnJheTxib29sZWFuPig2KTtcblxuXHRjb25zdHJ1Y3RvcihnZW5lcmF0ZU1pcG1hcHM6Ym9vbGVhbiA9IGZhbHNlKVxuXHR7XG5cdFx0c3VwZXIoZ2VuZXJhdGVNaXBtYXBzKTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gd2lkdGhcblx0ICogQHBhcmFtIGhlaWdodFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHVibGljIF9wU2V0U2l6ZShzaXplOm51bWJlcilcblx0e1xuXHRcdGlmICh0aGlzLl9wU2l6ZSAhPSBzaXplKVxuXHRcdFx0dGhpcy5pbnZhbGlkYXRlU2l6ZSgpO1xuXG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgPSAwOyBpIDwgNjsgaSsrKVxuXHRcdFx0dGhpcy5fbWlwbWFwRGF0YURpcnR5QXJyYXlbaV0gPSB0cnVlO1xuXG5cdFx0dGhpcy5fcFNpemUgPSBzaXplO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgZGlzcG9zZSgpXG5cdHtcblx0XHRzdXBlci5kaXNwb3NlKCk7XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCA2OyBpKyspIHtcblx0XHRcdHZhciBtaXBtYXBEYXRhOkFycmF5PEJpdG1hcERhdGE+ID0gdGhpcy5fbWlwbWFwRGF0YUFycmF5W2ldO1xuXHRcdFx0dmFyIGxlbjpudW1iZXIgPSBtaXBtYXBEYXRhLmxlbmd0aDtcblx0XHRcdGZvciAodmFyIGo6bnVtYmVyID0gMDsgaiA8IGxlbjsgaisrKVxuXHRcdFx0XHRNaXBtYXBHZW5lcmF0b3IuZnJlZU1pcE1hcEhvbGRlcihtaXBtYXBEYXRhW2pdKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBpbnZhbGlkYXRlQ29udGVudCgpOnZvaWRcblx0e1xuXHRcdHN1cGVyLmludmFsaWRhdGVDb250ZW50KCk7XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCA2OyBpKyspXG5cdFx0XHR0aGlzLl9taXBtYXBEYXRhRGlydHlBcnJheVtpXSA9IHRydWU7XG5cdH1cblxuXHRwdWJsaWMgX2lHZXRNaXBtYXBEYXRhKHNpZGU6bnVtYmVyKTpBcnJheTxCaXRtYXBEYXRhPlxuXHR7XG5cdFx0aWYgKHRoaXMuX21pcG1hcERhdGFEaXJ0eUFycmF5W3NpZGVdKSB7XG5cdFx0XHR0aGlzLl9taXBtYXBEYXRhRGlydHlBcnJheVtzaWRlXSA9IGZhbHNlO1xuXG5cdFx0XHR2YXIgbWlwbWFwRGF0YTpBcnJheTxCaXRtYXBEYXRhPiA9IHRoaXMuX21pcG1hcERhdGFBcnJheVtzaWRlXSB8fCAodGhpcy5fbWlwbWFwRGF0YUFycmF5W3NpZGVdID0gbmV3IEFycmF5PEJpdG1hcERhdGE+KCkpO1xuXHRcdFx0TWlwbWFwR2VuZXJhdG9yLmdlbmVyYXRlTWlwTWFwcyh0aGlzLl9pR2V0VGV4dHVyZURhdGEoc2lkZSksIG1pcG1hcERhdGEsIHRydWUpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl9taXBtYXBEYXRhQXJyYXlbc2lkZV07XG5cdH1cblxuXHRwdWJsaWMgX2lHZXRUZXh0dXJlRGF0YShzaWRlOm51bWJlcik6YW55XG5cdHtcblx0XHR0aHJvdyBuZXcgQWJzdHJhY3RNZXRob2RFcnJvcigpO1xuXHR9XG59XG5cbmV4cG9ydCA9IEN1YmVUZXh0dXJlQmFzZTsiXX0=