var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var MipmapGenerator = require("awayjs-core/lib/textures/MipmapGenerator");
var TextureProxyBase = require("awayjs-core/lib/textures/TextureProxyBase");
var CubeTextureBase = (function (_super) {
    __extends(CubeTextureBase, _super);
    function CubeTextureBase() {
        _super.call(this);
        this._mipmapDataArray = new Array(6);
        this._mipmapDataDirtyArray = new Array(6);
    }
    /**
     *
     * @param width
     * @param height
     * @private
     */
    CubeTextureBase.prototype._pSetSize = function (size) {
        if (this._pSize != size)
            this.invalidateSize();
        for (var i = 0; i < 6; i++)
            this._mipmapDataDirtyArray[i] = true;
        this._pSize = size;
    };
    /**
     * @inheritDoc
     */
    CubeTextureBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        for (var i = 0; i < 6; i++) {
            var mipmapData = this._mipmapDataArray[i];
            var len = mipmapData.length;
            for (var j = 0; j < len; j++)
                MipmapGenerator.freeMipMapHolder(mipmapData[j]);
        }
    };
    /**
     *
     */
    CubeTextureBase.prototype.invalidateContent = function () {
        _super.prototype.invalidateContent.call(this);
        for (var i = 0; i < 6; i++)
            this._mipmapDataDirtyArray[i] = true;
    };
    CubeTextureBase.prototype._iGetMipmapData = function (side) {
        if (this._mipmapDataDirtyArray[side]) {
            this._mipmapDataDirtyArray[side] = false;
            var mipmapData = this._mipmapDataArray[side] || (this._mipmapDataArray[side] = new Array());
            MipmapGenerator.generateMipMaps(this._iGetTextureData(side), mipmapData, true);
        }
        return this._mipmapDataArray[side];
    };
    CubeTextureBase.prototype._iGetTextureData = function (side) {
        throw new AbstractMethodError();
    };
    return CubeTextureBase;
})(TextureProxyBase);
module.exports = CubeTextureBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9DdWJlVGV4dHVyZUJhc2UudHMiXSwibmFtZXMiOlsiQ3ViZVRleHR1cmVCYXNlIiwiQ3ViZVRleHR1cmVCYXNlLmNvbnN0cnVjdG9yIiwiQ3ViZVRleHR1cmVCYXNlLl9wU2V0U2l6ZSIsIkN1YmVUZXh0dXJlQmFzZS5kaXNwb3NlIiwiQ3ViZVRleHR1cmVCYXNlLmludmFsaWRhdGVDb250ZW50IiwiQ3ViZVRleHR1cmVCYXNlLl9pR2V0TWlwbWFwRGF0YSIsIkN1YmVUZXh0dXJlQmFzZS5faUdldFRleHR1cmVEYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFPLG1CQUFtQixXQUFZLDRDQUE0QyxDQUFDLENBQUM7QUFDcEYsSUFBTyxlQUFlLFdBQWEsMENBQTBDLENBQUMsQ0FBQztBQUMvRSxJQUFPLGdCQUFnQixXQUFhLDJDQUEyQyxDQUFDLENBQUM7QUFFakYsSUFBTSxlQUFlO0lBQVNBLFVBQXhCQSxlQUFlQSxVQUF5QkE7SUFLN0NBLFNBTEtBLGVBQWVBO1FBT25CQyxpQkFBT0EsQ0FBQ0E7UUFMRkEscUJBQWdCQSxHQUE0QkEsSUFBSUEsS0FBS0EsQ0FBb0JBLENBQUNBLENBQUNBLENBQUNBO1FBQzVFQSwwQkFBcUJBLEdBQWtCQSxJQUFJQSxLQUFLQSxDQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUtwRUEsQ0FBQ0E7SUFFREQ7Ozs7O09BS0dBO0lBQ0lBLG1DQUFTQSxHQUFoQkEsVUFBaUJBLElBQVdBO1FBRTNCRSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxJQUFJQSxJQUFJQSxDQUFDQTtZQUN2QkEsSUFBSUEsQ0FBQ0EsY0FBY0EsRUFBRUEsQ0FBQ0E7UUFFdkJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBO1lBQ2hDQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO1FBRXRDQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUNwQkEsQ0FBQ0E7SUFFREY7O09BRUdBO0lBQ0lBLGlDQUFPQSxHQUFkQTtRQUVDRyxnQkFBS0EsQ0FBQ0EsT0FBT0EsV0FBRUEsQ0FBQ0E7UUFFaEJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQ25DQSxJQUFJQSxVQUFVQSxHQUFxQkEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM1REEsSUFBSUEsR0FBR0EsR0FBVUEsVUFBVUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFDbkNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBLEVBQUVBO2dCQUNsQ0EsZUFBZUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNsREEsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFFREg7O09BRUdBO0lBQ0lBLDJDQUFpQkEsR0FBeEJBO1FBRUNJLGdCQUFLQSxDQUFDQSxpQkFBaUJBLFdBQUVBLENBQUNBO1FBRTFCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFVQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQTtZQUNoQ0EsSUFBSUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUN2Q0EsQ0FBQ0E7SUFFTUoseUNBQWVBLEdBQXRCQSxVQUF1QkEsSUFBV0E7UUFFakNLLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdENBLElBQUlBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFFekNBLElBQUlBLFVBQVVBLEdBQXFCQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsS0FBS0EsRUFBY0EsQ0FBQ0EsQ0FBQ0E7WUFDMUhBLGVBQWVBLENBQUNBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsVUFBVUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDaEZBLENBQUNBO1FBRURBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDcENBLENBQUNBO0lBRU1MLDBDQUFnQkEsR0FBdkJBLFVBQXdCQSxJQUFXQTtRQUVsQ00sTUFBTUEsSUFBSUEsbUJBQW1CQSxFQUFFQSxDQUFDQTtJQUNqQ0EsQ0FBQ0E7SUFDRk4sc0JBQUNBO0FBQURBLENBckVBLEFBcUVDQSxFQXJFNkIsZ0JBQWdCLEVBcUU3QztBQUVELEFBQXlCLGlCQUFoQixlQUFlLENBQUMiLCJmaWxlIjoidGV4dHVyZXMvQ3ViZVRleHR1cmVCYXNlLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCaXRtYXBEYXRhXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvYmFzZS9CaXRtYXBEYXRhXCIpO1xyXG5pbXBvcnQgQWJzdHJhY3RNZXRob2RFcnJvclx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZXJyb3JzL0Fic3RyYWN0TWV0aG9kRXJyb3JcIik7XHJcbmltcG9ydCBNaXBtYXBHZW5lcmF0b3JcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvTWlwbWFwR2VuZXJhdG9yXCIpO1xyXG5pbXBvcnQgVGV4dHVyZVByb3h5QmFzZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9UZXh0dXJlUHJveHlCYXNlXCIpO1xyXG5cclxuY2xhc3MgQ3ViZVRleHR1cmVCYXNlIGV4dGVuZHMgVGV4dHVyZVByb3h5QmFzZVxyXG57XHJcblx0cHVibGljIF9taXBtYXBEYXRhQXJyYXk6QXJyYXk8QXJyYXk8Qml0bWFwRGF0YT4+ID0gbmV3IEFycmF5PEFycmF5PEJpdG1hcERhdGE+Pig2KTtcclxuXHRwdWJsaWMgX21pcG1hcERhdGFEaXJ0eUFycmF5OkFycmF5PGJvb2xlYW4+ID0gbmV3IEFycmF5PGJvb2xlYW4+KDYpO1xyXG5cclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0c3VwZXIoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHdpZHRoXHJcblx0ICogQHBhcmFtIGhlaWdodFxyXG5cdCAqIEBwcml2YXRlXHJcblx0ICovXHJcblx0cHVibGljIF9wU2V0U2l6ZShzaXplOm51bWJlcilcclxuXHR7XHJcblx0XHRpZiAodGhpcy5fcFNpemUgIT0gc2l6ZSlcclxuXHRcdFx0dGhpcy5pbnZhbGlkYXRlU2l6ZSgpO1xyXG5cclxuXHRcdGZvciAodmFyIGk6bnVtYmVyID0gMDsgaSA8IDY7IGkrKylcclxuXHRcdFx0dGhpcy5fbWlwbWFwRGF0YURpcnR5QXJyYXlbaV0gPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMuX3BTaXplID0gc2l6ZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0RG9jXHJcblx0ICovXHJcblx0cHVibGljIGRpc3Bvc2UoKVxyXG5cdHtcclxuXHRcdHN1cGVyLmRpc3Bvc2UoKTtcclxuXHJcblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCA2OyBpKyspIHtcclxuXHRcdFx0dmFyIG1pcG1hcERhdGE6QXJyYXk8Qml0bWFwRGF0YT4gPSB0aGlzLl9taXBtYXBEYXRhQXJyYXlbaV07XHJcblx0XHRcdHZhciBsZW46bnVtYmVyID0gbWlwbWFwRGF0YS5sZW5ndGg7XHJcblx0XHRcdGZvciAodmFyIGo6bnVtYmVyID0gMDsgaiA8IGxlbjsgaisrKVxyXG5cdFx0XHRcdE1pcG1hcEdlbmVyYXRvci5mcmVlTWlwTWFwSG9sZGVyKG1pcG1hcERhdGFbal0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICpcclxuXHQgKi9cclxuXHRwdWJsaWMgaW52YWxpZGF0ZUNvbnRlbnQoKTp2b2lkXHJcblx0e1xyXG5cdFx0c3VwZXIuaW52YWxpZGF0ZUNvbnRlbnQoKTtcclxuXHJcblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCA2OyBpKyspXHJcblx0XHRcdHRoaXMuX21pcG1hcERhdGFEaXJ0eUFycmF5W2ldID0gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBfaUdldE1pcG1hcERhdGEoc2lkZTpudW1iZXIpOkFycmF5PEJpdG1hcERhdGE+XHJcblx0e1xyXG5cdFx0aWYgKHRoaXMuX21pcG1hcERhdGFEaXJ0eUFycmF5W3NpZGVdKSB7XHJcblx0XHRcdHRoaXMuX21pcG1hcERhdGFEaXJ0eUFycmF5W3NpZGVdID0gZmFsc2U7XHJcblxyXG5cdFx0XHR2YXIgbWlwbWFwRGF0YTpBcnJheTxCaXRtYXBEYXRhPiA9IHRoaXMuX21pcG1hcERhdGFBcnJheVtzaWRlXSB8fCAodGhpcy5fbWlwbWFwRGF0YUFycmF5W3NpZGVdID0gbmV3IEFycmF5PEJpdG1hcERhdGE+KCkpO1xyXG5cdFx0XHRNaXBtYXBHZW5lcmF0b3IuZ2VuZXJhdGVNaXBNYXBzKHRoaXMuX2lHZXRUZXh0dXJlRGF0YShzaWRlKSwgbWlwbWFwRGF0YSwgdHJ1ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX21pcG1hcERhdGFBcnJheVtzaWRlXTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBfaUdldFRleHR1cmVEYXRhKHNpZGU6bnVtYmVyKTphbnlcclxuXHR7XHJcblx0XHR0aHJvdyBuZXcgQWJzdHJhY3RNZXRob2RFcnJvcigpO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0ID0gQ3ViZVRleHR1cmVCYXNlOyJdfQ==