var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Error = require("awayjs-core/lib/errors/Error");
var CubeTextureBase = require("awayjs-core/lib/textures/CubeTextureBase");
var TextureUtils = require("awayjs-core/lib/utils/TextureUtils");
var ImageCubeTexture = (function (_super) {
    __extends(ImageCubeTexture, _super);
    function ImageCubeTexture(posX, negX, posY, negY, posZ, negZ, generateMipmaps) {
        if (generateMipmaps === void 0) { generateMipmaps = false; }
        _super.call(this, generateMipmaps);
        this._htmlImageElements = new Array(6);
        this._testSize(this._htmlImageElements[0] = posX);
        this._testSize(this._htmlImageElements[1] = negX);
        this._testSize(this._htmlImageElements[2] = posY);
        this._testSize(this._htmlImageElements[3] = negY);
        this._testSize(this._htmlImageElements[4] = posZ);
        this._testSize(this._htmlImageElements[5] = negZ);
        this.invalidateContent();
        this._pSetSize(posX.width);
    }
    Object.defineProperty(ImageCubeTexture.prototype, "positiveX", {
        /**
         * The texture on the cube's right face.
         */
        get: function () {
            return this._htmlImageElements[0];
        },
        set: function (value) {
            this._testSize(value);
            this.invalidateContent();
            this._pSetSize(value.width);
            this._htmlImageElements[0] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageCubeTexture.prototype, "negativeX", {
        /**
         * The texture on the cube's left face.
         */
        get: function () {
            return this._htmlImageElements[1];
        },
        set: function (value) {
            this._testSize(value);
            this.invalidateContent();
            this._pSetSize(value.width);
            this._htmlImageElements[1] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageCubeTexture.prototype, "positiveY", {
        /**
         * The texture on the cube's top face.
         */
        get: function () {
            return this._htmlImageElements[2];
        },
        set: function (value) {
            this._testSize(value);
            this.invalidateContent();
            this._pSetSize(value.width);
            this._htmlImageElements[2] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageCubeTexture.prototype, "negativeY", {
        /**
         * The texture on the cube's bottom face.
         */
        get: function () {
            return this._htmlImageElements[3];
        },
        set: function (value) {
            this._testSize(value);
            this.invalidateContent();
            this._pSetSize(value.width);
            this._htmlImageElements[3] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageCubeTexture.prototype, "positiveZ", {
        /**
         * The texture on the cube's far face.
         */
        get: function () {
            return this._htmlImageElements[4];
        },
        set: function (value) {
            this._testSize(value);
            this.invalidateContent();
            this._pSetSize(value.width);
            this._htmlImageElements[4] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageCubeTexture.prototype, "negativeZ", {
        /**
         * The texture on the cube's near face.
         */
        get: function () {
            return this._htmlImageElements[5];
        },
        set: function (value) {
            this._testSize(value);
            this.invalidateContent();
            this._pSetSize(value.width);
            this._htmlImageElements[5] = value;
        },
        enumerable: true,
        configurable: true
    });
    ImageCubeTexture.prototype._testSize = function (value) {
        if (value.width != value.height)
            throw new Error("BitmapData should have equal width and height!");
        if (!TextureUtils.isHTMLImageElementValid(value))
            throw new Error("Invalid bitmapData: Width and height must be power of 2 and cannot exceed 2048");
    };
    ImageCubeTexture.prototype._iGetTextureData = function (side) {
        return this._htmlImageElements[side];
    };
    return ImageCubeTexture;
})(CubeTextureBase);
module.exports = ImageCubeTexture;

//# sourceMappingURL=data:application/json;base64,