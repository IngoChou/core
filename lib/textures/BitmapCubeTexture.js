var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Error = require("awayjs-core/lib/errors/Error");
var CubeTextureBase = require("awayjs-core/lib/textures/CubeTextureBase");
var TextureUtils = require("awayjs-core/lib/utils/TextureUtils");
var BitmapCubeTexture = (function (_super) {
    __extends(BitmapCubeTexture, _super);
    function BitmapCubeTexture(posX, negX, posY, negY, posZ, negZ) {
        _super.call(this);
        this._bitmapDatas = new Array(6);
        this._testSize(this._bitmapDatas[0] = posX);
        this._testSize(this._bitmapDatas[1] = negX);
        this._testSize(this._bitmapDatas[2] = posY);
        this._testSize(this._bitmapDatas[3] = negY);
        this._testSize(this._bitmapDatas[4] = posZ);
        this._testSize(this._bitmapDatas[5] = negZ);
        this.invalidateContent();
        this._pSetSize(posX.width);
    }
    Object.defineProperty(BitmapCubeTexture.prototype, "positiveX", {
        /**
         * The texture on the cube's right face.
         */
        get: function () {
            return this._bitmapDatas[0];
        },
        set: function (value) {
            this._testSize(value);
            this.invalidateContent();
            this._pSetSize(value.width);
            this._bitmapDatas[0] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapCubeTexture.prototype, "negativeX", {
        /**
         * The texture on the cube's left face.
         */
        get: function () {
            return this._bitmapDatas[1];
        },
        set: function (value) {
            this._testSize(value);
            this.invalidateContent();
            this._pSetSize(value.width);
            this._bitmapDatas[1] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapCubeTexture.prototype, "positiveY", {
        /**
         * The texture on the cube's top face.
         */
        get: function () {
            return this._bitmapDatas[2];
        },
        set: function (value) {
            this._testSize(value);
            this.invalidateContent();
            this._pSetSize(value.width);
            this._bitmapDatas[2] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapCubeTexture.prototype, "negativeY", {
        /**
         * The texture on the cube's bottom face.
         */
        get: function () {
            return this._bitmapDatas[3];
        },
        set: function (value) {
            this._testSize(value);
            this.invalidateContent();
            this._pSetSize(value.width);
            this._bitmapDatas[3] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapCubeTexture.prototype, "positiveZ", {
        /**
         * The texture on the cube's far face.
         */
        get: function () {
            return this._bitmapDatas[4];
        },
        set: function (value) {
            this._testSize(value);
            this.invalidateContent();
            this._pSetSize(value.width);
            this._bitmapDatas[4] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapCubeTexture.prototype, "negativeZ", {
        /**
         * The texture on the cube's near face.
         */
        get: function () {
            return this._bitmapDatas[5];
        },
        set: function (value) {
            this._testSize(value);
            this.invalidateContent();
            this._pSetSize(value.width);
            this._bitmapDatas[5] = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * @param value
     * @private
     */
    BitmapCubeTexture.prototype._testSize = function (value) {
        if (value.width != value.height)
            throw new Error("BitmapData should have equal width and height!");
        if (!TextureUtils.isBitmapDataValid(value))
            throw new Error("Invalid bitmapData: Width and height must be power of 2 and cannot exceed 2048");
    };
    BitmapCubeTexture.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        var len = this._bitmapDatas.length;
        for (var i = 0; i < len; i++) {
            this._bitmapDatas[i].dispose();
            this._bitmapDatas[i] = null;
        }
        this._bitmapDatas = null;
    };
    BitmapCubeTexture.prototype._iGetTextureData = function (side) {
        return this._bitmapDatas[side];
    };
    return BitmapCubeTexture;
})(CubeTextureBase);
module.exports = BitmapCubeTexture;

//# sourceMappingURL=data:application/json;base64,