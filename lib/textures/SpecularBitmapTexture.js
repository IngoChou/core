var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BitmapData = require("awayjs-core/lib/base/BitmapData");
var BitmapDataChannel = require("awayjs-core/lib/base/BitmapDataChannel");
var Point = require("awayjs-core/lib/geom/Point");
var BitmapTexture = require("awayjs-core/lib/textures/BitmapTexture");
/**
 * A convenience texture that encodes a specular map in the red channel, and the gloss map in the green channel, as expected by BasicSpecularMapMethod
 */
var SpecularBitmapTexture = (function (_super) {
    __extends(SpecularBitmapTexture, _super);
    function SpecularBitmapTexture(specularMap, glossMap) {
        if (specularMap === void 0) { specularMap = null; }
        if (glossMap === void 0) { glossMap = null; }
        var bmd = specularMap ? specularMap : glossMap;
        bmd = bmd ? new BitmapData(bmd.width, bmd.height, false, 0xffffff) : new BitmapData(1, 1, false, 0xffffff);
        _super.call(this, bmd);
        this.specularMap = specularMap;
        this.glossMap = glossMap;
    }
    Object.defineProperty(SpecularBitmapTexture.prototype, "specularMap", {
        get: function () {
            return this._specularMap;
        },
        set: function (value) {
            this._specularMap = value;
            this.invalidateContent();
            this._testSize();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpecularBitmapTexture.prototype, "glossMap", {
        get: function () {
            return this._glossMap;
        },
        set: function (value) {
            this._glossMap = value;
            this.invalidateContent();
            this._testSize();
        },
        enumerable: true,
        configurable: true
    });
    SpecularBitmapTexture.prototype._testSize = function () {
        var w, h;
        if (this._specularMap) {
            w = this._specularMap.width;
            h = this._specularMap.height;
        }
        else if (this._glossMap) {
            w = this._glossMap.width;
            h = this._glossMap.height;
        }
        else {
            w = 1;
            h = 1;
        }
        if (w != this._bitmapData.width && h != this._bitmapData.height) {
            var oldBitmap = this._bitmapData;
            this.bitmapData = new BitmapData(this._specularMap.width, this._specularMap.height, false, 0xffffff);
            oldBitmap.dispose();
        }
    };
    SpecularBitmapTexture.prototype._iGetTextureData = function () {
        var rect = this._specularMap.rect;
        var origin = new Point();
        this._bitmapData.fillRect(rect, 0xffffff);
        if (this._glossMap)
            this._bitmapData.copyChannel(this._glossMap, rect, origin, BitmapDataChannel.GREEN, BitmapDataChannel.GREEN);
        if (this._specularMap)
            this._bitmapData.copyChannel(this._specularMap, rect, origin, BitmapDataChannel.RED, BitmapDataChannel.RED);
        return this._bitmapData;
    };
    return SpecularBitmapTexture;
})(BitmapTexture);
module.exports = SpecularBitmapTexture;

//# sourceMappingURL=data:application/json;base64,