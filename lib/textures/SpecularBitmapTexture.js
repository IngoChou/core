var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BitmapData = require("awayjs-core/lib/base/BitmapData");
var BitmapDataChannel = require("awayjs-core/lib/base/BitmapDataChannel");
var Point = require("awayjs-core/lib/geom/Point");
var BitmapTexture = require("awayjs-core/lib/textures/BitmapTexture");
/**
 * A convenience texture that encodes a specular map in the red channel, and the gloss map in the green channel, as expected by BasicSpecularMapMethod
 */
var SpecularBitmapTexture = (function (_super) {
    __extends(SpecularBitmapTexture, _super);
    function SpecularBitmapTexture(specularMap, glossMap, generateMipmaps) {
        if (specularMap === void 0) { specularMap = null; }
        if (glossMap === void 0) { glossMap = null; }
        if (generateMipmaps === void 0) { generateMipmaps = true; }
        var bmd = specularMap ? specularMap : glossMap;
        bmd = bmd ? new BitmapData(bmd.width, bmd.height, false, 0xffffff) : new BitmapData(1, 1, false, 0xffffff);
        _super.call(this, bmd, generateMipmaps);
        this.specularMap = specularMap;
        this.glossMap = glossMap;
    }
    Object.defineProperty(SpecularBitmapTexture.prototype, "specularMap", {
        get: function () {
            return this._specularMap;
        },
        set: function (value) {
            this._specularMap = value;
            this.invalidateContent();
            this._testSize();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpecularBitmapTexture.prototype, "glossMap", {
        get: function () {
            return this._glossMap;
        },
        set: function (value) {
            this._glossMap = value;
            this.invalidateContent();
            this._testSize();
        },
        enumerable: true,
        configurable: true
    });
    SpecularBitmapTexture.prototype._testSize = function () {
        var w, h;
        if (this._specularMap) {
            w = this._specularMap.width;
            h = this._specularMap.height;
        }
        else if (this._glossMap) {
            w = this._glossMap.width;
            h = this._glossMap.height;
        }
        else {
            w = 1;
            h = 1;
        }
        if (w != this._bitmapData.width && h != this._bitmapData.height) {
            var oldBitmap = this._bitmapData;
            this.bitmapData = new BitmapData(this._specularMap.width, this._specularMap.height, false, 0xffffff);
            oldBitmap.dispose();
        }
    };
    SpecularBitmapTexture.prototype._iGetTextureData = function () {
        var rect = this._specularMap.rect;
        var origin = new Point();
        this._bitmapData.fillRect(rect, 0xffffff);
        if (this._glossMap)
            this._bitmapData.copyChannel(this._glossMap, rect, origin, BitmapDataChannel.GREEN, BitmapDataChannel.GREEN);
        if (this._specularMap)
            this._bitmapData.copyChannel(this._specularMap, rect, origin, BitmapDataChannel.RED, BitmapDataChannel.RED);
        return this._bitmapData;
    };
    return SpecularBitmapTexture;
})(BitmapTexture);
module.exports = SpecularBitmapTexture;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9zcGVjdWxhcmJpdG1hcHRleHR1cmUudHMiXSwibmFtZXMiOlsiU3BlY3VsYXJCaXRtYXBUZXh0dXJlIiwiU3BlY3VsYXJCaXRtYXBUZXh0dXJlLmNvbnN0cnVjdG9yIiwiU3BlY3VsYXJCaXRtYXBUZXh0dXJlLnNwZWN1bGFyTWFwIiwiU3BlY3VsYXJCaXRtYXBUZXh0dXJlLmdsb3NzTWFwIiwiU3BlY3VsYXJCaXRtYXBUZXh0dXJlLl90ZXN0U2l6ZSIsIlNwZWN1bGFyQml0bWFwVGV4dHVyZS5faUdldFRleHR1cmVEYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFVBQVUsV0FBYyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQ2xFLElBQU8saUJBQWlCLFdBQVksd0NBQXdDLENBQUMsQ0FBQztBQUM5RSxJQUFPLEtBQUssV0FBZSw0QkFBNEIsQ0FBQyxDQUFDO0FBRXpELElBQU8sYUFBYSxXQUFhLHdDQUF3QyxDQUFDLENBQUM7QUFFM0UsQUFHQTs7R0FERztJQUNHLHFCQUFxQjtJQUFTQSxVQUE5QkEscUJBQXFCQSxVQUFzQkE7SUFLaERBLFNBTEtBLHFCQUFxQkEsQ0FLZEEsV0FBNkJBLEVBQUVBLFFBQTBCQSxFQUFFQSxlQUE4QkE7UUFBekZDLDJCQUE2QkEsR0FBN0JBLGtCQUE2QkE7UUFBRUEsd0JBQTBCQSxHQUExQkEsZUFBMEJBO1FBQUVBLCtCQUE4QkEsR0FBOUJBLHNCQUE4QkE7UUFFcEdBLElBQUlBLEdBQUdBLEdBQWNBLFdBQVdBLEdBQUVBLFdBQVdBLEdBQUdBLFFBQVFBLENBQUNBO1FBRXpEQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFFQSxJQUFJQSxVQUFVQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxFQUFFQSxHQUFHQSxDQUFDQSxNQUFNQSxFQUFFQSxLQUFLQSxFQUFFQSxRQUFRQSxDQUFDQSxHQUFHQSxJQUFJQSxVQUFVQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxLQUFLQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUUxR0Esa0JBQU1BLEdBQUdBLEVBQUVBLGVBQWVBLENBQUNBLENBQUNBO1FBRTVCQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxXQUFXQSxDQUFDQTtRQUMvQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsUUFBUUEsQ0FBQ0E7SUFDMUJBLENBQUNBO0lBRURELHNCQUFXQSw4Q0FBV0E7YUFBdEJBO1lBRUNFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBO1FBQzFCQSxDQUFDQTthQUVERixVQUF1QkEsS0FBZ0JBO1lBRXRDRSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxLQUFLQSxDQUFDQTtZQUUxQkEsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxDQUFDQTtZQUV6QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0E7UUFDbEJBLENBQUNBOzs7T0FUQUY7SUFXREEsc0JBQVdBLDJDQUFRQTthQUFuQkE7WUFFQ0csTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7UUFDdkJBLENBQUNBO2FBRURILFVBQW9CQSxLQUFnQkE7WUFFbkNHLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLEtBQUtBLENBQUNBO1lBQ3ZCQSxJQUFJQSxDQUFDQSxpQkFBaUJBLEVBQUVBLENBQUNBO1lBRXpCQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQTtRQUNsQkEsQ0FBQ0E7OztPQVJBSDtJQVVPQSx5Q0FBU0EsR0FBakJBO1FBRUNJLElBQUlBLENBQVFBLEVBQUVBLENBQVFBLENBQUNBO1FBRXZCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN2QkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDNUJBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLE1BQU1BLENBQUNBO1FBQzlCQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMzQkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDekJBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBO1FBQzNCQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNQQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNOQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNQQSxDQUFDQTtRQUVEQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxLQUFLQSxJQUFJQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNqRUEsSUFBSUEsU0FBU0EsR0FBY0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7WUFDNUNBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLElBQUlBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLE1BQU1BLEVBQUVBLEtBQUtBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO1lBQ3JHQSxTQUFTQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUNyQkEsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFFTUosZ0RBQWdCQSxHQUF2QkE7UUFFQ0ssSUFBSUEsSUFBSUEsR0FBYUEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDNUNBLElBQUlBLE1BQU1BLEdBQVNBLElBQUlBLEtBQUtBLEVBQUVBLENBQUNBO1FBRS9CQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUUxQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7WUFDbEJBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEVBQUVBLElBQUlBLEVBQUVBLE1BQU1BLEVBQUVBLGlCQUFpQkEsQ0FBQ0EsS0FBS0EsRUFBRUEsaUJBQWlCQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUU5R0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7WUFDckJBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLElBQUlBLEVBQUVBLE1BQU1BLEVBQUVBLGlCQUFpQkEsQ0FBQ0EsR0FBR0EsRUFBRUEsaUJBQWlCQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUU3R0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7SUFDekJBLENBQUNBO0lBQ0ZMLDRCQUFDQTtBQUFEQSxDQWpGQSxBQWlGQ0EsRUFqRm1DLGFBQWEsRUFpRmhEO0FBRUQsQUFBK0IsaUJBQXRCLHFCQUFxQixDQUFDIiwiZmlsZSI6InRleHR1cmVzL1NwZWN1bGFyQml0bWFwVGV4dHVyZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQml0bWFwRGF0YVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2Jhc2UvQml0bWFwRGF0YVwiKTtcbmltcG9ydCBCaXRtYXBEYXRhQ2hhbm5lbFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvYmFzZS9CaXRtYXBEYXRhQ2hhbm5lbFwiKTtcbmltcG9ydCBQb2ludFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9Qb2ludFwiKTtcbmltcG9ydCBSZWN0YW5nbGVcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1JlY3RhbmdsZVwiKTtcbmltcG9ydCBCaXRtYXBUZXh0dXJlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3RleHR1cmVzL0JpdG1hcFRleHR1cmVcIik7XG5cbi8qKlxuICogQSBjb252ZW5pZW5jZSB0ZXh0dXJlIHRoYXQgZW5jb2RlcyBhIHNwZWN1bGFyIG1hcCBpbiB0aGUgcmVkIGNoYW5uZWwsIGFuZCB0aGUgZ2xvc3MgbWFwIGluIHRoZSBncmVlbiBjaGFubmVsLCBhcyBleHBlY3RlZCBieSBCYXNpY1NwZWN1bGFyTWFwTWV0aG9kXG4gKi9cbmNsYXNzIFNwZWN1bGFyQml0bWFwVGV4dHVyZSBleHRlbmRzIEJpdG1hcFRleHR1cmVcbntcblx0cHJpdmF0ZSBfc3BlY3VsYXJNYXA6Qml0bWFwRGF0YTtcblx0cHJpdmF0ZSBfZ2xvc3NNYXA6Qml0bWFwRGF0YTtcblx0XG5cdGNvbnN0cnVjdG9yKHNwZWN1bGFyTWFwOkJpdG1hcERhdGEgPSBudWxsLCBnbG9zc01hcDpCaXRtYXBEYXRhID0gbnVsbCwgZ2VuZXJhdGVNaXBtYXBzOmJvb2xlYW4gPSB0cnVlKVxuXHR7XG5cdFx0dmFyIGJtZDpCaXRtYXBEYXRhID0gc3BlY3VsYXJNYXA/IHNwZWN1bGFyTWFwIDogZ2xvc3NNYXA7XG5cblx0XHRibWQgPSBibWQ/IG5ldyBCaXRtYXBEYXRhKGJtZC53aWR0aCwgYm1kLmhlaWdodCwgZmFsc2UsIDB4ZmZmZmZmKSA6IG5ldyBCaXRtYXBEYXRhKDEsIDEsIGZhbHNlLCAweGZmZmZmZik7XG5cdFx0XG5cdFx0c3VwZXIoYm1kLCBnZW5lcmF0ZU1pcG1hcHMpO1xuXHRcdFxuXHRcdHRoaXMuc3BlY3VsYXJNYXAgPSBzcGVjdWxhck1hcDtcblx0XHR0aGlzLmdsb3NzTWFwID0gZ2xvc3NNYXA7XG5cdH1cblx0XG5cdHB1YmxpYyBnZXQgc3BlY3VsYXJNYXAoKTpCaXRtYXBEYXRhXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fc3BlY3VsYXJNYXA7XG5cdH1cblx0XG5cdHB1YmxpYyBzZXQgc3BlY3VsYXJNYXAodmFsdWU6Qml0bWFwRGF0YSlcblx0e1xuXHRcdHRoaXMuX3NwZWN1bGFyTWFwID0gdmFsdWU7XG5cblx0XHR0aGlzLmludmFsaWRhdGVDb250ZW50KCk7XG5cdFx0XG5cdFx0dGhpcy5fdGVzdFNpemUoKTtcblx0fVxuXHRcblx0cHVibGljIGdldCBnbG9zc01hcCgpOkJpdG1hcERhdGFcblx0e1xuXHRcdHJldHVybiB0aGlzLl9nbG9zc01hcDtcblx0fVxuXHRcblx0cHVibGljIHNldCBnbG9zc01hcCh2YWx1ZTpCaXRtYXBEYXRhKVxuXHR7XG5cdFx0dGhpcy5fZ2xvc3NNYXAgPSB2YWx1ZTtcblx0XHR0aGlzLmludmFsaWRhdGVDb250ZW50KCk7XG5cdFx0XG5cdFx0dGhpcy5fdGVzdFNpemUoKTtcblx0fVxuXHRcblx0cHJpdmF0ZSBfdGVzdFNpemUoKVxuXHR7XG5cdFx0dmFyIHc6TnVtYmVyLCBoOk51bWJlcjtcblx0XHRcblx0XHRpZiAodGhpcy5fc3BlY3VsYXJNYXApIHtcblx0XHRcdHcgPSB0aGlzLl9zcGVjdWxhck1hcC53aWR0aDtcblx0XHRcdGggPSB0aGlzLl9zcGVjdWxhck1hcC5oZWlnaHQ7XG5cdFx0fSBlbHNlIGlmICh0aGlzLl9nbG9zc01hcCkge1xuXHRcdFx0dyA9IHRoaXMuX2dsb3NzTWFwLndpZHRoO1xuXHRcdFx0aCA9IHRoaXMuX2dsb3NzTWFwLmhlaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dyA9IDE7XG5cdFx0XHRoID0gMTtcblx0XHR9XG5cdFx0XG5cdFx0aWYgKHcgIT0gdGhpcy5fYml0bWFwRGF0YS53aWR0aCAmJiBoICE9IHRoaXMuX2JpdG1hcERhdGEuaGVpZ2h0KSB7XG5cdFx0XHR2YXIgb2xkQml0bWFwOkJpdG1hcERhdGEgPSB0aGlzLl9iaXRtYXBEYXRhO1xuXHRcdFx0dGhpcy5iaXRtYXBEYXRhID0gbmV3IEJpdG1hcERhdGEodGhpcy5fc3BlY3VsYXJNYXAud2lkdGgsIHRoaXMuX3NwZWN1bGFyTWFwLmhlaWdodCwgZmFsc2UsIDB4ZmZmZmZmKTtcblx0XHRcdG9sZEJpdG1hcC5kaXNwb3NlKCk7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIF9pR2V0VGV4dHVyZURhdGEoKTpCaXRtYXBEYXRhXG5cdHtcblx0XHR2YXIgcmVjdDpSZWN0YW5nbGUgPSB0aGlzLl9zcGVjdWxhck1hcC5yZWN0O1xuXHRcdHZhciBvcmlnaW46UG9pbnQgPSBuZXcgUG9pbnQoKTtcblxuXHRcdHRoaXMuX2JpdG1hcERhdGEuZmlsbFJlY3QocmVjdCwgMHhmZmZmZmYpO1xuXG5cdFx0aWYgKHRoaXMuX2dsb3NzTWFwKVxuXHRcdFx0dGhpcy5fYml0bWFwRGF0YS5jb3B5Q2hhbm5lbCh0aGlzLl9nbG9zc01hcCwgcmVjdCwgb3JpZ2luLCBCaXRtYXBEYXRhQ2hhbm5lbC5HUkVFTiwgQml0bWFwRGF0YUNoYW5uZWwuR1JFRU4pO1xuXG5cdFx0aWYgKHRoaXMuX3NwZWN1bGFyTWFwKVxuXHRcdFx0dGhpcy5fYml0bWFwRGF0YS5jb3B5Q2hhbm5lbCh0aGlzLl9zcGVjdWxhck1hcCwgcmVjdCwgb3JpZ2luLCBCaXRtYXBEYXRhQ2hhbm5lbC5SRUQsIEJpdG1hcERhdGFDaGFubmVsLlJFRCk7XG5cblx0XHRyZXR1cm4gdGhpcy5fYml0bWFwRGF0YTtcblx0fVxufVxuXG5leHBvcnQgPSBTcGVjdWxhckJpdG1hcFRleHR1cmU7Il19