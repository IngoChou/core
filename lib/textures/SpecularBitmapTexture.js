var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BitmapData = require("awayjs-core/lib/base/BitmapData");
var BitmapDataChannel = require("awayjs-core/lib/base/BitmapDataChannel");
var Point = require("awayjs-core/lib/geom/Point");
var BitmapTexture = require("awayjs-core/lib/textures/BitmapTexture");
/**
 * A convenience texture that encodes a specular map in the red channel, and the gloss map in the green channel, as expected by BasicSpecularMapMethod
 */
var SpecularBitmapTexture = (function (_super) {
    __extends(SpecularBitmapTexture, _super);
    function SpecularBitmapTexture(specularMap, glossMap) {
        if (specularMap === void 0) { specularMap = null; }
        if (glossMap === void 0) { glossMap = null; }
        var bmd = specularMap ? specularMap : glossMap;
        bmd = bmd ? new BitmapData(bmd.width, bmd.height, false, 0xffffff) : new BitmapData(1, 1, false, 0xffffff);
        _super.call(this, bmd);
        this.specularMap = specularMap;
        this.glossMap = glossMap;
    }
    Object.defineProperty(SpecularBitmapTexture.prototype, "specularMap", {
        get: function () {
            return this._specularMap;
        },
        set: function (value) {
            this._specularMap = value;
            this.invalidateContent();
            this._testSize();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpecularBitmapTexture.prototype, "glossMap", {
        get: function () {
            return this._glossMap;
        },
        set: function (value) {
            this._glossMap = value;
            this.invalidateContent();
            this._testSize();
        },
        enumerable: true,
        configurable: true
    });
    SpecularBitmapTexture.prototype._testSize = function () {
        var w, h;
        if (this._specularMap) {
            w = this._specularMap.width;
            h = this._specularMap.height;
        }
        else if (this._glossMap) {
            w = this._glossMap.width;
            h = this._glossMap.height;
        }
        else {
            w = 1;
            h = 1;
        }
        if (w != this._bitmapData.width && h != this._bitmapData.height) {
            var oldBitmap = this._bitmapData;
            this.bitmapData = new BitmapData(this._specularMap.width, this._specularMap.height, false, 0xffffff);
            oldBitmap.dispose();
        }
    };
    SpecularBitmapTexture.prototype._iGetTextureData = function () {
        var rect = this._specularMap.rect;
        var origin = new Point();
        this._bitmapData.fillRect(rect, 0xffffff);
        if (this._glossMap)
            this._bitmapData.copyChannel(this._glossMap, rect, origin, BitmapDataChannel.GREEN, BitmapDataChannel.GREEN);
        if (this._specularMap)
            this._bitmapData.copyChannel(this._specularMap, rect, origin, BitmapDataChannel.RED, BitmapDataChannel.RED);
        return this._bitmapData;
    };
    return SpecularBitmapTexture;
})(BitmapTexture);
module.exports = SpecularBitmapTexture;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9zcGVjdWxhcmJpdG1hcHRleHR1cmUudHMiXSwibmFtZXMiOlsiU3BlY3VsYXJCaXRtYXBUZXh0dXJlIiwiU3BlY3VsYXJCaXRtYXBUZXh0dXJlLmNvbnN0cnVjdG9yIiwiU3BlY3VsYXJCaXRtYXBUZXh0dXJlLnNwZWN1bGFyTWFwIiwiU3BlY3VsYXJCaXRtYXBUZXh0dXJlLmdsb3NzTWFwIiwiU3BlY3VsYXJCaXRtYXBUZXh0dXJlLl90ZXN0U2l6ZSIsIlNwZWN1bGFyQml0bWFwVGV4dHVyZS5faUdldFRleHR1cmVEYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFVBQVUsV0FBYyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQ2xFLElBQU8saUJBQWlCLFdBQVksd0NBQXdDLENBQUMsQ0FBQztBQUM5RSxJQUFPLEtBQUssV0FBZSw0QkFBNEIsQ0FBQyxDQUFDO0FBRXpELElBQU8sYUFBYSxXQUFhLHdDQUF3QyxDQUFDLENBQUM7QUFFM0UsQUFHQTs7R0FERztJQUNHLHFCQUFxQjtJQUFTQSxVQUE5QkEscUJBQXFCQSxVQUFzQkE7SUFLaERBLFNBTEtBLHFCQUFxQkEsQ0FLZEEsV0FBNkJBLEVBQUVBLFFBQTBCQTtRQUF6REMsMkJBQTZCQSxHQUE3QkEsa0JBQTZCQTtRQUFFQSx3QkFBMEJBLEdBQTFCQSxlQUEwQkE7UUFFcEVBLElBQUlBLEdBQUdBLEdBQWNBLFdBQVdBLEdBQUVBLFdBQVdBLEdBQUdBLFFBQVFBLENBQUNBO1FBRXpEQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFFQSxJQUFJQSxVQUFVQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxFQUFFQSxHQUFHQSxDQUFDQSxNQUFNQSxFQUFFQSxLQUFLQSxFQUFFQSxRQUFRQSxDQUFDQSxHQUFHQSxJQUFJQSxVQUFVQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxLQUFLQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUUxR0Esa0JBQU1BLEdB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Q0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsRUFBRUEsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsaUJBQWlCQSxDQUFDQSxLQUFLQSxFQUFFQSxpQkFBaUJBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1FBRTlHQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQTtZQUNyQkEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsaUJBQWlCQSxDQUFDQSxHQUFHQSxFQUFFQSxpQkFBaUJBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBRTdHQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQTtJQUN6QkEsQ0FBQ0E7SUFDRkwsNEJBQUNBO0FBQURBLENBakZBLEFBaUZDQSxFQWpGbUMsYUFBYSxFQWlGaEQ7QUFFRCxBQUErQixpQkFBdEIscUJBQXFCLENBQUMiLCJmaWxlIjoidGV4dHVyZXMvU3BlY3VsYXJCaXRtYXBUZXh0dXJlLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCaXRtYXBEYXRhXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvYmFzZS9CaXRtYXBEYXRhXCIpO1xuaW1wb3J0IEJpdG1hcERhdGFDaGFubmVsXHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9iYXNlL0JpdG1hcERhdGFDaGFubmVsXCIpO1xuaW1wb3J0IFBvaW50XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1BvaW50XCIpO1xuaW1wb3J0IFJlY3RhbmdsZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vUmVjdGFuZ2xlXCIpO1xuaW1wb3J0IEJpdG1hcFRleHR1cmVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvQml0bWFwVGV4dHVyZVwiKTtcblxuLyoqXG4gKiBBIGNvbnZlbmllbmNlIHRleHR1cmUgdGhhdCBlbmNvZGVzIGEgc3BlY3VsYXIgbWFwIGluIHRoZSByZWQgY2hhbm5lbCwgYW5kIHRoZSBnbG9zcyBtYXAgaW4gdGhlIGdyZWVuIGNoYW5uZWwsIGFzIGV4cGVjdGVkIGJ5IEJhc2ljU3BlY3VsYXJNYXBNZXRob2RcbiAqL1xuY2xhc3MgU3BlY3VsYXJCaXRtYXBUZXh0dXJlIGV4dGVuZHMgQml0bWFwVGV4dHVyZVxue1xuXHRwcml2YXRlIF9zcGVjdWxhck1hcDpCaXRtYXBEYXRhO1xuXHRwcml2YXRlIF9nbG9zc01hcDpCaXRtYXBEYXRhO1xuXHRcblx0Y29uc3RydWN0b3Ioc3BlY3VsYXJNYXA6Qml0bWFwRGF0YSA9IG51bGwsIGdsb3NzTWFwOkJpdG1hcERhdGEgPSBudWxsKVxuXHR7XG5cdFx0dmFyIGJtZDpCaXRtYXBEYXRhID0gc3BlY3VsYXJNYXA/IHNwZWN1bGFyTWFwIDogZ2xvc3NNYXA7XG5cblx0XHRibWQgPSBibWQ/IG5ldyBCaXRtYXBEYXRhKGJtZC53aWR0aCwgYm1kLmhlaWdodCwgZmFsc2UsIDB4ZmZmZmZmKSA6IG5ldyBCaXRtYXBEYXRhKDEsIDEsIGZhbHNlLCAweGZmZmZmZik7XG5cdFx0XG5cdFx0c3VwZXIoYm1kKTtcblx0XHRcblx0XHR0aGlzLnNwZWN1bGFyTWFwID0gc3BlY3VsYXJNYXA7XG5cdFx0dGhpcy5nbG9zc01hcCA9IGdsb3NzTWFwO1xuXHR9XG5cdFxuXHRwdWJsaWMgZ2V0IHNwZWN1bGFyTWFwKCk6Qml0bWFwRGF0YVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3NwZWN1bGFyTWFwO1xuXHR9XG5cdFxuXHRwdWJsaWMgc2V0IHNwZWN1bGFyTWFwKHZhbHVlOkJpdG1hcERhdGEpXG5cdHtcblx0XHR0aGlzLl9zcGVjdWxhck1hcCA9IHZhbHVlO1xuXG5cdFx0dGhpcy5pbnZhbGlkYXRlQ29udGVudCgpO1xuXHRcdFxuXHRcdHRoaXMuX3Rlc3RTaXplKCk7XG5cdH1cblx0XG5cdHB1YmxpYyBnZXQgZ2xvc3NNYXAoKTpCaXRtYXBEYXRhXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fZ2xvc3NNYXA7XG5cdH1cblx0XG5cdHB1YmxpYyBzZXQgZ2xvc3NNYXAodmFsdWU6Qml0bWFwRGF0YSlcblx0e1xuXHRcdHRoaXMuX2dsb3NzTWFwID0gdmFsdWU7XG5cdFx0dGhpcy5pbnZhbGlkYXRlQ29udGVudCgpO1xuXHRcdFxuXHRcdHRoaXMuX3Rlc3RTaXplKCk7XG5cdH1cblx0XG5cdHByaXZhdGUgX3Rlc3RTaXplKClcblx0e1xuXHRcdHZhciB3Ok51bWJlciwgaDpOdW1iZXI7XG5cdFx0XG5cdFx0aWYgKHRoaXMuX3NwZWN1bGFyTWFwKSB7XG5cdFx0XHR3ID0gdGhpcy5fc3BlY3VsYXJNYXAud2lkdGg7XG5cdFx0XHRoID0gdGhpcy5fc3BlY3VsYXJNYXAuaGVpZ2h0O1xuXHRcdH0gZWxzZSBpZiAodGhpcy5fZ2xvc3NNYXApIHtcblx0XHRcdHcgPSB0aGlzLl9nbG9zc01hcC53aWR0aDtcblx0XHRcdGggPSB0aGlzLl9nbG9zc01hcC5oZWlnaHQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHcgPSAxO1xuXHRcdFx0aCA9IDE7XG5cdFx0fVxuXHRcdFxuXHRcdGlmICh3ICE9IHRoaXMuX2JpdG1hcERhdGEud2lkdGggJiYgaCAhPSB0aGlzLl9iaXRtYXBEYXRhLmhlaWdodCkge1xuXHRcdFx0dmFyIG9sZEJpdG1hcDpCaXRtYXBEYXRhID0gdGhpcy5fYml0bWFwRGF0YTtcblx0XHRcdHRoaXMuYml0bWFwRGF0YSA9IG5ldyBCaXRtYXBEYXRhKHRoaXMuX3NwZWN1bGFyTWFwLndpZHRoLCB0aGlzLl9zcGVjdWxhck1hcC5oZWlnaHQsIGZhbHNlLCAweGZmZmZmZik7XG5cdFx0XHRvbGRCaXRtYXAuZGlzcG9zZSgpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBfaUdldFRleHR1cmVEYXRhKCk6Qml0bWFwRGF0YVxuXHR7XG5cdFx0dmFyIHJlY3Q6UmVjdGFuZ2xlID0gdGhpcy5fc3BlY3VsYXJNYXAucmVjdDtcblx0XHR2YXIgb3JpZ2luOlBvaW50ID0gbmV3IFBvaW50KCk7XG5cblx0XHR0aGlzLl9iaXRtYXBEYXRhLmZpbGxSZWN0KHJlY3QsIDB4ZmZmZmZmKTtcblxuXHRcdGlmICh0aGlzLl9nbG9zc01hcClcblx0XHRcdHRoaXMuX2JpdG1hcERhdGEuY29weUNoYW5uZWwodGhpcy5fZ2xvc3NNYXAsIHJlY3QsIG9yaWdpbiwgQml0bWFwRGF0YUNoYW5uZWwuR1JFRU4sIEJpdG1hcERhdGFDaGFubmVsLkdSRUVOKTtcblxuXHRcdGlmICh0aGlzLl9zcGVjdWxhck1hcClcblx0XHRcdHRoaXMuX2JpdG1hcERhdGEuY29weUNoYW5uZWwodGhpcy5fc3BlY3VsYXJNYXAsIHJlY3QsIG9yaWdpbiwgQml0bWFwRGF0YUNoYW5uZWwuUkVELCBCaXRtYXBEYXRhQ2hhbm5lbC5SRUQpO1xuXG5cdFx0cmV0dXJuIHRoaXMuX2JpdG1hcERhdGE7XG5cdH1cbn1cblxuZXhwb3J0ID0gU3BlY3VsYXJCaXRtYXBUZXh0dXJlOyJdfQ==