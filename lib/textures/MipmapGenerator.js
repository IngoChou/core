var BitmapData = require("awayjs-core/lib/core/base/BitmapData");
var Matrix = require("awayjs-core/lib/core/geom/Matrix");
var Rectangle = require("awayjs-core/lib/core/geom/Rectangle");

/**
* MipmapGenerator is a helper class that uploads BitmapData to a Texture including mipmap levels.
*/
var MipmapGenerator = (function () {
    function MipmapGenerator() {
    }
    MipmapGenerator.generateMipMaps = function (source, output, alpha) {
        if (typeof alpha === "undefined") { alpha = false; }
        var w = source.width;
        var h = source.height;
        var i = 0;

        var mipmap;

        MipmapGenerator._rect.width = w;
        MipmapGenerator._rect.height = h;

        while (w >= 1 && h >= 1) {
            mipmap = output[i] = MipmapGenerator._getMipmapHolder(output[i], w, h);

            if (alpha)
                mipmap.fillRect(MipmapGenerator._rect, 0);

            MipmapGenerator._matrix.a = MipmapGenerator._rect.width / source.width;
            MipmapGenerator._matrix.d = MipmapGenerator._rect.height / source.height;

            mipmap.draw(source, MipmapGenerator._matrix); //TODO: smoothing?

            w >>= 1;
            h >>= 1;

            MipmapGenerator._rect.width = w > 1 ? w : 1;
            MipmapGenerator._rect.height = h > 1 ? h : 1;

            i++;
        }
    };

    MipmapGenerator._getMipmapHolder = function (mipMapHolder, newW, newH) {
        if (mipMapHolder) {
            if (mipMapHolder.width == newW && mipMapHolder.height == newH)
                return mipMapHolder;

            MipmapGenerator.freeMipMapHolder(mipMapHolder);
        }

        if (!MipmapGenerator._mipMaps[newW]) {
            MipmapGenerator._mipMaps[newW] = [];
            MipmapGenerator._mipMapUses[newW] = [];
        }

        if (!MipmapGenerator._mipMaps[newW][newH]) {
            mipMapHolder = MipmapGenerator._mipMaps[newW][newH] = new BitmapData(newW, newH, true);
            MipmapGenerator._mipMapUses[newW][newH] = 1;
        } else {
            MipmapGenerator._mipMapUses[newW][newH] = MipmapGenerator._mipMapUses[newW][newH] + 1;
            mipMapHolder = MipmapGenerator._mipMaps[newW][newH];
        }

        return mipMapHolder;
    };

    MipmapGenerator.freeMipMapHolder = function (mipMapHolder) {
        var holderWidth = mipMapHolder.width;
        var holderHeight = mipMapHolder.height;

        if (--MipmapGenerator._mipMapUses[holderWidth][holderHeight] == 0) {
            MipmapGenerator._mipMaps[holderWidth][holderHeight].dispose();
            MipmapGenerator._mipMaps[holderWidth][holderHeight] = null;
        }
    };
    MipmapGenerator._mipMaps = [];
    MipmapGenerator._mipMapUses = [];

    MipmapGenerator._matrix = new Matrix();
    MipmapGenerator._rect = new Rectangle();
    return MipmapGenerator;
})();

module.exports = MipmapGenerator;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHR1cmVzL01pcG1hcEdlbmVyYXRvci50cyJdLCJuYW1lcyI6WyJNaXBtYXBHZW5lcmF0b3IiLCJNaXBtYXBHZW5lcmF0b3IuY29uc3RydWN0b3IiLCJNaXBtYXBHZW5lcmF0b3IuZ2VuZXJhdGVNaXBNYXBzIiwiTWlwbWFwR2VuZXJhdG9yLl9nZXRNaXBtYXBIb2xkZXIiLCJNaXBtYXBHZW5lcmF0b3IuZnJlZU1pcE1hcEhvbGRlciJdLCJtYXBwaW5ncyI6IkFBQUEsZ0VBQXVFO0FBQ3ZFLHdEQUFnRTtBQUNoRSw4REFBcUU7O0FBRXJFOztFQUVHO0FBQ0g7SUFBQUE7SUFzRkFDLENBQUNBO0FBQUFELElBcEVBQSxrQ0FBQUEsVUFBOEJBLE1BQVVBLEVBQUVBLE1BQXlCQSxFQUFFQSxLQUFxQkE7UUFBckJFLG9DQUFBQSxLQUFLQSxHQUFXQSxLQUFLQTtBQUFBQSxRQUV6RkEsSUFBSUEsQ0FBQ0EsR0FBVUEsTUFBTUEsQ0FBQ0EsS0FBS0E7UUFDM0JBLElBQUlBLENBQUNBLEdBQVVBLE1BQU1BLENBQUNBLE1BQU1BO1FBQzVCQSxJQUFJQSxDQUFDQSxHQUFVQSxDQUFDQTs7UUFFaEJBLElBQUlBLE1BQU1BOztRQUVWQSxlQUFlQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQTtRQUMvQkEsZUFBZUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0E7O1FBRWhDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFFQTtZQUV4QkEsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsZUFBZUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTs7WUFFdEVBLElBQUlBLEtBQUtBO2dCQUNSQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxlQUFlQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTs7WUFFM0NBLGVBQWVBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLEdBQUdBLGVBQWVBLENBQUNBLEtBQUtBLENBQUNBLEtBQUtBLEdBQUNBLE1BQU1BLENBQUNBLEtBQUtBO1lBQ3BFQSxlQUFlQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxHQUFHQSxlQUFlQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFDQSxNQUFNQSxDQUFDQSxNQUFNQTs7WUFFdEVBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLGVBQWVBLENBQUNBLE9BQU9BLENBQUNBLEVBQUVBLGtCQUFrQkE7O1lBRWhFQSxDQUFDQSxLQUFLQSxDQUFDQTtZQUNQQSxDQUFDQSxLQUFLQSxDQUFDQTs7WUFFUEEsZUFBZUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7WUFDMUNBLGVBQWVBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUVBLENBQUNBLEdBQUdBLENBQUNBOztZQUUzQ0EsQ0FBQ0EsRUFBRUE7U0FDSEE7SUFDRkEsQ0FBQ0E7O0lBRURGLG1DQUFBQSxVQUFnQ0EsWUFBdUJBLEVBQUVBLElBQVdBLEVBQUVBLElBQVdBO1FBRWhGRyxJQUFJQSxZQUFZQSxDQUFFQTtZQUNqQkEsSUFBSUEsWUFBWUEsQ0FBQ0EsS0FBS0EsSUFBSUEsSUFBSUEsSUFBSUEsWUFBWUEsQ0FBQ0EsTUFBTUEsSUFBSUEsSUFBSUE7Z0JBQzVEQSxPQUFPQSxZQUFZQSxDQUFDQTs7WUFFckJBLGVBQWVBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7U0FDOUNBOztRQUVEQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFFQTtZQUNwQ0EsZUFBZUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsRUFBRUE7WUFDbkNBLGVBQWVBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLEVBQUVBO1NBQ3RDQTs7UUFFREEsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBRUE7WUFDMUNBLFlBQVlBLEdBQUdBLGVBQWVBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLFVBQVVBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBO1lBQ3RGQSxlQUFlQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQTtTQUMzQ0EsS0FBTUE7WUFDTkEsZUFBZUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsZUFBZUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7WUFDckZBLFlBQVlBLEdBQUdBLGVBQWVBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLElBQUlBLENBQUNBO1NBQ25EQTs7UUFFREEsT0FBT0EsWUFBWUE7SUFDcEJBLENBQUNBOztJQUVESCxtQ0FBQUEsVUFBK0JBLFlBQXVCQTtRQUVyREksSUFBSUEsV0FBV0EsR0FBVUEsWUFBWUEsQ0FBQ0EsS0FBS0E7UUFDM0NBLElBQUlBLFlBQVlBLEdBQVVBLFlBQVlBLENBQUNBLE1BQU1BOztRQUU3Q0EsSUFBSUEsRUFBRUEsZUFBZUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBRUE7WUFDbEVBLGVBQWVBLENBQUNBLFFBQVFBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1lBQzdEQSxlQUFlQSxDQUFDQSxRQUFRQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxZQUFZQSxDQUFDQSxHQUFHQSxJQUFJQTtTQUMxREE7SUFDRkEsQ0FBQ0E7SUFuRkRKLDJCQUEwQkEsRUFBRUE7SUFDNUJBLDhCQUE2QkEsRUFBRUE7O0lBRS9CQSwwQkFBZ0NBLElBQUlBLE1BQU1BLENBQUNBLENBQUNBO0lBQzVDQSx3QkFBaUNBLElBQUlBLFNBQVNBLENBQUNBLENBQUNBO0lBZ0ZqREEsdUJBQUNBO0FBQURBLENBQUNBLElBQUE7O0FBRUQsZ0NBQXlCLENBQUEiLCJmaWxlIjoidGV4dHVyZXMvTWlwbWFwR2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9yb2JiYXRlbWFuL1dlYnN0b3JtUHJvamVjdHMvYXdheWpzLWNvcmUvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJpdG1hcERhdGFcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2Jhc2UvQml0bWFwRGF0YVwiKTtcbmltcG9ydCBNYXRyaXhcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2NvcmUvZ2VvbS9NYXRyaXhcIik7XG5pbXBvcnQgUmVjdGFuZ2xlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9nZW9tL1JlY3RhbmdsZVwiKTtcblxuLyoqXG4gKiBNaXBtYXBHZW5lcmF0b3IgaXMgYSBoZWxwZXIgY2xhc3MgdGhhdCB1cGxvYWRzIEJpdG1hcERhdGEgdG8gYSBUZXh0dXJlIGluY2x1ZGluZyBtaXBtYXAgbGV2ZWxzLlxuICovXG5jbGFzcyBNaXBtYXBHZW5lcmF0b3Jcbntcblx0cHJpdmF0ZSBzdGF0aWMgX21pcE1hcHMgPSBbXTtcblx0cHJpdmF0ZSBzdGF0aWMgX21pcE1hcFVzZXMgPSBbXTtcblxuXHRwcml2YXRlIHN0YXRpYyBfbWF0cml4Ok1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcblx0cHJpdmF0ZSBzdGF0aWMgX3JlY3Q6UmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZSgpO1xuXHRwcml2YXRlIHN0YXRpYyBfc291cmNlOkJpdG1hcERhdGE7XG5cblx0LyoqXG5cdCAqIFVwbG9hZHMgYSBCaXRtYXBEYXRhIHdpdGggbWlwIG1hcHMgdG8gYSB0YXJnZXQgVGV4dHVyZSBvYmplY3QuXG5cdCAqIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSB0byB1cGxvYWQuXG5cdCAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBUZXh0dXJlIHRvIHVwbG9hZCB0by5cblx0ICogQHBhcmFtIG1pcG1hcCBBbiBvcHRpb25hbCBtaXAgbWFwIGhvbGRlciB0byBhdm9pZHMgY3JlYXRpbmcgbmV3IGluc3RhbmNlcyBmb3IgZmUgYW5pbWF0ZWQgbWF0ZXJpYWxzLlxuXHQgKiBAcGFyYW0gYWxwaGEgSW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhlIHVwbG9hZGVkIGJpdG1hcERhdGEgaXMgdHJhbnNwYXJlbnQuXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIGdlbmVyYXRlTWlwTWFwcyhzb3VyY2U6SFRNTEltYWdlRWxlbWVudCwgb3V0cHV0PzpBcnJheTxCaXRtYXBEYXRhPiwgYWxwaGE/OmJvb2xlYW4pO1xuXHRwdWJsaWMgc3RhdGljIGdlbmVyYXRlTWlwTWFwcyhzb3VyY2U6Qml0bWFwRGF0YSwgb3V0cHV0PzpBcnJheTxCaXRtYXBEYXRhPiwgYWxwaGE/OmJvb2xlYW4pO1xuXHRwdWJsaWMgc3RhdGljIGdlbmVyYXRlTWlwTWFwcyhzb3VyY2U6YW55LCBvdXRwdXQ/OkFycmF5PEJpdG1hcERhdGE+LCBhbHBoYTpib29sZWFuID0gZmFsc2UpXG5cdHtcblx0XHR2YXIgdzpudW1iZXIgPSBzb3VyY2Uud2lkdGg7XG5cdFx0dmFyIGg6bnVtYmVyID0gc291cmNlLmhlaWdodDtcblx0XHR2YXIgaTpudW1iZXIgPSAwO1xuXG5cdFx0dmFyIG1pcG1hcDpCaXRtYXBEYXRhO1xuXG5cdFx0TWlwbWFwR2VuZXJhdG9yLl9yZWN0LndpZHRoID0gdztcblx0XHRNaXBtYXBHZW5lcmF0b3IuX3JlY3QuaGVpZ2h0ID0gaDtcblxuXHRcdHdoaWxlICh3ID49IDEgJiYgaCA+PSAxKSB7XG5cblx0XHRcdG1pcG1hcCA9IG91dHB1dFtpXSA9IE1pcG1hcEdlbmVyYXRvci5fZ2V0TWlwbWFwSG9sZGVyKG91dHB1dFtpXSwgdywgaCk7XG5cblx0XHRcdGlmIChhbHBoYSlcblx0XHRcdFx0bWlwbWFwLmZpbGxSZWN0KE1pcG1hcEdlbmVyYXRvci5fcmVjdCwgMCk7XG5cblx0XHRcdE1pcG1hcEdlbmVyYXRvci5fbWF0cml4LmEgPSBNaXBtYXBHZW5lcmF0b3IuX3JlY3Qud2lkdGgvc291cmNlLndpZHRoO1xuXHRcdFx0TWlwbWFwR2VuZXJhdG9yLl9tYXRyaXguZCA9IE1pcG1hcEdlbmVyYXRvci5fcmVjdC5oZWlnaHQvc291cmNlLmhlaWdodDtcblxuXHRcdFx0bWlwbWFwLmRyYXcoc291cmNlLCBNaXBtYXBHZW5lcmF0b3IuX21hdHJpeCk7IC8vVE9ETzogc21vb3RoaW5nP1xuXG5cdFx0XHR3ID4+PSAxO1xuXHRcdFx0aCA+Pj0gMTtcblxuXHRcdFx0TWlwbWFwR2VuZXJhdG9yLl9yZWN0LndpZHRoID0gdyA+IDE/IHcgOiAxO1xuXHRcdFx0TWlwbWFwR2VuZXJhdG9yLl9yZWN0LmhlaWdodCA9IGggPiAxPyBoIDogMTtcblxuXHRcdFx0aSsrO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIF9nZXRNaXBtYXBIb2xkZXIobWlwTWFwSG9sZGVyOkJpdG1hcERhdGEsIG5ld1c6bnVtYmVyLCBuZXdIOm51bWJlcik6Qml0bWFwRGF0YVxuXHR7XG5cdFx0aWYgKG1pcE1hcEhvbGRlcikge1xuXHRcdFx0aWYgKG1pcE1hcEhvbGRlci53aWR0aCA9PSBuZXdXICYmIG1pcE1hcEhvbGRlci5oZWlnaHQgPT0gbmV3SClcblx0XHRcdFx0cmV0dXJuIG1pcE1hcEhvbGRlcjtcblxuXHRcdFx0TWlwbWFwR2VuZXJhdG9yLmZyZWVNaXBNYXBIb2xkZXIobWlwTWFwSG9sZGVyKTtcblx0XHR9XG5cblx0XHRpZiAoIU1pcG1hcEdlbmVyYXRvci5fbWlwTWFwc1tuZXdXXSkge1xuXHRcdFx0TWlwbWFwR2VuZXJhdG9yLl9taXBNYXBzW25ld1ddID0gW107XG5cdFx0XHRNaXBtYXBHZW5lcmF0b3IuX21pcE1hcFVzZXNbbmV3V10gPSBbXTtcblx0XHR9XG5cblx0XHRpZiAoIU1pcG1hcEdlbmVyYXRvci5fbWlwTWFwc1tuZXdXXVtuZXdIXSkge1xuXHRcdFx0bWlwTWFwSG9sZGVyID0gTWlwbWFwR2VuZXJhdG9yLl9taXBNYXBzW25ld1ddW25ld0hdID0gbmV3IEJpdG1hcERhdGEobmV3VywgbmV3SCwgdHJ1ZSk7XG5cdFx0XHRNaXBtYXBHZW5lcmF0b3IuX21pcE1hcFVzZXNbbmV3V11bbmV3SF0gPSAxO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRNaXBtYXBHZW5lcmF0b3IuX21pcE1hcFVzZXNbbmV3V11bbmV3SF0gPSBNaXBtYXBHZW5lcmF0b3IuX21pcE1hcFVzZXNbbmV3V11bbmV3SF0gKyAxO1xuXHRcdFx0bWlwTWFwSG9sZGVyID0gTWlwbWFwR2VuZXJhdG9yLl9taXBNYXBzW25ld1ddW25ld0hdO1xuXHRcdH1cblxuXHRcdHJldHVybiBtaXBNYXBIb2xkZXI7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGZyZWVNaXBNYXBIb2xkZXIobWlwTWFwSG9sZGVyOkJpdG1hcERhdGEpXG5cdHtcblx0XHR2YXIgaG9sZGVyV2lkdGg6bnVtYmVyID0gbWlwTWFwSG9sZGVyLndpZHRoO1xuXHRcdHZhciBob2xkZXJIZWlnaHQ6bnVtYmVyID0gbWlwTWFwSG9sZGVyLmhlaWdodDtcblxuXHRcdGlmICgtLU1pcG1hcEdlbmVyYXRvci5fbWlwTWFwVXNlc1tob2xkZXJXaWR0aF1baG9sZGVySGVpZ2h0XSA9PSAwKSB7XG5cdFx0XHRNaXBtYXBHZW5lcmF0b3IuX21pcE1hcHNbaG9sZGVyV2lkdGhdW2hvbGRlckhlaWdodF0uZGlzcG9zZSgpO1xuXHRcdFx0TWlwbWFwR2VuZXJhdG9yLl9taXBNYXBzW2hvbGRlcldpZHRoXVtob2xkZXJIZWlnaHRdID0gbnVsbDtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0ID0gTWlwbWFwR2VuZXJhdG9yOyJdfQ==