var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var PrimitivePrefabBase = require("awayjs-core/lib/prefabs/PrimitivePrefabBase");

/**
* A UV Sphere primitive mesh.
*/
var PrimitiveSpherePrefab = (function (_super) {
    __extends(PrimitiveSpherePrefab, _super);
    /**
    * Creates a new Sphere object.
    *
    * @param radius The radius of the sphere.
    * @param segmentsW Defines the number of horizontal segments that make up the sphere.
    * @param segmentsH Defines the number of vertical segments that make up the sphere.
    * @param yUp Defines whether the sphere poles should lay on the Y-axis (true) or on the Z-axis (false).
    */
    function PrimitiveSpherePrefab(radius, segmentsW, segmentsH, yUp) {
        if (typeof radius === "undefined") { radius = 50; }
        if (typeof segmentsW === "undefined") { segmentsW = 16; }
        if (typeof segmentsH === "undefined") { segmentsH = 12; }
        if (typeof yUp === "undefined") { yUp = true; }
        _super.call(this);

        this._radius = radius;
        this._segmentsW = segmentsW;
        this._segmentsH = segmentsH;
        this._yUp = yUp;
    }
    Object.defineProperty(PrimitiveSpherePrefab.prototype, "radius", {
        /**
        * The radius of the sphere.
        */
        get: function () {
            return this._radius;
        },
        set: function (value) {
            this._radius = value;

            this._pInvalidateGeometry();
        },
        enumerable: true,
        configurable: true
    });


    Object.defineProperty(PrimitiveSpherePrefab.prototype, "segmentsW", {
        /**
        * Defines the number of horizontal segments that make up the sphere. Defaults to 16.
        */
        get: function () {
            return this._segmentsW;
        },
        set: function (value) {
            this._segmentsW = value;

            this._pInvalidateGeometry();
            this._pInvalidateUVs();
        },
        enumerable: true,
        configurable: true
    });


    Object.defineProperty(PrimitiveSpherePrefab.prototype, "segmentsH", {
        /**
        * Defines the number of vertical segments that make up the sphere. Defaults to 12.
        */
        get: function () {
            return this._segmentsH;
        },
        set: function (value) {
            this._segmentsH = value;

            this._pInvalidateGeometry();
            this._pInvalidateUVs();
        },
        enumerable: true,
        configurable: true
    });


    Object.defineProperty(PrimitiveSpherePrefab.prototype, "yUp", {
        /**
        * Defines whether the sphere poles should lay on the Y-axis (true) or on the Z-axis (false).
        */
        get: function () {
            return this._yUp;
        },
        set: function (value) {
            this._yUp = value;

            this._pInvalidateGeometry();
        },
        enumerable: true,
        configurable: true
    });


    /**
    * @inheritDoc
    */
    PrimitiveSpherePrefab.prototype._pBuildGeometry = function (target, geometryType) {
        var indices;
        var positions;
        var normals;
        var tangents;

        var i;
        var j;
        var vidx, fidx;

        var comp1;
        var comp2;
        var numVertices;

        if (geometryType == "triangleSubGeometry") {
            var triangleGeometry = target;

            numVertices = (this._segmentsH + 1) * (this._segmentsW + 1);

            if (numVertices == triangleGeometry.numVertices && triangleGeometry.indices != null) {
                indices = triangleGeometry.indices;
                positions = triangleGeometry.positions;
                normals = triangleGeometry.vertexNormals;
                tangents = triangleGeometry.vertexTangents;
            } else {
                indices = new Array((this._segmentsH - 1) * this._segmentsW * 6);
                positions = new Array(numVertices * 3);
                normals = new Array(numVertices * 3);
                tangents = new Array(numVertices * 3);

                this._pInvalidateUVs();
            }

            vidx = 0;
            fidx = 0;

            var startIndex;
            var t1;
            var t2;

            for (j = 0; j <= this._segmentsH; ++j) {
                startIndex = vidx;

                var horangle = Math.PI * j / this._segmentsH;
                var z = -this._radius * Math.cos(horangle);
                var ringradius = this._radius * Math.sin(horangle);

                for (i = 0; i <= this._segmentsW; ++i) {
                    var verangle = 2 * Math.PI * i / this._segmentsW;
                    var x = ringradius * Math.cos(verangle);
                    var y = ringradius * Math.sin(verangle);
                    var normLen = 1 / Math.sqrt(x * x + y * y + z * z);
                    var tanLen = Math.sqrt(y * y + x * x);

                    if (this._yUp) {
                        t1 = 0;
                        t2 = tanLen > .007 ? x / tanLen : 0;
                        comp1 = -z;
                        comp2 = y;
                    } else {
                        t1 = tanLen > .007 ? x / tanLen : 0;
                        t2 = 0;
                        comp1 = y;
                        comp2 = z;
                    }

                    if (i == this._segmentsW) {
                        positions[vidx] = positions[startIndex];
                        positions[vidx + 1] = positions[startIndex + 1];
                        positions[vidx + 2] = positions[startIndex + 2];
                        normals[vidx] = normals[startIndex] + (x * normLen) * .5;
                        normals[vidx + 1] = normals[startIndex + 1] + (comp1 * normLen) * .5;
                        normals[vidx + 2] = normals[startIndex + 2] + (comp2 * normLen) * .5;
                        tangents[vidx] = tanLen > .007 ? -y / tanLen : 1;
                        tangents[vidx + 1] = t1;
                        tangents[vidx + 2] = t2;
                    } else {
                        positions[vidx] = x;
                        positions[vidx + 1] = comp1;
                        positions[vidx + 2] = comp2;
                        normals[vidx] = x * normLen;
                        normals[vidx + 1] = comp1 * normLen;
                        normals[vidx + 2] = comp2 * normLen;
                        tangents[vidx] = tanLen > .007 ? -y / tanLen : 1;
                        tangents[vidx + 1] = t1;
                        tangents[vidx + 2] = t2;
                    }

                    if (i > 0 && j > 0) {
                        var a = (this._segmentsW + 1) * j + i;
                        var b = (this._segmentsW + 1) * j + i - 1;
                        var c = (this._segmentsW + 1) * (j - 1) + i - 1;
                        var d = (this._segmentsW + 1) * (j - 1) + i;

                        if (j == this._segmentsH) {
                            positions[vidx] = positions[startIndex];
                            positions[vidx + 1] = positions[startIndex + 1];
                            positions[vidx + 2] = positions[startIndex + 2];

                            indices[fidx++] = a;
                            indices[fidx++] = c;
                            indices[fidx++] = d;
                        } else if (j == 1) {
                            indices[fidx++] = a;
                            indices[fidx++] = b;
                            indices[fidx++] = c;
                        } else {
                            indices[fidx++] = a;
                            indices[fidx++] = b;
                            indices[fidx++] = c;
                            indices[fidx++] = a;
                            indices[fidx++] = c;
                            indices[fidx++] = d;
                        }
                    }

                    vidx += 3;
                }
            }

            triangleGeometry.updateIndices(indices);

            triangleGeometry.updatePositions(positions);
            triangleGeometry.updateVertexNormals(normals);
            triangleGeometry.updateVertexTangents(tangents);
        } else if (geometryType == "lineSubGeometry") {
            var lineGeometry = target;

            var numSegments = (this._segmentsH - 1) * this._segmentsW * 2;
            var startPositions;
            var endPositions;
            var thickness;

            if (lineGeometry.indices != null && numSegments == lineGeometry.numSegments) {
                startPositions = lineGeometry.startPositions;
                endPositions = lineGeometry.endPositions;
                thickness = lineGeometry.thickness;
            } else {
                startPositions = new Array(numSegments * 3);
                endPositions = new Array(numSegments * 3);
                thickness = new Array(numSegments);
            }

            vidx = 0;

            fidx = 0;

            for (j = 0; j <= this._segmentsH; ++j) {
                var horangle = Math.PI * j / this._segmentsH;
                var z = -this._radius * Math.cos(horangle);
                var ringradius = this._radius * Math.sin(horangle);

                for (i = 0; i <= this._segmentsW; ++i) {
                    var verangle = 2 * Math.PI * i / this._segmentsW;
                    var x = ringradius * Math.cos(verangle);
                    var y = ringradius * Math.sin(verangle);

                    if (this._yUp) {
                        comp1 = -z;
                        comp2 = y;
                    } else {
                        comp1 = y;
                        comp2 = z;
                    }

                    if (i > 0 && j > 0) {
                        //horizonal lines
                        if (j < this._segmentsH) {
                            endPositions[vidx] = x;
                            endPositions[vidx + 1] = comp1;
                            endPositions[vidx + 2] = comp2;

                            thickness[fidx++] = 1;

                            vidx += 3;
                        }

                        //vertical lines
                        startPositions[vidx] = endPositions[vidx - this._segmentsW * 6];
                        startPositions[vidx + 1] = endPositions[vidx + 1 - this._segmentsW * 6];
                        startPositions[vidx + 2] = endPositions[vidx + 2 - this._segmentsW * 6];

                        endPositions[vidx] = x;
                        endPositions[vidx + 1] = comp1;
                        endPositions[vidx + 2] = comp2;

                        thickness[fidx++] = 1;

                        vidx += 3;
                    }

                    if (i < this._segmentsW && j > 0 && j < this._segmentsH) {
                        startPositions[vidx] = x;
                        startPositions[vidx + 1] = comp1;
                        startPositions[vidx + 2] = comp2;
                    }
                }
            }

            // build real data from raw data
            lineGeometry.updatePositions(startPositions, endPositions);
            lineGeometry.updateThickness(thickness);
        }
    };

    /**
    * @inheritDoc
    */
    PrimitiveSpherePrefab.prototype._pBuildUVs = function (target, geometryType) {
        var i, j;
        var numVertices = (this._segmentsH + 1) * (this._segmentsW + 1);
        var uvs;

        if (geometryType == "triangleSubGeometry") {
            numVertices = (this._segmentsH + 1) * (this._segmentsW + 1);

            var triangleGeometry = target;

            if (numVertices == triangleGeometry.numVertices && triangleGeometry.uvs != null) {
                uvs = triangleGeometry.uvs;
            } else {
                uvs = new Array(numVertices * 2);
            }

            var index = 0;
            for (j = 0; j <= this._segmentsH; ++j) {
                for (i = 0; i <= this._segmentsW; ++i) {
                    uvs[index++] = (i / this._segmentsW) * triangleGeometry.scaleU;
                    uvs[index++] = (j / this._segmentsH) * triangleGeometry.scaleV;
                }
            }

            triangleGeometry.updateUVs(uvs);
        } else if (geometryType == "lineSubGeometry") {
            //nothing to do here
        }
    };
    return PrimitiveSpherePrefab;
})(PrimitivePrefabBase);

module.exports = PrimitiveSpherePrefab;

//# sourceMappingURL=data:application/json;base64,