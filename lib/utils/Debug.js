var PartialImplementationError = require("awayjs-core/lib/errors/PartialImplementationError");

/**
*
*/
var Debug = (function () {
    function Debug() {
    }
    Debug.breakpoint = function () {
        Debug['break']();
    };

    Debug.throwPIROnKeyWordOnly = function (str, enable) {
        if (typeof enable === "undefined") { enable = true; }
        if (!enable)
            Debug.keyword = null;
        else
            Debug.keyword = str;
    };

    Debug.throwPIR = function (clss, fnc, msg) {
        Debug.logPIR('PartialImplementationError ' + clss, fnc, msg);

        if (Debug.THROW_ERRORS) {
            if (Debug.keyword) {
                var e = clss + fnc + msg;

                if (e.indexOf(Debug.keyword) == -1)
                    return;
            }

            throw new PartialImplementationError(clss + '.' + fnc + ': ' + msg);
        }
    };

    Debug.logPIR = function (clss, fnc, msg) {
        if (typeof msg === "undefined") { msg = ''; }
        if (Debug.LOG_PI_ERRORS)
            console.log(clss + '.' + fnc + ': ' + msg);
    };

    Debug.log = function () {
        var args = [];
        for (var _i = 0; _i < (arguments.length - 0); _i++) {
            args[_i] = arguments[_i + 0];
        }
        if (Debug.ENABLE_LOG)
            console.log(args);
    };
    Debug.THROW_ERRORS = true;
    Debug.ENABLE_LOG = true;
    Debug.LOG_PI_ERRORS = true;

    Debug.keyword = null;
    return Debug;
})();

module.exports = Debug;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzL0RlYnVnLnRzIl0sIm5hbWVzIjpbIkRlYnVnIiwiRGVidWcuY29uc3RydWN0b3IiLCJEZWJ1Zy5icmVha3BvaW50IiwiRGVidWcudGhyb3dQSVJPbktleVdvcmRPbmx5IiwiRGVidWcudGhyb3dQSVIiLCJEZWJ1Zy5sb2dQSVIiLCJEZWJ1Zy5sb2ciXSwibWFwcGluZ3MiOiJBQUFBLDZGQUFpRzs7QUFFakc7O0VBRUc7QUFDSDtJQUFBQTtJQWdEQUMsQ0FBQ0E7QUFBQUQsSUF4Q0FBLG1CQUFBQTtRQUVDRSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNqQkEsQ0FBQ0E7O0lBRURGLDhCQUFBQSxVQUFvQ0EsR0FBVUEsRUFBRUEsTUFBcUJBO1FBQXJCRyxxQ0FBQUEsTUFBTUEsR0FBV0EsSUFBSUE7QUFBQUEsUUFFcEVBLElBQUlBLENBQUNBLE1BQU1BO1lBQ1ZBLEtBQUtBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBOztZQUVwQkEsS0FBS0EsQ0FBQ0EsT0FBT0EsR0FBR0EsR0FBR0EsQ0FBQ0E7SUFDdEJBLENBQUNBOztJQUVESCxpQkFBQUEsVUFBdUJBLElBQVdBLEVBQUVBLEdBQVVBLEVBQUVBLEdBQVVBO1FBRXpESSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSw2QkFBNkJBLEdBQUdBLElBQUlBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLENBQUNBOztRQUU1REEsSUFBSUEsS0FBS0EsQ0FBQ0EsWUFBWUEsQ0FBRUE7WUFDdkJBLElBQUlBLEtBQUtBLENBQUNBLE9BQU9BLENBQUVBO2dCQUNsQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsSUFBSUEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0E7O2dCQUUvQkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ2pDQSxNQUFPQSxDQUFBQTthQUNSQTs7WUFFREEsTUFBTUEsSUFBSUEsMEJBQTBCQSxDQUFDQSxJQUFJQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxJQUFJQSxHQUFHQSxHQUFHQSxDQUFDQTtTQUNuRUE7SUFDRkEsQ0FBQ0E7O0lBRURKLGVBQUFBLFVBQXNCQSxJQUFXQSxFQUFFQSxHQUFVQSxFQUFFQSxHQUFlQTtRQUFmSyxrQ0FBQUEsR0FBR0EsR0FBVUEsRUFBRUE7QUFBQUEsUUFFN0RBLElBQUlBLEtBQUtBLENBQUNBLGFBQWFBO1lBQ3RCQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxJQUFJQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUM3Q0EsQ0FBQ0E7O0lBRURMLFlBQUFBO1FBQWtCTSxJQUFHQSxJQUFJQTtBQUFNQSxhQUFiQSxXQUFhQSxDQUFiQSwyQkFBYUEsRUFBYkEsSUFBYUE7WUFBYkEsNkJBQWFBOztRQUU5QkEsSUFBSUEsS0FBS0EsQ0FBQ0EsVUFBVUE7WUFDbkJBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0lBQ3BCQSxDQUFDQTtJQTdDRE4scUJBQXFDQSxJQUFJQTtJQUN6Q0EsbUJBQW1DQSxJQUFJQTtJQUN2Q0Esc0JBQXNDQSxJQUFJQTs7SUFFMUNBLGdCQUFnQ0EsSUFBSUE7SUEwQ3JDQSxhQUFDQTtBQUFEQSxDQUFDQSxJQUFBOztBQUVELHNCQUFlLENBQUEiLCJmaWxlIjoidXRpbHMvRGVidWcuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3JvYmJhdGVtYW4vV2Vic3Rvcm1Qcm9qZWN0cy9hd2F5anMtY29yZS8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGFydGlhbEltcGxlbWVudGF0aW9uRXJyb3JcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9lcnJvcnMvUGFydGlhbEltcGxlbWVudGF0aW9uRXJyb3JcIik7XG5cbi8qKlxuICpcbiAqL1xuY2xhc3MgRGVidWdcbntcblx0cHVibGljIHN0YXRpYyBUSFJPV19FUlJPUlM6Ym9vbGVhbiA9IHRydWU7XG5cdHB1YmxpYyBzdGF0aWMgRU5BQkxFX0xPRzpib29sZWFuID0gdHJ1ZTtcblx0cHVibGljIHN0YXRpYyBMT0dfUElfRVJST1JTOmJvb2xlYW4gPSB0cnVlO1xuXG5cdHByaXZhdGUgc3RhdGljIGtleXdvcmQ6c3RyaW5nID0gbnVsbDtcblxuXHRwdWJsaWMgc3RhdGljIGJyZWFrcG9pbnQoKTp2b2lkXG5cdHtcblx0XHREZWJ1Z1snYnJlYWsnXSgpO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyB0aHJvd1BJUk9uS2V5V29yZE9ubHkoc3RyOnN0cmluZywgZW5hYmxlOmJvb2xlYW4gPSB0cnVlKVxuXHR7XG5cdFx0aWYgKCFlbmFibGUpXG5cdFx0XHREZWJ1Zy5rZXl3b3JkID0gbnVsbDtcblx0XHRlbHNlXG5cdFx0XHREZWJ1Zy5rZXl3b3JkID0gc3RyO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyB0aHJvd1BJUihjbHNzOnN0cmluZywgZm5jOnN0cmluZywgbXNnOnN0cmluZylcblx0e1xuXHRcdERlYnVnLmxvZ1BJUignUGFydGlhbEltcGxlbWVudGF0aW9uRXJyb3IgJyArIGNsc3MsIGZuYywgbXNnKTtcblxuXHRcdGlmIChEZWJ1Zy5USFJPV19FUlJPUlMpIHtcblx0XHRcdGlmIChEZWJ1Zy5rZXl3b3JkKSB7XG5cdFx0XHRcdHZhciBlOnN0cmluZyA9IGNsc3MgKyBmbmMgKyBtc2c7XG5cblx0XHRcdFx0aWYgKGUuaW5kZXhPZihEZWJ1Zy5rZXl3b3JkKSA9PSAtMSlcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHRocm93IG5ldyBQYXJ0aWFsSW1wbGVtZW50YXRpb25FcnJvcihjbHNzICsgJy4nICsgZm5jICsgJzogJyArIG1zZyk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgbG9nUElSKGNsc3M6c3RyaW5nLCBmbmM6c3RyaW5nLCBtc2c6c3RyaW5nID0gJycpXG5cdHtcblx0XHRpZiAoRGVidWcuTE9HX1BJX0VSUk9SUylcblx0XHRcdGNvbnNvbGUubG9nKGNsc3MgKyAnLicgKyBmbmMgKyAnOiAnICsgbXNnKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgbG9nKC4uLmFyZ3M6YW55W10pXG5cdHtcblx0XHRpZiAoRGVidWcuRU5BQkxFX0xPRylcblx0XHRcdGNvbnNvbGUubG9nKGFyZ3MpO1xuXHR9XG59XG5cbmV4cG9ydCA9IERlYnVnOyJdfQ==