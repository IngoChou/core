var PartialImplementationError = require("awayjs-core/lib/errors/PartialImplementationError");
/**
 *
 */
var Debug = (function () {
    function Debug() {
    }
    Debug.breakpoint = function () {
        Debug['break']();
    };
    Debug.throwPIROnKeyWordOnly = function (str, enable) {
        if (enable === void 0) { enable = true; }
        if (!enable)
            Debug.keyword = null;
        else
            Debug.keyword = str;
    };
    Debug.throwPIR = function (clss, fnc, msg) {
        Debug.logPIR('PartialImplementationError ' + clss, fnc, msg);
        if (Debug.THROW_ERRORS) {
            if (Debug.keyword) {
                var e = clss + fnc + msg;
                if (e.indexOf(Debug.keyword) == -1)
                    return;
            }
            throw new PartialImplementationError(clss + '.' + fnc + ': ' + msg);
        }
    };
    Debug.logPIR = function (clss, fnc, msg) {
        if (msg === void 0) { msg = ''; }
        if (Debug.LOG_PI_ERRORS)
            console.log(clss + '.' + fnc + ': ' + msg);
    };
    Debug.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        if (Debug.ENABLE_LOG)
            console.log(args);
    };
    Debug.THROW_ERRORS = true;
    Debug.ENABLE_LOG = true;
    Debug.LOG_PI_ERRORS = true;
    Debug.keyword = null;
    return Debug;
})();
module.exports = Debug;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi91dGlscy9EZWJ1Zy50cyJdLCJuYW1lcyI6WyJEZWJ1ZyIsIkRlYnVnLmNvbnN0cnVjdG9yIiwiRGVidWcuYnJlYWtwb2ludCIsIkRlYnVnLnRocm93UElST25LZXlXb3JkT25seSIsIkRlYnVnLnRocm93UElSIiwiRGVidWcubG9nUElSIiwiRGVidWcubG9nIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFPLDBCQUEwQixXQUFXLG1EQUFtRCxDQUFDLENBQUM7QUFFakcsQUFHQTs7R0FERztJQUNHLEtBQUs7SUFBWEEsU0FBTUEsS0FBS0E7SUFnRFhDLENBQUNBO0lBeENjRCxnQkFBVUEsR0FBeEJBO1FBRUNFLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLEVBQUVBLENBQUNBO0lBQ2xCQSxDQUFDQTtJQUVhRiwyQkFBcUJBLEdBQW5DQSxVQUFvQ0EsR0FBVUEsRUFBRUEsTUFBcUJBO1FBQXJCRyxzQkFBcUJBLEdBQXJCQSxhQUFxQkE7UUFFcEVBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBO1lBQ1hBLEtBQUtBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBO1FBQ3RCQSxJQUFJQTtZQUNIQSxLQUFLQSxDQUFDQSxPQUFPQSxHQUFHQSxHQUFHQSxDQUFDQTtJQUN0QkEsQ0FBQ0E7SUFFYUgsY0FBUUEsR0FBdEJBLFVBQXVCQSxJQUFXQSxFQUFFQSxHQUFVQSxFQUFFQSxHQUFVQTtRQUV6REksS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsNkJBQTZCQSxHQUFHQSxJQUFJQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUU3REEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDeEJBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO2dCQUNuQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsSUFBSUEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7Z0JBRWhDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDbENBLE1BQU1BLENBQUNBO1lBQ1RBLENBQUNBO1lBRURBLE1BQU1BLElBQUlBLDBCQUEwQkEsQ0FBQ0EsSUFBSUEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDckVBLENBQUNBO0lBQ0ZBLENBQUNBO0lBRWNKLFlBQU1BLEdBQXJCQSxVQUFzQkEsSUFBV0EsRUFBRUEsR0FBVUEsRUFBRUEsR0FBZUE7UUFBZkssbUJBQWVBLEdBQWZBLFFBQWVBO1FBRTdEQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxhQUFhQSxDQUFDQTtZQUN2QkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFDN0NBLENBQUNBO0lBRWFMLFNBQUdBLEdBQWpCQTtRQUFrQk0sY0FBYUE7YUFBYkEsV0FBYUEsQ0FBYkEsc0JBQWFBLENBQWJBLElBQWFBO1lBQWJBLDZCQUFhQTs7UUFFOUJBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLENBQUNBO1lBQ3BCQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUNwQkEsQ0FBQ0E7SUE3Q2FOLGtCQUFZQSxHQUFXQSxJQUFJQSxDQUFDQTtJQUM1QkEsZ0JBQVVBLEdBQVdBLElBQUlBLENBQUNBO0lBQzFCQSxtQkFBYUEsR0FBV0EsSUFBSUEsQ0FBQ0E7SUFFNUJBLGFBQU9BLEdBQVVBLElBQUlBLENBQUNBO0lBMEN0Q0EsWUFBQ0E7QUFBREEsQ0FoREEsQUFnRENBLElBQUE7QUFFRCxBQUFlLGlCQUFOLEtBQUssQ0FBQyIsImZpbGUiOiJ1dGlscy9EZWJ1Zy5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGFydGlhbEltcGxlbWVudGF0aW9uRXJyb3JcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9lcnJvcnMvUGFydGlhbEltcGxlbWVudGF0aW9uRXJyb3JcIik7XHJcblxyXG4vKipcclxuICpcclxuICovXHJcbmNsYXNzIERlYnVnXHJcbntcclxuXHRwdWJsaWMgc3RhdGljIFRIUk9XX0VSUk9SUzpib29sZWFuID0gdHJ1ZTtcclxuXHRwdWJsaWMgc3RhdGljIEVOQUJMRV9MT0c6Ym9vbGVhbiA9IHRydWU7XHJcblx0cHVibGljIHN0YXRpYyBMT0dfUElfRVJST1JTOmJvb2xlYW4gPSB0cnVlO1xyXG5cclxuXHRwcml2YXRlIHN0YXRpYyBrZXl3b3JkOnN0cmluZyA9IG51bGw7XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgYnJlYWtwb2ludCgpOnZvaWRcclxuXHR7XHJcblx0XHREZWJ1Z1snYnJlYWsnXSgpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyB0aHJvd1BJUk9uS2V5V29yZE9ubHkoc3RyOnN0cmluZywgZW5hYmxlOmJvb2xlYW4gPSB0cnVlKVxyXG5cdHtcclxuXHRcdGlmICghZW5hYmxlKVxyXG5cdFx0XHREZWJ1Zy5rZXl3b3JkID0gbnVsbDtcclxuXHRcdGVsc2VcclxuXHRcdFx0RGVidWcua2V5d29yZCA9IHN0cjtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgdGhyb3dQSVIoY2xzczpzdHJpbmcsIGZuYzpzdHJpbmcsIG1zZzpzdHJpbmcpXHJcblx0e1xyXG5cdFx0RGVidWcubG9nUElSKCdQYXJ0aWFsSW1wbGVtZW50YXRpb25FcnJvciAnICsgY2xzcywgZm5jLCBtc2cpO1xyXG5cclxuXHRcdGlmIChEZWJ1Zy5USFJPV19FUlJPUlMpIHtcclxuXHRcdFx0aWYgKERlYnVnLmtleXdvcmQpIHtcclxuXHRcdFx0XHR2YXIgZTpzdHJpbmcgPSBjbHNzICsgZm5jICsgbXNnO1xyXG5cclxuXHRcdFx0XHRpZiAoZS5pbmRleE9mKERlYnVnLmtleXdvcmQpID09IC0xKVxyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aHJvdyBuZXcgUGFydGlhbEltcGxlbWVudGF0aW9uRXJyb3IoY2xzcyArICcuJyArIGZuYyArICc6ICcgKyBtc2cpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBzdGF0aWMgbG9nUElSKGNsc3M6c3RyaW5nLCBmbmM6c3RyaW5nLCBtc2c6c3RyaW5nID0gJycpXHJcblx0e1xyXG5cdFx0aWYgKERlYnVnLkxPR19QSV9FUlJPUlMpXHJcblx0XHRcdGNvbnNvbGUubG9nKGNsc3MgKyAnLicgKyBmbmMgKyAnOiAnICsgbXNnKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgbG9nKC4uLmFyZ3M6YW55W10pXHJcblx0e1xyXG5cdFx0aWYgKERlYnVnLkVOQUJMRV9MT0cpXHJcblx0XHRcdGNvbnNvbGUubG9nKGFyZ3MpO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0ID0gRGVidWc7Il19