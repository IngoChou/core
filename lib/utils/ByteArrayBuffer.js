var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ByteArrayBase = require("awayjs-core/lib/utils/ByteArrayBase");
var ByteArrayBuffer = (function (_super) {
    __extends(ByteArrayBuffer, _super);
    function ByteArrayBuffer() {
        _super.call(this);
        this._bytes = [];
        this._mode = "Array";
    }
    ByteArrayBuffer.prototype.writeByte = function (b) {
        var bi = ~~b;
        this._bytes[this.position++] = bi;
        if (this.position > this.length) {
            this.length = this.position;
        }
    };
    ByteArrayBuffer.prototype.readByte = function () {
        if (this.position >= this.length) {
            throw "ByteArray out of bounds read. Position=" + this.position + ", Length=" + this.length;
        }
        return this._bytes[this.position++];
    };
    ByteArrayBuffer.prototype.writeUnsignedByte = function (b) {
        var bi = ~~b;
        this._bytes[this.position++] = bi & 0xff;
        if (this.position > this.length) {
            this.length = this.position;
        }
    };
    ByteArrayBuffer.prototype.readUnsignedByte = function () {
        if (this.position >= this.length) {
            throw "ByteArray out of bounds read. Position=" + this.position + ", Length=" + this.length;
        }
        return this._bytes[this.position++];
    };
    ByteArrayBuffer.prototype.writeUnsignedShort = function (b) {
        var bi = ~~b;
        this._bytes[this.position++] = bi & 0xff;
        this._bytes[this.position++] = (bi >> 8) & 0xff;
        if (this.position > this.length) {
            this.length = this.position;
        }
    };
    ByteArrayBuffer.prototype.readUnsignedShort = function () {
        if (this.position + 2 > this.length) {
            throw "ByteArray out of bounds read. Position=" + this.position + ", Length=" + this.length;
        }
        var r = this._bytes[this.position] | (this._bytes[this.position + 1] << 8);
        this.position += 2;
        return r;
    };
    ByteArrayBuffer.prototype.writeUnsignedInt = function (b) {
        var bi = ~~b;
        this._bytes[this.position++] = bi & 0xff;
        this._bytes[this.position++] = (bi >>> 8) & 0xff;
        this._bytes[this.position++] = (bi >>> 16) & 0xff;
        this._bytes[this.position++] = (bi >>> 24) & 0xff;
        if (this.position > this.length) {
            this.length = this.position;
        }
    };
    ByteArrayBuffer.prototype.readUnsignedInt = function () {
        if (this.position + 4 > this.length) {
            throw "ByteArray out of bounds read. Position=" + this.position + ", Length=" + this.length;
        }
        var r = this._bytes[this.position] | (this._bytes[this.position + 1] << 8) | (this._bytes[this.position + 2] << 16) | (this._bytes[this.position + 3] << 24);
        this.position += 4;
        return r >>> 0;
    };
    ByteArrayBuffer.prototype.writeFloat = function (b) {
        // this is crazy slow and silly, but as a fallback...
        this.writeUnsignedInt(this.toFloatBits(Number(b)));
    };
    ByteArrayBuffer.prototype.toFloatBits = function (x) {
        // don't handle inf/nan yet
        // special case zero
        if (x == 0) {
            return 0;
        }
        // remove the sign, after this we only deal with positive numbers
        var sign = 0;
        if (x < 0) {
            x = -x;
            sign = 1;
        }
        else {
            sign = 0;
        }
        // a float value is now defined as: x = (1+(mantissa*2^-23))*(2^(exponent-127))
        var exponent = Math.log(x) / Math.log(2); // rough exponent
        exponent = Math.floor(exponent);
        x = x * Math.pow(2, 23 - exponent); // normalize to 24 bits
        var mantissa = Math.floor(x) - 0x800000;
        exponent = exponent + 127;
        return ((sign << 31) >>> 0) | (exponent << 23) | mantissa;
    };
    ByteArrayBuffer.prototype.readFloat = function (b) {
        return this.fromFloatBits(this.readUnsignedInt());
    };
    ByteArrayBuffer.prototype.fromFloatBits = function (x) {
        if (x == 0) {
            return 0;
        }
        var exponent = (x >>> 23) & 0xff;
        var mantissa = (x & 0x7fffff) | 0x800000;
        var y = Math.pow(2, (exponent - 127) - 23) * mantissa;
        if (x >>> 31 != 0) {
            y = -y;
        }
        return y;
    };
    return ByteArrayBuffer;
})(ByteArrayBase);
module.exports = ByteArrayBuffer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi91dGlscy9ieXRlYXJyYXlidWZmZXIudHMiXSwibmFtZXMiOlsiQnl0ZUFycmF5QnVmZmVyIiwiQnl0ZUFycmF5QnVmZmVyLmNvbnN0cnVjdG9yIiwiQnl0ZUFycmF5QnVmZmVyLndyaXRlQnl0ZSIsIkJ5dGVBcnJheUJ1ZmZlci5yZWFkQnl0ZSIsIkJ5dGVBcnJheUJ1ZmZlci53cml0ZVVuc2lnbmVkQnl0ZSIsIkJ5dGVBcnJheUJ1ZmZlci5yZWFkVW5zaWduZWRCeXRlIiwiQnl0ZUFycmF5QnVmZmVyLndyaXRlVW5zaWduZWRTaG9ydCIsIkJ5dGVBcnJheUJ1ZmZlci5yZWFkVW5zaWduZWRTaG9ydCIsIkJ5dGVBcnJheUJ1ZmZlci53cml0ZVVuc2lnbmVkSW50IiwiQnl0ZUFycmF5QnVmZmVyLnJlYWRVbnNpZ25lZEludCIsIkJ5dGVBcnJheUJ1ZmZlci53cml0ZUZsb2F0IiwiQnl0ZUFycmF5QnVmZmVyLnRvRmxvYXRCaXRzIiwiQnl0ZUFycmF5QnVmZmVyLnJlYWRGbG9hdCIsIkJ5dGVBcnJheUJ1ZmZlci5mcm9tRmxvYXRCaXRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLGFBQWEsV0FBYSxxQ0FBcUMsQ0FBQyxDQUFDO0FBRXhFLElBQU0sZUFBZTtJQUFTQSxVQUF4QkEsZUFBZUEsVUFBc0JBO0lBVzFDQSxTQVhLQSxlQUFlQTtRQWFuQkMsaUJBQU9BLENBQUNBO1FBQ1JBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLEVBQUVBLENBQUNBO1FBQ2pCQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxPQUFPQSxDQUFDQTtJQUN0QkEsQ0FBQ0E7SUFFTUQsbUNBQVNBLEdBQWhCQSxVQUFpQkEsQ0FBUUE7UUFFeEJFLElBQUlBLEVBQUVBLEdBQVVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3BCQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFFQSxHQUFHQSxFQUFF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SUEsQ0FBQ0EsTUFBTUEsQ0FBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBRUEsR0FBR0EsQ0FBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsQ0FBQ0EsQ0FBRUEsSUFBSUEsQ0FBQ0EsQ0FBRUEsQ0FBQ0E7UUFDeEZBLElBQUlBLENBQUNBLFFBQVFBLElBQUlBLENBQUNBLENBQUNBO1FBQ25CQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNWQSxDQUFDQTtJQUVNUCwwQ0FBZ0JBLEdBQXZCQSxVQUF3QkEsQ0FBUUE7UUFFL0JRLElBQUlBLEVBQUVBLEdBQVVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3BCQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUMzQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBRUEsR0FBR0EsQ0FBQ0EsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDbkRBLElBQUlBLENBQUNBLE1BQU1BLENBQUVBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLENBQUVBLEdBQUdBLENBQUNBLEVBQUVBLEtBQUtBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO1FBQ3BEQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFFQSxHQUFHQSxDQUFDQSxFQUFFQSxLQUFLQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUNwREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakNBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO1FBQzdCQSxDQUFDQTtJ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QSxDQUFDQTtJQUMvREEsQ0FBQ0E7SUFFTVgsbUNBQVNBLEdBQWhCQSxVQUFpQkEsQ0FBUUE7UUFFeEJZLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLEVBQUVBLENBQUNBLENBQUNBO0lBQ25EQSxDQUFDQTtJQUVNWix1Q0FBYUEsR0FBcEJBLFVBQXFCQSxDQUFRQTtRQUU1QmEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDWkEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDVkEsQ0FBQ0E7UUFDREEsSUFBSUEsUUFBUUEsR0FBVUEsQ0FBRUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBRUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDMUNBLElBQUlBLFFBQVFBLEdBQVVBLENBQUVBLENBQUNBLEdBQUdBLFFBQVFBLENBQUVBLEdBQUdBLFFBQVFBLENBQUNBO1FBQ2xEQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFFQSxRQUFRQSxHQUFHQSxHQUFHQSxDQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxHQUFDQSxRQUFRQSxDQUFDQTtRQUN0REEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkJBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ1JBLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO0lBQ1ZBLENBQUNBO0lBcUJGYixzQkFBQ0E7QUFBREEsQ0FuS0EsQUFtS0NBLEVBbks2QixhQUFhLEVBbUsxQztBQUVELEFBQXlCLGlCQUFoQixlQUFlLENBQUMiLCJmaWxlIjoidXRpbHMvQnl0ZUFycmF5QnVmZmVyLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCeXRlQXJyYXlCYXNlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL0J5dGVBcnJheUJhc2VcIik7XG5cbmNsYXNzIEJ5dGVBcnJheUJ1ZmZlciBleHRlbmRzIEJ5dGVBcnJheUJhc2VcbntcblxuXHQvKlxuXHQgcHVibGljIG1heGxlbmd0aDpudW1iZXIgPSAwO1xuXHQgcHVibGljIGFycmF5Ynl0ZXM7IC8vQXJyYXlCdWZmZXJcblx0IHB1YmxpYyB1bmFsaWduZWRhcnJheWJ5dGVzdGVtcDsgLy9BcnJheUJ1ZmZlclxuXHQgKi9cblxuXHRwdWJsaWMgX2J5dGVzOm51bWJlcltdO1xuXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5fYnl0ZXMgPSBbXTtcblx0XHR0aGlzLl9tb2RlID0gXCJBcnJheVwiO1xuXHR9XG5cblx0cHVibGljIHdyaXRlQnl0ZShiOm51bWJlcilcblx0e1xuXHRcdHZhciBiaTpudW1iZXIgPSB+fmI7XG5cdFx0dGhpcy5fYnl0ZXNbIHRoaXMucG9zaXRpb24rKyBdID0gYmk7XG5cdFx0aWYgKHRoaXMucG9zaXRpb24gPiB0aGlzLmxlbmd0aCkge1xuXHRcdFx0dGhpcy5sZW5ndGggPSB0aGlzLnBvc2l0aW9uO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyByZWFkQnl0ZSgpOm51bWJlclxuXHR7XG5cdFx0aWYgKHRoaXMucG9zaXRpb24gPj0gdGhpcy5sZW5ndGgpIHtcblx0XHRcdHRocm93IFwiQnl0ZUFycmF5IG91dCBvZiBib3VuZHMgcmVhZC4gUG9zaXRpb249XCIgKyB0aGlzLnBvc2l0aW9uICsgXCIsIExlbmd0aD1cIiArIHRoaXMubGVuZ3RoO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5fYnl0ZXNbIHRoaXMucG9zaXRpb24rKyBdO1xuXHR9XG5cblx0cHVibGljIHdyaXRlVW5zaWduZWRCeXRlKGI6bnVtYmVyKVxuXHR7XG5cdFx0dmFyIGJpOm51bWJlciA9IH5+Yjtcblx0XHR0aGlzLl9ieXRlc1t0aGlzLnBvc2l0aW9uKytdID0gYmkgJiAweGZmO1xuXHRcdGlmICh0aGlzLnBvc2l0aW9uID4gdGhpcy5sZW5ndGgpIHtcblx0XHRcdHRoaXMubGVuZ3RoID0gdGhpcy5wb3NpdGlvbjtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgcmVhZFVuc2lnbmVkQnl0ZSgpOm51bWJlclxuXHR7XG5cdFx0aWYgKHRoaXMucG9zaXRpb24gPj0gdGhpcy5sZW5ndGgpIHtcblx0XHRcdHRocm93IFwiQnl0ZUFycmF5IG91dCBvZiBib3VuZHMgcmVhZC4gUG9zaXRpb249XCIgKyB0aGlzLnBvc2l0aW9uICsgXCIsIExlbmd0aD1cIiArIHRoaXMubGVuZ3RoO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5fYnl0ZXNbIHRoaXMucG9zaXRpb24rKyBdO1xuXHR9XG5cblx0cHVibGljIHdyaXRlVW5zaWduZWRTaG9ydChiOm51bWJlcilcblx0e1xuXHRcdHZhciBiaTpudW1iZXIgPSB+fmI7XG5cdFx0dGhpcy5fYnl0ZXNbIHRoaXMucG9zaXRpb24rKyBdID0gYmkgJiAweGZmO1xuXHRcdHRoaXMuX2J5dGVzWyB0aGlzLnBvc2l0aW9uKysgXSA9IChiaSA+PiA4KSAmIDB4ZmY7XG5cdFx0aWYgKHRoaXMucG9zaXRpb24gPiB0aGlzLmxlbmd0aCkge1xuXHRcdFx0dGhpcy5sZW5ndGggPSB0aGlzLnBvc2l0aW9uO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyByZWFkVW5zaWduZWRTaG9ydCgpOm51bWJlclxuXHR7XG5cdFx0aWYgKHRoaXMucG9zaXRpb24gKyAyID4gdGhpcy5sZW5ndGgpIHtcblx0XHRcdHRocm93IFwiQnl0ZUFycmF5IG91dCBvZiBib3VuZHMgcmVhZC4gUG9zaXRpb249XCIgKyB0aGlzLnBvc2l0aW9uICsgXCIsIExlbmd0aD1cIiArIHRoaXMubGVuZ3RoO1xuXHRcdH1cblx0XHR2YXIgcjpudW1iZXIgPSB0aGlzLl9ieXRlc1sgdGhpcy5wb3NpdGlvbiBdIHwgKCB0aGlzLl9ieXRlc1sgdGhpcy5wb3NpdGlvbiArIDEgXSA8PCA4ICk7XG5cdFx0dGhpcy5wb3NpdGlvbiArPSAyO1xuXHRcdHJldHVybiByO1xuXHR9XG5cblx0cHVibGljIHdyaXRlVW5zaWduZWRJbnQoYjpudW1iZXIpXG5cdHtcblx0XHR2YXIgYmk6bnVtYmVyID0gfn5iO1xuXHRcdHRoaXMuX2J5dGVzWyB0aGlzLnBvc2l0aW9uKysgXSA9IGJpICYgMHhmZjtcblx0XHR0aGlzLl9ieXRlc1sgdGhpcy5wb3NpdGlvbisrIF0gPSAoYmkgPj4+IDgpICYgMHhmZjtcblx0XHR0aGlzLl9ieXRlc1sgdGhpcy5wb3NpdGlvbisrIF0gPSAoYmkgPj4+IDE2KSAmIDB4ZmY7XG5cdFx0dGhpcy5fYnl0ZXNbIHRoaXMucG9zaXRpb24rKyBdID0gKGJpID4+PiAyNCkgJiAweGZmO1xuXHRcdGlmICh0aGlzLnBvc2l0aW9uID4gdGhpcy5sZW5ndGgpIHtcblx0XHRcdHRoaXMubGVuZ3RoID0gdGhpcy5wb3NpdGlvbjtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgcmVhZFVuc2lnbmVkSW50KCk6bnVtYmVyXG5cdHtcblx0XHRpZiAodGhpcy5wb3NpdGlvbiArIDQgPiB0aGlzLmxlbmd0aCkge1xuXHRcdFx0dGhyb3cgXCJCeXRlQXJyYXkgb3V0IG9mIGJvdW5kcyByZWFkLiBQb3NpdGlvbj1cIiArIHRoaXMucG9zaXRpb24gKyBcIiwgTGVuZ3RoPVwiICsgdGhpcy5sZW5ndGg7XG5cdFx0fVxuXHRcdHZhciByOm51bWJlciA9IHRoaXMuX2J5dGVzWyB0aGlzLnBvc2l0aW9uIF0gfCAoIHRoaXMuX2J5dGVzW3RoaXMucG9zaXRpb24gKyAxXSA8PCA4ICkgfCAoIHRoaXMuX2J5dGVzW3RoaXMucG9zaXRpb24gKyAyXSA8PCAxNiApIHwgKCB0aGlzLl9ieXRlc1t0aGlzLnBvc2l0aW9uICsgM10gPDwgMjQgKTtcblx0XHR0aGlzLnBvc2l0aW9uICs9IDQ7XG5cdFx0cmV0dXJuIHIgPj4+IDA7XG5cdH1cblxuXHRwdWJsaWMgd3JpdGVGbG9hdChiOm51bWJlcilcblx0e1xuXHRcdC8vIHRoaXMgaXMgY3Jhenkgc2xvdyBhbmQgc2lsbHksIGJ1dCBhcyBhIGZhbGxiYWNrLi4uXG5cblx0XHR0aGlzLndyaXRlVW5zaWduZWRJbnQodGhpcy50b0Zsb2F0Qml0cyhOdW1iZXIoYikpKTtcblx0fVxuXG5cdHB1YmxpYyB0b0Zsb2F0Qml0cyh4Om51bWJlcilcblx0e1xuXHRcdC8vIGRvbid0IGhhbmRsZSBpbmYvbmFuIHlldFxuXHRcdC8vIHNwZWNpYWwgY2FzZSB6ZXJvXG5cdFx0aWYgKHggPT0gMCkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHRcdC8vIHJlbW92ZSB0aGUgc2lnbiwgYWZ0ZXIgdGhpcyB3ZSBvbmx5IGRlYWwgd2l0aCBwb3NpdGl2ZSBudW1iZXJzXG5cdFx0dmFyIHNpZ246bnVtYmVyID0gMDtcblx0XHRpZiAoeCA8IDApIHtcblx0XHRcdHggPSAteDtcblx0XHRcdHNpZ24gPSAxO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzaWduID0gMDtcblx0XHR9XG5cdFx0Ly8gYSBmbG9hdCB2YWx1ZSBpcyBub3cgZGVmaW5lZCBhczogeCA9ICgxKyhtYW50aXNzYSoyXi0yMykpKigyXihleHBvbmVudC0xMjcpKVxuXHRcdHZhciBleHBvbmVudDpudW1iZXIgPSBNYXRoLmxvZyh4KS9NYXRoLmxvZygyKTsgIC8vIHJvdWdoIGV4cG9uZW50XG5cdFx0ZXhwb25lbnQgPSBNYXRoLmZsb29yKGV4cG9uZW50KTtcblx0XHR4ID0geCpNYXRoLnBvdygyLCAyMyAtIGV4cG9uZW50KTsgICAgICAgICAgICAgLy8gbm9ybWFsaXplIHRvIDI0IGJpdHNcblx0XHR2YXIgbWFudGlzc2EgPSBNYXRoLmZsb29yKHgpIC0gMHg4MDAwMDA7XG5cdFx0ZXhwb25lbnQgPSBleHBvbmVudCArIDEyNztcblx0XHRyZXR1cm4oICggc2lnbiA8PCAzMSApID4+PiAwKSB8ICggZXhwb25lbnQgPDwgMjMgKSB8IG1hbnRpc3NhO1xuXHR9XG5cblx0cHVibGljIHJlYWRGbG9hdChiOm51bWJlcilcblx0e1xuXHRcdHJldHVybiB0aGlzLmZyb21GbG9hdEJpdHModGhpcy5yZWFkVW5zaWduZWRJbnQoKSk7XG5cdH1cblxuXHRwdWJsaWMgZnJvbUZsb2F0Qml0cyh4Om51bWJlcilcblx0e1xuXHRcdGlmICh4ID09IDApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XHR2YXIgZXhwb25lbnQ6bnVtYmVyID0gKCB4ID4+PiAyMyApICYgMHhmZjtcblx0XHR2YXIgbWFudGlzc2E6bnVtYmVyID0gKCB4ICYgMHg3ZmZmZmYgKSB8IDB4ODAwMDAwO1xuXHRcdHZhciB5ID0gTWF0aC5wb3coMiwgKCBleHBvbmVudCAtIDEyNyApIC0gMjMpKm1hbnRpc3NhO1xuXHRcdGlmICh4ID4+PiAzMSAhPSAwKSB7XG5cdFx0XHR5ID0gLXk7XG5cdFx0fVxuXHRcdHJldHVybiB5O1xuXHR9XG5cblx0Lypcblx0IHB1YmxpYyBlbnN1cmVXcml0ZWFibGVTcGFjZSggbjpudW1iZXIgKVxuXHQge1xuXHQgdGhpcy5lbnN1cmVTcGFjZSggbiArIHRoaXMucG9zaXRpb24gKTtcblx0IH1cblxuXHQgcHJpdmF0ZSBlbnN1cmVTcGFjZSggbjpudW1iZXIgKVxuXHQge1xuXHQgaWYgKCBuID4gdGhpcy5tYXhsZW5ndGggKSB7XG5cdCB2YXIgbmV3bWF4bGVuZ3RoOm51bWJlciA9IChuKzI1NSkmKH4yNTUpO1xuXHQgdmFyIG5ld2FycmF5YnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKG5ld21heGxlbmd0aCk7XG5cdCB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMuYXJyYXlieXRlcywgMCwgdGhpcy5sZW5ndGgpO1xuXHQgdmFyIG5ld3ZpZXcgPSBuZXcgVWludDhBcnJheShuZXdhcnJheWJ1ZmZlciwgMCwgdGhpcy5sZW5ndGgpO1xuXHQgbmV3dmlldy5zZXQodmlldyk7ICAgICAgLy8gbWVtY3B5XG5cdCB0aGlzLmFycmF5Ynl0ZXMgPSBuZXdhcnJheWJ1ZmZlcjtcblx0IHRoaXMubWF4bGVuZ3RoID0gbmV3bWF4bGVuZ3RoO1xuXHQgfVxuXHQgfVxuXHQgKi9cbn1cblxuZXhwb3J0ID0gQnl0ZUFycmF5QnVmZmVyOyJdfQ==