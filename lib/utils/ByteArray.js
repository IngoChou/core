var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ByteArrayBase = require("awayjs-core/lib/utils/ByteArrayBase");

var ByteArray = (function (_super) {
    __extends(ByteArray, _super);
    function ByteArray() {
        _super.call(this);
        this.maxlength = 0;
        this._mode = "Typed array";
        this.maxlength = 4;
        this.arraybytes = new ArrayBuffer(this.maxlength);
        this.unalignedarraybytestemp = new ArrayBuffer(16);
    }
    ByteArray.prototype.ensureWriteableSpace = function (n) {
        this.ensureSpace(n + this.position);
    };

    ByteArray.prototype.setArrayBuffer = function (aBuffer) {
        this.ensureSpace(aBuffer.byteLength);

        this.length = aBuffer.byteLength;

        var inInt8AView = new Int8Array(aBuffer);
        var localInt8View = new Int8Array(this.arraybytes, 0, this.length);

        localInt8View.set(inInt8AView);

        this.position = 0;
    };

    ByteArray.prototype.getBytesAvailable = function () {
        return (this.length) - (this.position);
    };

    ByteArray.prototype.ensureSpace = function (n) {
        if (n > this.maxlength) {
            var newmaxlength = (n + 255) & (~255);
            var newarraybuffer = new ArrayBuffer(newmaxlength);
            var view = new Uint8Array(this.arraybytes, 0, this.length);
            var newview = new Uint8Array(newarraybuffer, 0, this.length);
            newview.set(view); // memcpy
            this.arraybytes = newarraybuffer;
            this.maxlength = newmaxlength;
        }
    };

    ByteArray.prototype.writeByte = function (b) {
        this.ensureWriteableSpace(1);
        var view = new Int8Array(this.arraybytes);
        view[this.position++] = (~~b); // ~~ is cast to int in js...
        if (this.position > this.length) {
            this.length = this.position;
        }
    };

    ByteArray.prototype.readByte = function () {
        if (this.position >= this.length) {
            throw "ByteArray out of bounds read. Positon=" + this.position + ", Length=" + this.length;
        }
        var view = new Int8Array(this.arraybytes);

        return view[this.position++];
    };

    ByteArray.prototype.readBytes = function (bytes, offset, length) {
        if (typeof offset === "undefined") { offset = 0; }
        if (typeof length === "undefined") { length = 0; }
        if (length == null) {
            length = bytes.length;
        }

        bytes.ensureWriteableSpace(offset + length);

        var byteView = new Int8Array(bytes.arraybytes);
        var localByteView = new Int8Array(this.arraybytes);

        byteView.set(localByteView.subarray(this.position, this.position + length), offset);

        this.position += length;

        if (length + offset > bytes.length) {
            bytes.length += (length + offset) - bytes.length;
        }
    };

    ByteArray.prototype.writeUnsignedByte = function (b) {
        this.ensureWriteableSpace(1);
        var view = new Uint8Array(this.arraybytes);
        view[this.position++] = (~~b) & 0xff; // ~~ is cast to int in js...
        if (this.position > this.length) {
            this.length = this.position;
        }
    };

    ByteArray.prototype.readUnsignedByte = function () {
        if (this.position >= this.length) {
            throw "ByteArray out of bounds read. Positon=" + this.position + ", Length=" + this.length;
        }
        var view = new Uint8Array(this.arraybytes);
        return view[this.position++];
    };

    ByteArray.prototype.writeUnsignedShort = function (b) {
        this.ensureWriteableSpace(2);
        if ((this.position & 1) == 0) {
            var view = new Uint16Array(this.arraybytes);
            view[this.position >> 1] = (~~b) & 0xffff; // ~~ is cast to int in js...
        } else {
            var view = new Uint16Array(this.unalignedarraybytestemp, 0, 1);
            view[0] = (~~b) & 0xffff;
            var view2 = new Uint8Array(this.arraybytes, this.position, 2);
            var view3 = new Uint8Array(this.unalignedarraybytestemp, 0, 2);
            view2.set(view3);
        }
        this.position += 2;
        if (this.position > this.length) {
            this.length = this.position;
        }
    };

    ByteArray.prototype.readUTFBytes = function (len) {
        var value = "";
        var max = this.position + len;
        var data = new DataView(this.arraybytes);

        while (this.position < max) {
            var c = data.getUint8(this.position++);

            if (c < 0x80) {
                if (c == 0)
                    break;
                value += String.fromCharCode(c);
            } else if (c < 0xE0) {
                value += String.fromCharCode(((c & 0x3F) << 6) | (data.getUint8(this.position++) & 0x7F));
            } else if (c < 0xF0) {
                var c2 = data.getUint8(this.position++);
                value += String.fromCharCode(((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (data.getUint8(this.position++) & 0x7F));
            } else {
                var c2 = data.getUint8(this.position++);
                var c3 = data.getUint8(this.position++);

                value += String.fromCharCode(((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 << 6) & 0x7F) | (data.getUint8(this.position++) & 0x7F));
            }
        }

        return value;
    };

    ByteArray.prototype.readInt = function () {
        var data = new DataView(this.arraybytes);
        var int = data.getInt32(this.position, true);

        this.position += 4;

        return int;
    };

    ByteArray.prototype.readShort = function () {
        var data = new DataView(this.arraybytes);
        var short = data.getInt16(this.position, true);

        this.position += 2;
        return short;
    };

    ByteArray.prototype.readDouble = function () {
        var data = new DataView(this.arraybytes);
        var double = data.getFloat64(this.position, true);

        this.position += 8;
        return double;
    };

    ByteArray.prototype.readUnsignedShort = function () {
        if (this.position > this.length + 2) {
            throw "ByteArray out of bounds read. Position=" + this.position + ", Length=" + this.length;
        }
        if ((this.position & 1) == 0) {
            var view = new Uint16Array(this.arraybytes);
            var pa = this.position >> 1;
            this.position += 2;
            return view[pa];
        } else {
            var view = new Uint16Array(this.unalignedarraybytestemp, 0, 1);
            var view2 = new Uint8Array(this.arraybytes, this.position, 2);
            var view3 = new Uint8Array(this.unalignedarraybytestemp, 0, 2);
            view3.set(view2);
            this.position += 2;
            return view[0];
        }
    };

    ByteArray.prototype.writeUnsignedInt = function (b) {
        this.ensureWriteableSpace(4);
        if ((this.position & 3) == 0) {
            var view = new Uint32Array(this.arraybytes);
            view[this.position >> 2] = (~~b) & 0xffffffff; // ~~ is cast to int in js...
        } else {
            var view = new Uint32Array(this.unalignedarraybytestemp, 0, 1);
            view[0] = (~~b) & 0xffffffff;
            var view2 = new Uint8Array(this.arraybytes, this.position, 4);
            var view3 = new Uint8Array(this.unalignedarraybytestemp, 0, 4);
            view2.set(view3);
        }
        this.position += 4;
        if (this.position > this.length) {
            this.length = this.position;
        }
    };

    ByteArray.prototype.readUnsignedInt = function () {
        if (this.position > this.length + 4) {
            throw "ByteArray out of bounds read. Position=" + this.position + ", Length=" + this.length;
        }
        if ((this.position & 3) == 0) {
            var view = new Uint32Array(this.arraybytes);
            var pa = this.position >> 2;
            this.position += 4;
            return view[pa];
        } else {
            var view = new Uint32Array(this.unalignedarraybytestemp, 0, 1);
            var view2 = new Uint8Array(this.arraybytes, this.position, 4);
            var view3 = new Uint8Array(this.unalignedarraybytestemp, 0, 4);
            view3.set(view2);
            this.position += 4;
            return view[0];
        }
    };

    ByteArray.prototype.writeFloat = function (b) {
        this.ensureWriteableSpace(4);
        if ((this.position & 3) == 0) {
            var view = new Float32Array(this.arraybytes);
            view[this.position >> 2] = b;
        } else {
            var view = new Float32Array(this.unalignedarraybytestemp, 0, 1);
            view[0] = b;
            var view2 = new Uint8Array(this.arraybytes, this.position, 4);
            var view3 = new Uint8Array(this.unalignedarraybytestemp, 0, 4);
            view2.set(view3);
        }
        this.position += 4;
        if (this.position > this.length) {
            this.length = this.position;
        }
    };

    ByteArray.prototype.readFloat = function () {
        if (this.position > this.length + 4) {
            throw "ByteArray out of bounds read. Positon=" + this.position + ", Length=" + this.length;
        }
        if ((this.position & 3) == 0) {
            var view = new Float32Array(this.arraybytes);
            var pa = this.position >> 2;
            this.position += 4;
            return view[pa];
        } else {
            var view = new Float32Array(this.unalignedarraybytestemp, 0, 1);
            var view2 = new Uint8Array(this.arraybytes, this.position, 4);
            var view3 = new Uint8Array(this.unalignedarraybytestemp, 0, 4);
            view3.set(view2);
            this.position += 4;
            return view[0];
        }
    };
    return ByteArray;
})(ByteArrayBase);

module.exports = ByteArray;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzL0J5dGVBcnJheS50cyJdLCJuYW1lcyI6WyJCeXRlQXJyYXkiLCJCeXRlQXJyYXkuY29uc3RydWN0b3IiLCJCeXRlQXJyYXkuZW5zdXJlV3JpdGVhYmxlU3BhY2UiLCJCeXRlQXJyYXkuc2V0QXJyYXlCdWZmZXIiLCJCeXRlQXJyYXkuZ2V0Qnl0ZXNBdmFpbGFibGUiLCJCeXRlQXJyYXkuZW5zdXJlU3BhY2UiLCJCeXRlQXJyYXkud3JpdGVCeXRlIiwiQnl0ZUFycmF5LnJlYWRCeXRlIiwiQnl0ZUFycmF5LnJlYWRCeXRlcyIsIkJ5dGVBcnJheS53cml0ZVVuc2lnbmVkQnl0ZSIsIkJ5dGVBcnJheS5yZWFkVW5zaWduZWRCeXRlIiwiQnl0ZUFycmF5LndyaXRlVW5zaWduZWRTaG9ydCIsIkJ5dGVBcnJheS5yZWFkVVRGQnl0ZXMiLCJCeXRlQXJyYXkucmVhZEludCIsIkJ5dGVBcnJheS5yZWFkU2hvcnQiLCJCeXRlQXJyYXkucmVhZERvdWJsZSIsIkJ5dGVBcnJheS5yZWFkVW5zaWduZWRTaG9ydCIsIkJ5dGVBcnJheS53cml0ZVVuc2lnbmVkSW50IiwiQnl0ZUFycmF5LnJlYWRVbnNpZ25lZEludCIsIkJ5dGVBcnJheS53cml0ZUZsb2F0IiwiQnl0ZUFycmF5LnJlYWRGbG9hdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsa0VBQXdFOztBQUV4RTtJQUF3QkEsNEJBQWFBO0lBTXBDQTtRQUVDQyxXQUFNQSxLQUFBQSxDQUFDQTtRQU5SQSxLQUFPQSxTQUFTQSxHQUFVQSxDQUFDQSxDQUFDQTtRQU8zQkEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsYUFBYUE7UUFDMUJBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLENBQUNBO1FBQ2xCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTtRQUNqREEsSUFBSUEsQ0FBQ0EsdUJBQXVCQSxHQUFHQSxJQUFJQSxXQUFXQSxDQUFDQSxF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QUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFFQTtnQkFFYkEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7b0JBQUVBLEtBQU1BLENBQUFBO2dCQUNsQkEsS0FBS0EsSUFBSUEsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7YUFFL0JBLE1BQU1BLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLENBQUVBO2dCQUVwQkEsS0FBS0EsSUFBSUEsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7YUFFekZBLE1BQU1BLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLENBQUVBO2dCQUVwQkEsSUFBSUEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7Z0JBQ3ZDQSxLQUFLQSxJQUFJQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQTthQUUvR0EsS0FBTUE7Z0JBRU5BLElBQUlBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBO2dCQUN2Q0EsSUFBSUEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFB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Q0EsQ0FBQ0E7WUFDOURBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBO1lBQ2hCQSxJQUFJQSxDQUFDQSxRQUFRQSxJQUFJQSxDQUFDQTtZQUNsQkEsT0FBT0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7U0FDZEE7SUFDRkEsQ0FBQ0E7O0lBRURoQix1Q0FBQUEsVUFBd0JBLENBQVFBO1FBRS9CaUIsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM1QkEsSUFBSUEsQ0FBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsQ0FBQ0EsQ0FBRUEsSUFBSUEsQ0FBQ0EsQ0FBRUE7WUFDL0JBLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBO1lBQzNDQSxJQUFJQSxDQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxJQUFJQSxDQUFDQSxDQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxVQUFVQSxFQUFFQSw2QkFBNkJBO1NBQzlFQSxLQUFNQTtZQUNOQSxJQUFJQSxJQUFJQSxHQUFHQSxJQUFJQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSx1QkFBdUJBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBQzlEQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxVQUFVQTtZQUM1QkEsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDN0RBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLHVCQUF1QkEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDOURBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBO1NB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LElBQUlBLENBQUNBO1lBQ2xCQSxPQUFPQSxJQUFJQSxDQUFFQSxDQUFDQSxDQUFFQTtTQUNoQkE7SUFDRkEsQ0FBQ0E7SUFDRnBCLGlCQUFDQTtBQUFEQSxDQUFDQSxFQWxUdUIsYUFBYSxFQWtUcEM7O0FBRUQsMEJBQW1CLENBQUEiLCJmaWxlIjoidXRpbHMvQnl0ZUFycmF5LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9yb2JiYXRlbWFuL1dlYnN0b3JtUHJvamVjdHMvYXdheWpzLWNvcmUvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJ5dGVBcnJheUJhc2VcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdXRpbHMvQnl0ZUFycmF5QmFzZVwiKTtcblxuY2xhc3MgQnl0ZUFycmF5IGV4dGVuZHMgQnl0ZUFycmF5QmFzZVxue1xuXHRwdWJsaWMgbWF4bGVuZ3RoOm51bWJlciA9IDA7XG5cdHB1YmxpYyBhcnJheWJ5dGVzOyAvL0FycmF5QnVmZmVyXG5cdHB1YmxpYyB1bmFsaWduZWRhcnJheWJ5dGVzdGVtcDsgLy9BcnJheUJ1ZmZlclxuXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5fbW9kZSA9IFwiVHlwZWQgYXJyYXlcIjtcblx0XHR0aGlzLm1heGxlbmd0aCA9IDQ7XG5cdFx0dGhpcy5hcnJheWJ5dGVzID0gbmV3IEFycmF5QnVmZmVyKHRoaXMubWF4bGVuZ3RoKTtcblx0XHR0aGlzLnVuYWxpZ25lZGFycmF5Ynl0ZXN0ZW1wID0gbmV3IEFycmF5QnVmZmVyKDE2KTtcblx0fVxuXG5cdHB1YmxpYyBlbnN1cmVXcml0ZWFibGVTcGFjZShuOm51bWJlcilcblx0e1xuXHRcdHRoaXMuZW5zdXJlU3BhY2UobiArIHRoaXMucG9zaXRpb24pO1xuXHR9XG5cblx0cHVibGljIHNldEFycmF5QnVmZmVyKGFCdWZmZXI6QXJyYXlCdWZmZXIpOnZvaWRcblx0e1xuXG5cdFx0dGhpcy5lbnN1cmVTcGFjZShhQnVmZmVyLmJ5dGVMZW5ndGgpO1xuXG5cdFx0dGhpcy5sZW5ndGggPSBhQnVmZmVyLmJ5dGVMZW5ndGg7XG5cblx0XHR2YXIgaW5JbnQ4QVZpZXc6SW50OEFycmF5ID0gbmV3IEludDhBcnJheShhQnVmZmVyKTtcblx0XHR2YXIgbG9jYWxJbnQ4VmlldzpJbnQ4QXJyYXkgPSBuZXcgSW50OEFycmF5KHRoaXMuYXJyYXlieXRlcywgMCwgdGhpcy5sZW5ndGgpO1xuXG5cdFx0bG9jYWxJbnQ4Vmlldy5zZXQoaW5JbnQ4QVZpZXcpO1xuXG5cdFx0dGhpcy5wb3NpdGlvbiA9IDA7XG5cblx0fVxuXG5cdHB1YmxpYyBnZXRCeXRlc0F2YWlsYWJsZSgpOm51bWJlclxuXHR7XG5cdFx0cmV0dXJuICggdGhpcy5sZW5ndGggKSAtICggdGhpcy5wb3NpdGlvbiApO1xuXHR9XG5cblx0cHVibGljIGVuc3VyZVNwYWNlKG46bnVtYmVyKVxuXHR7XG5cdFx0aWYgKG4gPiB0aGlzLm1heGxlbmd0aCkge1xuXHRcdFx0dmFyIG5ld21heGxlbmd0aDpudW1iZXIgPSAobiArIDI1NSkgJiAofjI1NSk7XG5cdFx0XHR2YXIgbmV3YXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIobmV3bWF4bGVuZ3RoKTtcblx0XHRcdHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5hcnJheWJ5dGVzLCAwLCB0aGlzLmxlbmd0aCk7XG5cdFx0XHR2YXIgbmV3dmlldyA9IG5ldyBVaW50OEFycmF5KG5ld2FycmF5YnVmZmVyLCAwLCB0aGlzLmxlbmd0aCk7XG5cdFx0XHRuZXd2aWV3LnNldCh2aWV3KTsgICAgICAvLyBtZW1jcHlcblx0XHRcdHRoaXMuYXJyYXlieXRlcyA9IG5ld2FycmF5YnVmZmVyO1xuXHRcdFx0dGhpcy5tYXhsZW5ndGggPSBuZXdtYXhsZW5ndGg7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIHdyaXRlQnl0ZShiOm51bWJlcilcblx0e1xuXHRcdHRoaXMuZW5zdXJlV3JpdGVhYmxlU3BhY2UoMSk7XG5cdFx0dmFyIHZpZXcgPSBuZXcgSW50OEFycmF5KHRoaXMuYXJyYXlieXRlcyk7XG5cdFx0dmlld1sgdGhpcy5wb3NpdGlvbisrIF0gPSAofn5iKTsgLy8gfn4gaXMgY2FzdCB0byBpbnQgaW4ganMuLi5cblx0XHRpZiAodGhpcy5wb3NpdGlvbiA+IHRoaXMubGVuZ3RoKSB7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IHRoaXMucG9zaXRpb247XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIHJlYWRCeXRlKClcblx0e1xuXHRcdGlmICh0aGlzLnBvc2l0aW9uID49IHRoaXMubGVuZ3RoKSB7XG5cdFx0XHR0aHJvdyBcIkJ5dGVBcnJheSBvdXQgb2YgYm91bmRzIHJlYWQuIFBvc2l0b249XCIgKyB0aGlzLnBvc2l0aW9uICsgXCIsIExlbmd0aD1cIiArIHRoaXMubGVuZ3RoO1xuXHRcdH1cblx0XHR2YXIgdmlldyA9IG5ldyBJbnQ4QXJyYXkodGhpcy5hcnJheWJ5dGVzKTtcblxuXHRcdHJldHVybiB2aWV3WyB0aGlzLnBvc2l0aW9uKysgXTtcblx0fVxuXG5cdHB1YmxpYyByZWFkQnl0ZXMoYnl0ZXM6Qnl0ZUFycmF5LCBvZmZzZXQ6bnVtYmVyID0gMCwgbGVuZ3RoOm51bWJlciA9IDApXG5cdHtcblxuXHRcdGlmIChsZW5ndGggPT0gbnVsbCkge1xuXHRcdFx0bGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xuXHRcdH1cblxuXHRcdGJ5dGVzLmVuc3VyZVdyaXRlYWJsZVNwYWNlKG9mZnNldCArIGxlbmd0aCk7XG5cblx0XHR2YXIgYnl0ZVZpZXc6SW50OEFycmF5ID0gbmV3IEludDhBcnJheShieXRlcy5hcnJheWJ5dGVzKTtcblx0XHR2YXIgbG9jYWxCeXRlVmlldzpJbnQ4QXJyYXkgPSBuZXcgSW50OEFycmF5KHRoaXMuYXJyYXlieXRlcyk7XG5cblx0XHRieXRlVmlldy5zZXQobG9jYWxCeXRlVmlldy5zdWJhcnJheSh0aGlzLnBvc2l0aW9uLCB0aGlzLnBvc2l0aW9uICsgbGVuZ3RoKSwgb2Zmc2V0KTtcblxuXHRcdHRoaXMucG9zaXRpb24gKz0gbGVuZ3RoO1xuXG5cdFx0aWYgKGxlbmd0aCArIG9mZnNldCA+IGJ5dGVzLmxlbmd0aCkge1xuXHRcdFx0Ynl0ZXMubGVuZ3RoICs9ICggbGVuZ3RoICsgb2Zmc2V0ICkgLSBieXRlcy5sZW5ndGg7XG5cdFx0fVxuXG5cdH1cblxuXHRwdWJsaWMgd3JpdGVVbnNpZ25lZEJ5dGUoYjpudW1iZXIpXG5cdHtcblx0XHR0aGlzLmVuc3VyZVdyaXRlYWJsZVNwYWNlKDEpO1xuXHRcdHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5hcnJheWJ5dGVzKTtcblx0XHR2aWV3W3RoaXMucG9zaXRpb24rK10gPSAofn5iKSAmIDB4ZmY7IC8vIH5+IGlzIGNhc3QgdG8gaW50IGluIGpzLi4uXG5cdFx0aWYgKHRoaXMucG9zaXRpb24gPiB0aGlzLmxlbmd0aCkge1xuXHRcdFx0dGhpcy5sZW5ndGggPSB0aGlzLnBvc2l0aW9uO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyByZWFkVW5zaWduZWRCeXRlKClcblx0e1xuXHRcdGlmICh0aGlzLnBvc2l0aW9uID49IHRoaXMubGVuZ3RoKSB7XG5cdFx0XHR0aHJvdyBcIkJ5dGVBcnJheSBvdXQgb2YgYm91bmRzIHJlYWQuIFBvc2l0b249XCIgKyB0aGlzLnBvc2l0aW9uICsgXCIsIExlbmd0aD1cIiArIHRoaXMubGVuZ3RoO1xuXHRcdH1cblx0XHR2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMuYXJyYXlieXRlcyk7XG5cdFx0cmV0dXJuIHZpZXdbdGhpcy5wb3NpdGlvbisrXTtcblx0fVxuXG5cdHB1YmxpYyB3cml0ZVVuc2lnbmVkU2hvcnQoYjpudW1iZXIpXG5cdHtcblx0XHR0aGlzLmVuc3VyZVdyaXRlYWJsZVNwYWNlKDIpO1xuXHRcdGlmICgoIHRoaXMucG9zaXRpb24gJiAxICkgPT0gMCkge1xuXHRcdFx0dmFyIHZpZXcgPSBuZXcgVWludDE2QXJyYXkodGhpcy5hcnJheWJ5dGVzKTtcblx0XHRcdHZpZXdbIHRoaXMucG9zaXRpb24gPj4gMSBdID0gKH5+YikgJiAweGZmZmY7IC8vIH5+IGlzIGNhc3QgdG8gaW50IGluIGpzLi4uXG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciB2aWV3ID0gbmV3IFVpbnQxNkFycmF5KHRoaXMudW5hbGlnbmVkYXJyYXlieXRlc3RlbXAsIDAsIDEpO1xuXHRcdFx0dmlld1swXSA9ICh+fmIpICYgMHhmZmZmO1xuXHRcdFx0dmFyIHZpZXcyID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5hcnJheWJ5dGVzLCB0aGlzLnBvc2l0aW9uLCAyKTtcblx0XHRcdHZhciB2aWV3MyA9IG5ldyBVaW50OEFycmF5KHRoaXMudW5hbGlnbmVkYXJyYXlieXRlc3RlbXAsIDAsIDIpO1xuXHRcdFx0dmlldzIuc2V0KHZpZXczKTtcblx0XHR9XG5cdFx0dGhpcy5wb3NpdGlvbiArPSAyO1xuXHRcdGlmICh0aGlzLnBvc2l0aW9uID4gdGhpcy5sZW5ndGgpIHtcblx0XHRcdHRoaXMubGVuZ3RoID0gdGhpcy5wb3NpdGlvbjtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgcmVhZFVURkJ5dGVzKGxlbjpudW1iZXIpOnN0cmluZ1xuXHR7XG5cblx0XHR2YXIgdmFsdWU6c3RyaW5nID0gXCJcIjtcblx0XHR2YXIgbWF4Om51bWJlciA9IHRoaXMucG9zaXRpb24gKyBsZW47XG5cdFx0dmFyIGRhdGE6RGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5hcnJheWJ5dGVzKTtcblxuXHRcdC8vIHV0ZjgtZW5jb2RlXG5cdFx0d2hpbGUgKHRoaXMucG9zaXRpb24gPCBtYXgpIHtcblxuXHRcdFx0dmFyIGM6bnVtYmVyID0gZGF0YS5nZXRVaW50OCh0aGlzLnBvc2l0aW9uKyspO1xuXG5cdFx0XHRpZiAoYyA8IDB4ODApIHtcblxuXHRcdFx0XHRpZiAoYyA9PSAwKSBicmVhaztcblx0XHRcdFx0dmFsdWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcblxuXHRcdFx0fSBlbHNlIGlmIChjIDwgMHhFMCkge1xuXG5cdFx0XHRcdHZhbHVlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjICYgMHgzRikgPDwgNikgfCAoZGF0YS5nZXRVaW50OCh0aGlzLnBvc2l0aW9uKyspICYgMHg3RikpO1xuXG5cdFx0XHR9IGVsc2UgaWYgKGMgPCAweEYwKSB7XG5cblx0XHRcdFx0dmFyIGMyID0gZGF0YS5nZXRVaW50OCh0aGlzLnBvc2l0aW9uKyspO1xuXHRcdFx0XHR2YWx1ZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyAmIDB4MUYpIDw8IDEyKSB8ICgoYzIgJiAweDdGKSA8PCA2KSB8IChkYXRhLmdldFVpbnQ4KHRoaXMucG9zaXRpb24rKykgJiAweDdGKSk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmFyIGMyID0gZGF0YS5nZXRVaW50OCh0aGlzLnBvc2l0aW9uKyspO1xuXHRcdFx0XHR2YXIgYzMgPSBkYXRhLmdldFVpbnQ4KHRoaXMucG9zaXRpb24rKyk7XG5cblx0XHRcdFx0dmFsdWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgJiAweDBGKSA8PCAxOCkgfCAoKGMyICYgMHg3RikgPDwgMTIpIHwgKChjMyA8PCA2KSAmIDB4N0YpIHwgKGRhdGEuZ2V0VWludDgodGhpcy5wb3NpdGlvbisrKSAmIDB4N0YpKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXG5cdH1cblxuXHRwdWJsaWMgcmVhZEludCgpOm51bWJlclxuXHR7XG5cblx0XHR2YXIgZGF0YTpEYXRhVmlldyA9IG5ldyBEYXRhVmlldyh0aGlzLmFycmF5Ynl0ZXMpO1xuXHRcdHZhciBpbnQ6bnVtYmVyID0gZGF0YS5nZXRJbnQzMih0aGlzLnBvc2l0aW9uLCB0cnVlKTtcblxuXHRcdHRoaXMucG9zaXRpb24gKz0gNDtcblxuXHRcdHJldHVybiBpbnQ7XG5cblx0fVxuXG5cdHB1YmxpYyByZWFkU2hvcnQoKTpudW1iZXJcblx0e1xuXG5cdFx0dmFyIGRhdGE6RGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5hcnJheWJ5dGVzKTtcblx0XHR2YXIgc2hvcnQ6bnVtYmVyID0gZGF0YS5nZXRJbnQxNih0aGlzLnBvc2l0aW9uLCB0cnVlKTtcblxuXHRcdHRoaXMucG9zaXRpb24gKz0gMjtcblx0XHRyZXR1cm4gc2hvcnQ7XG5cblx0fVxuXG5cdHB1YmxpYyByZWFkRG91YmxlKCk6bnVtYmVyXG5cdHtcblx0XHR2YXIgZGF0YTpEYXRhVmlldyA9IG5ldyBEYXRhVmlldyh0aGlzLmFycmF5Ynl0ZXMpO1xuXHRcdHZhciBkb3VibGU6bnVtYmVyID0gZGF0YS5nZXRGbG9hdDY0KHRoaXMucG9zaXRpb24sIHRydWUpO1xuXG5cdFx0dGhpcy5wb3NpdGlvbiArPSA4O1xuXHRcdHJldHVybiBkb3VibGU7XG5cblx0fVxuXG5cdHB1YmxpYyByZWFkVW5zaWduZWRTaG9ydCgpXG5cdHtcblx0XHRpZiAodGhpcy5wb3NpdGlvbiA+IHRoaXMubGVuZ3RoICsgMikge1xuXHRcdFx0dGhyb3cgXCJCeXRlQXJyYXkgb3V0IG9mIGJvdW5kcyByZWFkLiBQb3NpdGlvbj1cIiArIHRoaXMucG9zaXRpb24gKyBcIiwgTGVuZ3RoPVwiICsgdGhpcy5sZW5ndGg7XG5cdFx0fVxuXHRcdGlmICgoIHRoaXMucG9zaXRpb24gJiAxICkgPT0gMCkge1xuXHRcdFx0dmFyIHZpZXcgPSBuZXcgVWludDE2QXJyYXkodGhpcy5hcnJheWJ5dGVzKTtcblx0XHRcdHZhciBwYTpudW1iZXIgPSB0aGlzLnBvc2l0aW9uID4+IDE7XG5cdFx0XHR0aGlzLnBvc2l0aW9uICs9IDI7XG5cdFx0XHRyZXR1cm4gdmlld1sgcGEgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHZpZXcgPSBuZXcgVWludDE2QXJyYXkodGhpcy51bmFsaWduZWRhcnJheWJ5dGVzdGVtcCwgMCwgMSk7XG5cdFx0XHR2YXIgdmlldzIgPSBuZXcgVWludDhBcnJheSh0aGlzLmFycmF5Ynl0ZXMsIHRoaXMucG9zaXRpb24sIDIpO1xuXHRcdFx0dmFyIHZpZXczID0gbmV3IFVpbnQ4QXJyYXkodGhpcy51bmFsaWduZWRhcnJheWJ5dGVzdGVtcCwgMCwgMik7XG5cdFx0XHR2aWV3My5zZXQodmlldzIpO1xuXHRcdFx0dGhpcy5wb3NpdGlvbiArPSAyO1xuXHRcdFx0cmV0dXJuIHZpZXdbMF07XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIHdyaXRlVW5zaWduZWRJbnQoYjpudW1iZXIpXG5cdHtcblx0XHR0aGlzLmVuc3VyZVdyaXRlYWJsZVNwYWNlKDQpO1xuXHRcdGlmICgoIHRoaXMucG9zaXRpb24gJiAzICkgPT0gMCkge1xuXHRcdFx0dmFyIHZpZXcgPSBuZXcgVWludDMyQXJyYXkodGhpcy5hcnJheWJ5dGVzKTtcblx0XHRcdHZpZXdbIHRoaXMucG9zaXRpb24gPj4gMiBdID0gKH5+YikgJiAweGZmZmZmZmZmOyAvLyB+fiBpcyBjYXN0IHRvIGludCBpbiBqcy4uLlxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgdmlldyA9IG5ldyBVaW50MzJBcnJheSh0aGlzLnVuYWxpZ25lZGFycmF5Ynl0ZXN0ZW1wLCAwLCAxKTtcblx0XHRcdHZpZXdbMF0gPSAofn5iKSAmIDB4ZmZmZmZmZmY7XG5cdFx0XHR2YXIgdmlldzIgPSBuZXcgVWludDhBcnJheSh0aGlzLmFycmF5Ynl0ZXMsIHRoaXMucG9zaXRpb24sIDQpO1xuXHRcdFx0dmFyIHZpZXczID0gbmV3IFVpbnQ4QXJyYXkodGhpcy51bmFsaWduZWRhcnJheWJ5dGVzdGVtcCwgMCwgNCk7XG5cdFx0XHR2aWV3Mi5zZXQodmlldzMpO1xuXHRcdH1cblx0XHR0aGlzLnBvc2l0aW9uICs9IDQ7XG5cdFx0aWYgKHRoaXMucG9zaXRpb24gPiB0aGlzLmxlbmd0aCkge1xuXHRcdFx0dGhpcy5sZW5ndGggPSB0aGlzLnBvc2l0aW9uO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyByZWFkVW5zaWduZWRJbnQoKVxuXHR7XG5cblx0XHRpZiAodGhpcy5wb3NpdGlvbiA+IHRoaXMubGVuZ3RoICsgNCkge1xuXHRcdFx0dGhyb3cgXCJCeXRlQXJyYXkgb3V0IG9mIGJvdW5kcyByZWFkLiBQb3NpdGlvbj1cIiArIHRoaXMucG9zaXRpb24gKyBcIiwgTGVuZ3RoPVwiICsgdGhpcy5sZW5ndGg7XG5cdFx0fVxuXHRcdGlmICgoIHRoaXMucG9zaXRpb24gJiAzICkgPT0gMCkge1xuXHRcdFx0dmFyIHZpZXcgPSBuZXcgVWludDMyQXJyYXkodGhpcy5hcnJheWJ5dGVzKTtcblx0XHRcdHZhciBwYTpudW1iZXIgPSB0aGlzLnBvc2l0aW9uID4+IDI7XG5cdFx0XHR0aGlzLnBvc2l0aW9uICs9IDQ7XG5cdFx0XHRyZXR1cm4gdmlld1sgcGEgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHZpZXcgPSBuZXcgVWludDMyQXJyYXkodGhpcy51bmFsaWduZWRhcnJheWJ5dGVzdGVtcCwgMCwgMSk7XG5cdFx0XHR2YXIgdmlldzIgPSBuZXcgVWludDhBcnJheSh0aGlzLmFycmF5Ynl0ZXMsIHRoaXMucG9zaXRpb24sIDQpO1xuXHRcdFx0dmFyIHZpZXczID0gbmV3IFVpbnQ4QXJyYXkodGhpcy51bmFsaWduZWRhcnJheWJ5dGVzdGVtcCwgMCwgNCk7XG5cdFx0XHR2aWV3My5zZXQodmlldzIpO1xuXHRcdFx0dGhpcy5wb3NpdGlvbiArPSA0O1xuXHRcdFx0cmV0dXJuIHZpZXdbMF07XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIHdyaXRlRmxvYXQoYjpudW1iZXIpXG5cdHtcblx0XHR0aGlzLmVuc3VyZVdyaXRlYWJsZVNwYWNlKDQpO1xuXHRcdGlmICgoIHRoaXMucG9zaXRpb24gJiAzICkgPT0gMCkge1xuXHRcdFx0dmFyIHZpZXcgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMuYXJyYXlieXRlcyk7XG5cdFx0XHR2aWV3WyB0aGlzLnBvc2l0aW9uID4+IDIgXSA9IGI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciB2aWV3ID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLnVuYWxpZ25lZGFycmF5Ynl0ZXN0ZW1wLCAwLCAxKTtcblx0XHRcdHZpZXdbMF0gPSBiO1xuXHRcdFx0dmFyIHZpZXcyID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5hcnJheWJ5dGVzLCB0aGlzLnBvc2l0aW9uLCA0KTtcblx0XHRcdHZhciB2aWV3MyA9IG5ldyBVaW50OEFycmF5KHRoaXMudW5hbGlnbmVkYXJyYXlieXRlc3RlbXAsIDAsIDQpO1xuXHRcdFx0dmlldzIuc2V0KHZpZXczKTtcblx0XHR9XG5cdFx0dGhpcy5wb3NpdGlvbiArPSA0O1xuXHRcdGlmICh0aGlzLnBvc2l0aW9uID4gdGhpcy5sZW5ndGgpIHtcblx0XHRcdHRoaXMubGVuZ3RoID0gdGhpcy5wb3NpdGlvbjtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgcmVhZEZsb2F0KClcblx0e1xuXHRcdGlmICh0aGlzLnBvc2l0aW9uID4gdGhpcy5sZW5ndGggKyA0KSB7XG5cdFx0XHR0aHJvdyBcIkJ5dGVBcnJheSBvdXQgb2YgYm91bmRzIHJlYWQuIFBvc2l0b249XCIgKyB0aGlzLnBvc2l0aW9uICsgXCIsIExlbmd0aD1cIiArIHRoaXMubGVuZ3RoO1xuXHRcdH1cblx0XHRpZiAoKHRoaXMucG9zaXRpb24gJiAzKSA9PSAwKSB7XG5cdFx0XHR2YXIgdmlldyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5hcnJheWJ5dGVzKTtcblx0XHRcdHZhciBwYSA9IHRoaXMucG9zaXRpb24gPj4gMjtcblx0XHRcdHRoaXMucG9zaXRpb24gKz0gNDtcblx0XHRcdHJldHVybiB2aWV3W3BhXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHZpZXcgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMudW5hbGlnbmVkYXJyYXlieXRlc3RlbXAsIDAsIDEpO1xuXHRcdFx0dmFyIHZpZXcyID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5hcnJheWJ5dGVzLCB0aGlzLnBvc2l0aW9uLCA0KTtcblx0XHRcdHZhciB2aWV3MyA9IG5ldyBVaW50OEFycmF5KHRoaXMudW5hbGlnbmVkYXJyYXlieXRlc3RlbXAsIDAsIDQpO1xuXHRcdFx0dmlldzMuc2V0KHZpZXcyKTtcblx0XHRcdHRoaXMucG9zaXRpb24gKz0gNDtcblx0XHRcdHJldHVybiB2aWV3WyAwIF07XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCA9IEJ5dGVBcnJheTsiXX0=