var CSS = (function () {
    function CSS() {
    }
    CSS.setElementSize = function (element, width, height) {
        element.style.width = width + "px";
        element.style.height = height + "px";
        element["width"] = width;
        element["height"] = height;
    };

    CSS.setElementWidth = function (element, width) {
        element.style.width = width + "px";
        element["width"] = width;
    };

    CSS.setElementHeight = function (element, height) {
        element.style.height = height + "px";
        element["height"] = height;
    };

    CSS.setElementX = function (element, x) {
        element.style.position = 'absolute';
        element.style.left = x + "px";
    };

    CSS.setElementY = function (element, y) {
        element.style.position = 'absolute';
        element.style.top = y + "px";
    };

    CSS.getElementVisibility = function (element) {
        return element.style.visibility == 'visible';
    };

    CSS.setElementVisibility = function (element, visible) {
        if (visible) {
            element.style.visibility = 'visible';
        } else {
            element.style.visibility = 'hidden';
        }
    };

    CSS.setElementAlpha = function (element, alpha) {
        if (element instanceof HTMLCanvasElement) {
            var context = element.getContext("2d");
            context.globalAlpha = alpha;
        }
    };

    CSS.setElementPosition = function (element, x, y, absolute) {
        if (typeof absolute === "undefined") { absolute = false; }
        if (absolute) {
            element.style.position = "absolute";
        } else {
            element.style.position = "relative";
        }

        element.style.left = x + "px";
        element.style.top = y + "px";
    };
    return CSS;
})();

module.exports = CSS;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzL0NTUy50cyJdLCJuYW1lcyI6WyJDU1MiLCJDU1MuY29uc3RydWN0b3IiLCJDU1Muc2V0RWxlbWVudFNpemUiLCJDU1Muc2V0RWxlbWVudFdpZHRoIiwiQ1NTLnNldEVsZW1lbnRIZWlnaHQiLCJDU1Muc2V0RWxlbWVudFgiLCJDU1Muc2V0RWxlbWVudFkiLCJDU1MuZ2V0RWxlbWVudFZpc2liaWxpdHkiLCJDU1Muc2V0RWxlbWVudFZpc2liaWxpdHkiLCJDU1Muc2V0RWxlbWVudEFscGhhIiwiQ1NTLnNldEVsZW1lbnRQb3NpdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7SUFBQUE7SUFtRUFDLENBQUNBO0FBQUFELElBakVBQSxxQkFBQUEsVUFBNkJBLE9BQW1CQSxFQUFFQSxLQUFZQSxFQUFFQSxNQUFhQTtRQUU1RUUsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUE7UUFDbENBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBO1FBQ3BDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxLQUFLQTtRQUN4QkEsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsTUFBTUE7SUFDM0JBLENBQUNBOztJQUVERixzQkFBQUEsVUFBOEJBLE9BQW1CQSxFQUFFQSxLQUFZQTtRQUU5REcsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUE7UUFDbENBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLEtBQUtBO0lBQ3pCQSxDQUFDQTs7SUFFREgsdUJBQUFBLFVBQStCQSxPQUFtQkEsRUFBRUEsTUFBYUE7UUFFaEVJLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBO1FBQ3BDQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxNQUFNQTtJQUMzQkEsQ0FBQ0E7O0lBRURKLGtCQUFBQSxVQUEwQkEsT0FBbUJBLEVBQUVBLENBQVFBO1FBRXRESyxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxRQUFRQSxHQUFHQSxVQUFVQTtRQUNuQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUE7SUFDOUJBLENBQUNBOztJQUVETCxrQkFBQUEsVUFBMEJBLE9BQW1CQSxFQUFFQSxDQUFRQTtRQUV0RE0sT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsR0FBR0EsVUFBVUE7UUFDbkNBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBO0lBQzdCQSxDQUFDQTs7SUFFRE4sMkJBQUFBLFVBQW1DQSxPQUFtQkE7UUFFckRPLE9BQU9BLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLElBQUlBLFNBQVNBO0lBQzdDQSxDQUFDQTs7SUFFRFAsMkJBQUFBLFVBQW1DQSxPQUFtQkEsRUFBRUEsT0FBZUE7UUFFdEVRLElBQUlBLE9BQU9BLENBQUVBO1lBQ1pBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLEdBQUdBLFNBQVNBO1NBQ3BDQSxLQUFNQTtZQUNOQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxVQUFVQSxHQUFHQSxRQUFRQTtTQUNuQ0E7SUFDRkEsQ0FBQ0E7O0lBRURSLHNCQUFBQSxVQUE4QkEsT0FBbUJBLEVBQUVBLEtBQVlBO1FBRTlEUyxJQUFJQSxPQUFPQSxZQUFZQSxpQkFBaUJBLENBQUVBO1lBQ3pDQSxJQUFJQSxPQUFPQSxHQUFHQSxPQUE0QkEsQ0FBRUEsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDNURBLE9BQU9BLENBQUNBLFdBQVdBLEdBQUdBLEtBQUtBO1NBQzNCQTtJQUNGQSxDQUFDQTs7SUFFRFQseUJBQUFBLFVBQWlDQSxPQUFtQkEsRUFBRUEsQ0FBUUEsRUFBRUEsQ0FBUUEsRUFBRUEsUUFBd0JBO1FBQXhCVSx1Q0FBQUEsUUFBUUEsR0FBV0EsS0FBS0E7QUFBQUEsUUFFakdBLElBQUlBLFFBQVFBLENBQUVBO1lBQ2JBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLEdBQUdBLFVBQVVBO1NBQ25DQSxLQUFNQTtZQUNOQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxRQUFRQSxHQUFHQSxVQUFVQTtTQUNuQ0E7O1FBRURBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBO1FBQzdCQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQTtJQUM3QkEsQ0FBQ0E7SUFDRlYsV0FBQ0E7QUFBREEsQ0FBQ0EsSUFBQTs7QUFFRCxvQkFBYSxDQUFBIiwiZmlsZSI6InV0aWxzL0NTUy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1jb3JlLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIENTU1xue1xuXHRwdWJsaWMgc3RhdGljIHNldEVsZW1lbnRTaXplKGVsZW1lbnQ6SFRNTEVsZW1lbnQsIHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlcilcblx0e1xuXHRcdGVsZW1lbnQuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcblx0XHRlbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArIFwicHhcIjtcblx0XHRlbGVtZW50W1wid2lkdGhcIl0gPSB3aWR0aDtcblx0XHRlbGVtZW50W1wiaGVpZ2h0XCJdID0gaGVpZ2h0O1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBzZXRFbGVtZW50V2lkdGgoZWxlbWVudDpIVE1MRWxlbWVudCwgd2lkdGg6bnVtYmVyKVxuXHR7XG5cdFx0ZWxlbWVudC5zdHlsZS53aWR0aCA9IHdpZHRoICsgXCJweFwiO1xuXHRcdGVsZW1lbnRbXCJ3aWR0aFwiXSA9IHdpZHRoO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBzZXRFbGVtZW50SGVpZ2h0KGVsZW1lbnQ6SFRNTEVsZW1lbnQsIGhlaWdodDpudW1iZXIpXG5cdHtcblx0XHRlbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArIFwicHhcIjtcblx0XHRlbGVtZW50W1wiaGVpZ2h0XCJdID0gaGVpZ2h0O1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBzZXRFbGVtZW50WChlbGVtZW50OkhUTUxFbGVtZW50LCB4Om51bWJlcilcblx0e1xuXHRcdGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHRcdGVsZW1lbnQuc3R5bGUubGVmdCA9IHggKyBcInB4XCI7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIHNldEVsZW1lbnRZKGVsZW1lbnQ6SFRNTEVsZW1lbnQsIHk6bnVtYmVyKVxuXHR7XG5cdFx0ZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdFx0ZWxlbWVudC5zdHlsZS50b3AgPSB5ICsgXCJweFwiO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBnZXRFbGVtZW50VmlzaWJpbGl0eShlbGVtZW50OkhUTUxFbGVtZW50KTpib29sZWFuXG5cdHtcblx0XHRyZXR1cm4gZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID09ICd2aXNpYmxlJztcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgc2V0RWxlbWVudFZpc2liaWxpdHkoZWxlbWVudDpIVE1MRWxlbWVudCwgdmlzaWJsZTpib29sZWFuKVxuXHR7XG5cdFx0aWYgKHZpc2libGUpIHtcblx0XHRcdGVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIHN0YXRpYyBzZXRFbGVtZW50QWxwaGEoZWxlbWVudDpIVE1MRWxlbWVudCwgYWxwaGE6bnVtYmVyKVxuXHR7XG5cdFx0aWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCkge1xuXHRcdFx0dmFyIGNvbnRleHQgPSAoPEhUTUxDYW52YXNFbGVtZW50PiBlbGVtZW50KS5nZXRDb250ZXh0KFwiMmRcIik7XG5cdFx0XHRjb250ZXh0Lmdsb2JhbEFscGhhID0gYWxwaGE7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIHN0YXRpYyBzZXRFbGVtZW50UG9zaXRpb24oZWxlbWVudDpIVE1MRWxlbWVudCwgeDpudW1iZXIsIHk6bnVtYmVyLCBhYnNvbHV0ZTpib29sZWFuID0gZmFsc2UpXG5cdHtcblx0XHRpZiAoYWJzb2x1dGUpIHtcblx0XHRcdGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0ZWxlbWVudC5zdHlsZS5sZWZ0ID0geCArIFwicHhcIjtcblx0XHRlbGVtZW50LnN0eWxlLnRvcCA9IHkgKyBcInB4XCI7XG5cdH1cbn1cblxuZXhwb3J0ID0gQ1NTOyJdfQ==