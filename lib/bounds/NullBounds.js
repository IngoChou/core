var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BoundingVolumeBase = require("awayjs-core/lib/bounds/BoundingVolumeBase");
var PlaneClassification = require("awayjs-core/lib/geom/PlaneClassification");
var NullBounds = (function (_super) {
    __extends(NullBounds, _super);
    function NullBounds(alwaysIn) {
        if (alwaysIn === void 0) { alwaysIn = true; }
        _super.call(this);
        this._alwaysIn = alwaysIn;
        this._aabb.width = this._aabb.height = this._aabb.depth = Number.POSITIVE_INFINITY;
        this._aabb.x = this._aabb.y = this._aabb.z = this._alwaysIn ? Number.NEGATIVE_INFINITY / 2 : Number.POSITIVE_INFINITY;
    }
    //@override
    NullBounds.prototype.clone = function () {
        return new NullBounds(this._alwaysIn);
    };
    //@override
    NullBounds.prototype.isInFrustum = function (planes, numPlanes) {
        return this._alwaysIn;
    };
    //		//@override
    //		public fromGeometry(geometry:away.base.Geometry)
    //		{
    //		}
    //@override
    NullBounds.prototype.fromSphere = function (center, radius) {
    };
    //@override
    NullBounds.prototype.fromExtremes = function (minX, minY, minZ, maxX, maxY, maxZ) {
    };
    NullBounds.prototype.classifyToPlane = function (plane) {
        return PlaneClassification.INTERSECT;
    };
    //@override
    NullBounds.prototype.transformFrom = function (bounds, matrix) {
        this._alwaysIn = bounds._alwaysIn;
    };
    return NullBounds;
})(BoundingVolumeBase);
module.exports = NullBounds;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi9ib3VuZHMvbnVsbGJvdW5kcy50cyJdLCJuYW1lcyI6WyJOdWxsQm91bmRzIiwiTnVsbEJvdW5kcy5jb25zdHJ1Y3RvciIsIk51bGxCb3VuZHMuY2xvbmUiLCJOdWxsQm91bmRzLmlzSW5GcnVzdHVtIiwiTnVsbEJvdW5kcy5mcm9tU3BoZXJlIiwiTnVsbEJvdW5kcy5mcm9tRXh0cmVtZXMiLCJOdWxsQm91bmRzLmNsYXNzaWZ5VG9QbGFuZSIsIk51bGxCb3VuZHMudHJhbnNmb3JtRnJvbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTyxrQkFBa0IsV0FBYSwyQ0FBMkMsQ0FBQyxDQUFDO0FBRW5GLElBQU8sbUJBQW1CLFdBQWEsMENBQTBDLENBQUMsQ0FBQztBQUluRixJQUFNLFVBQVU7SUFBU0EsVUFBbkJBLFVBQVVBLFVBQTJCQTtJQUkxQ0EsU0FKS0EsVUFBVUEsQ0FJSEEsUUFBdUJBO1FBQXZCQyx3QkFBdUJBLEdBQXZCQSxlQUF1QkE7UUFFbENBLGlCQUFPQSxDQUFDQTtRQUVSQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxRQUFRQSxDQUFDQTtRQUUxQkEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsR0FBR0EsTUFBTUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQTtRQUNuRkEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBRUEsTUFBTUEsQ0FBQ0EsaUJBQWlCQSxHQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxpQkFBaUJBLENBQUNBO0lBQ3BIQSxDQUFDQTtJQUVERCxXQUFXQTtJQUNKQSwwQkFBS0EsR0FBWkE7UUFFQ0UsTUFBTUEsQ0FBQ0EsSUFBSUEsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7SUFDdkNBLENBQUNBO0lBRURGLFdBQVdBO0lBQ0pBLGdDQUFXQSxHQUFsQkEsVUFBbUJBLE1BQXFCQSxFQUFFQSxTQUFnQkE7UUFFekRHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO0lBQ3ZCQSxDQUFDQTtJQUVGSCxlQUFlQTtJQUNmQSxvREFBb0RBO0lBQ3BEQSxLQUFLQTtJQUNMQSxLQUFLQTtJQUVKQSxXQUFXQTtJQUNKQSwrQkFBVUEsR0FBakJBLFVBQWtCQSxNQUFlQSxFQUFFQSxNQUFhQTtJQUVoREksQ0FBQ0E7SUFFREosV0FBV0E7SUFDSkEsaUNBQVlBLEdBQW5CQSxVQUFvQkEsSUFBV0EsRUFBRUEsSUFBV0EsRUFBRUEsSUFBV0EsRUFBRUEsSUFBV0EsRUFBRUEsSUFBV0EsRUFBRUEsSUFBV0E7SUFFaEdLLENBQUNBO0lBRU1MLG9DQUFlQSxHQUF0QkEsVUFBdUJBLEtBQWFBO1FBRW5DTSxNQUFNQSxDQUFDQSxtQkFBbUJBLENBQUNBLFNBQVNBLENBQUNBO0lBQ3RDQSxDQUFDQTtJQUVETixXQUFXQTtJQUNKQSxrQ0FBYUEsR0FBcEJBLFVBQXFCQSxNQUF5QkEsRUFBRUEsTUFBZUE7UUFFOURPLElBQUlBLENBQUNBLFNBQVNBLEdBQWlCQSxNQUFPQSxDQUFDQSxTQUFTQSxDQUFDQTtJQUNsREEsQ0FBQ0E7SUFDRlAsaUJBQUNBO0FBQURBLENBbkRBLEFBbURDQSxFQW5Ed0Isa0JBQWtCLEVBbUQxQztBQUVELEFBQW9CLGlCQUFYLFVBQVUsQ0FBQyIsImZpbGUiOiJib3VuZHMvTnVsbEJvdW5kcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQm91bmRpbmdWb2x1bWVCYXNlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2JvdW5kcy9Cb3VuZGluZ1ZvbHVtZUJhc2VcIik7XG5pbXBvcnQgTWF0cml4M0RcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXgzRFwiKTtcbmltcG9ydCBQbGFuZUNsYXNzaWZpY2F0aW9uXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vUGxhbmVDbGFzc2lmaWNhdGlvblwiKTtcbmltcG9ydCBQbGFuZTNEXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vUGxhbmUzRFwiKTtcbmltcG9ydCBWZWN0b3IzRFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1ZlY3RvcjNEXCIpO1xuXG5jbGFzcyBOdWxsQm91bmRzIGV4dGVuZHMgQm91bmRpbmdWb2x1bWVCYXNlXG57XG5cdHByaXZhdGUgX2Fsd2F5c0luOmJvb2xlYW47XG5cblx0Y29uc3RydWN0b3IoYWx3YXlzSW46Ym9vbGVhbiA9IHRydWUpXG5cdHtcblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5fYWx3YXlzSW4gPSBhbHdheXNJbjtcblxuXHRcdHRoaXMuX2FhYmIud2lkdGggPSB0aGlzLl9hYWJiLmhlaWdodCA9IHRoaXMuX2FhYmIuZGVwdGggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cdFx0dGhpcy5fYWFiYi54ID0gdGhpcy5fYWFiYi55ID0gdGhpcy5fYWFiYi56ID0gdGhpcy5fYWx3YXlzSW4/IE51bWJlci5ORUdBVElWRV9JTkZJTklUWS8yIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXHR9XG5cblx0Ly9Ab3ZlcnJpZGVcblx0cHVibGljIGNsb25lKCk6Qm91bmRpbmdWb2x1bWVCYXNlXG5cdHtcblx0XHRyZXR1cm4gbmV3IE51bGxCb3VuZHModGhpcy5fYWx3YXlzSW4pO1xuXHR9XG5cblx0Ly9Ab3ZlcnJpZGVcblx0cHVibGljIGlzSW5GcnVzdHVtKHBsYW5lczpBcnJheTxQbGFuZTNEPiwgbnVtUGxhbmVzOm51bWJlcik6Ym9vbGVhblxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2Fsd2F5c0luO1xuXHR9XG5cbi8vXHRcdC8vQG92ZXJyaWRlXG4vL1x0XHRwdWJsaWMgZnJvbUdlb21ldHJ5KGdlb21ldHJ5OmF3YXkuYmFzZS5HZW9tZXRyeSlcbi8vXHRcdHtcbi8vXHRcdH1cblxuXHQvL0BvdmVycmlkZVxuXHRwdWJsaWMgZnJvbVNwaGVyZShjZW50ZXI6VmVjdG9yM0QsIHJhZGl1czpudW1iZXIpXG5cdHtcblx0fVxuXG5cdC8vQG92ZXJyaWRlXG5cdHB1YmxpYyBmcm9tRXh0cmVtZXMobWluWDpudW1iZXIsIG1pblk6bnVtYmVyLCBtaW5aOm51bWJlciwgbWF4WDpudW1iZXIsIG1heFk6bnVtYmVyLCBtYXhaOm51bWJlcilcblx0e1xuXHR9XG5cblx0cHVibGljIGNsYXNzaWZ5VG9QbGFuZShwbGFuZTpQbGFuZTNEKTpudW1iZXJcblx0e1xuXHRcdHJldHVybiBQbGFuZUNsYXNzaWZpY2F0aW9uLklOVEVSU0VDVDtcblx0fVxuXG5cdC8vQG92ZXJyaWRlXG5cdHB1YmxpYyB0cmFuc2Zvcm1Gcm9tKGJvdW5kczpCb3VuZGluZ1ZvbHVtZUJhc2UsIG1hdHJpeDpNYXRyaXgzRClcblx0e1xuXHRcdHRoaXMuX2Fsd2F5c0luID0gKDxOdWxsQm91bmRzPiBib3VuZHMpLl9hbHdheXNJbjtcblx0fVxufVxuXG5leHBvcnQgPSBOdWxsQm91bmRzOyJdfQ==