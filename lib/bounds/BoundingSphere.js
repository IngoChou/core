var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BoundingVolumeBase = require("awayjs-core/lib/bounds/BoundingVolumeBase");
var PlaneClassification = require("awayjs-core/lib/geom/PlaneClassification");
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var BoundingSphere = (function (_super) {
    __extends(BoundingSphere, _super);
    function BoundingSphere() {
        _super.call(this);
        this._radius = 0;
        this._centerX = 0;
        this._centerY = 0;
        this._centerZ = 0;
    }
    Object.defineProperty(BoundingSphere.prototype, "radius", {
        get: function () {
            return this._radius;
        },
        enumerable: true,
        configurable: true
    });
    BoundingSphere.prototype.nullify = function () {
        _super.prototype.nullify.call(this);
        this._centerX = this._centerY = this._centerZ = 0;
        this._radius = 0;
    };
    BoundingSphere.prototype.isInFrustum = function (planes, numPlanes) {
        for (var i = 0; i < numPlanes; ++i) {
            var plane = planes[i];
            var flippedExtentX = plane.a < 0 ? -this._radius : this._radius;
            var flippedExtentY = plane.b < 0 ? -this._radius : this._radius;
            var flippedExtentZ = plane.c < 0 ? -this._radius : this._radius;
            var projDist = plane.a * (this._centerX + flippedExtentX) + plane.b * (this._centerY + flippedExtentY) + plane.c * (this._centerZ + flippedExtentZ) - plane.d;
            if (projDist < 0) {
                return false;
            }
        }
        return true;
    };
    BoundingSphere.prototype.fromSphere = function (center, radius) {
        this._centerX = center.x;
        this._centerY = center.y;
        this._centerZ = center.z;
        this._radius = radius;
        this._aabb.width = this._aabb.height = this._aabb.depth = radius * 2;
        this._aabb.x = this._centerX - radius;
        this._aabb.y = this._centerY + radius;
        this._aabb.z = this._centerZ - radius;
        this._pAabbPointsDirty = true;
    };
    BoundingSphere.prototype.fromExtremes = function (minX, minY, minZ, maxX, maxY, maxZ) {
        this._centerX = (maxX + minX) * .5;
        this._centerY = (maxY + minY) * .5;
        this._centerZ = (maxZ + minZ) * .5;
        var d = maxX - minX;
        var y = maxY - minY;
        var z = maxZ - minZ;
        if (y > d)
            d = y;
        if (z > d)
            d = z;
        this._radius = d * Math.sqrt(.5);
        _super.prototype.fromExtremes.call(this, minX, minY, minZ, maxX, maxY, maxZ);
    };
    BoundingSphere.prototype.clone = function () {
        var clone = new BoundingSphere();
        clone.fromSphere(new Vector3D(this._centerX, this._centerY, this._centerZ), this._radius);
        return clone;
    };
    BoundingSphere.prototype.rayIntersection = function (position, direction, targetNormal) {
        if (this.containsPoint(position)) {
            return 0;
        }
        var px = position.x - this._centerX, py = position.y - this._centerY, pz = position.z - this._centerZ;
        var vx = direction.x, vy = direction.y, vz = direction.z;
        var rayEntryDistance;
        var a = vx * vx + vy * vy + vz * vz;
        var b = 2 * (px * vx + py * vy + pz * vz);
        var c = px * px + py * py + pz * pz - this._radius * this._radius;
        var det = b * b - 4 * a * c;
        if (det >= 0) {
            var sqrtDet = Math.sqrt(det);
            rayEntryDistance = (-b - sqrtDet) / (2 * a);
            if (rayEntryDistance >= 0) {
                targetNormal.x = px + rayEntryDistance * vx;
                targetNormal.y = py + rayEntryDistance * vy;
                targetNormal.z = pz + rayEntryDistance * vz;
                targetNormal.normalize();
                return rayEntryDistance;
            }
        }
        // ray misses sphere
        return -1;
    };
    BoundingSphere.prototype.containsPoint = function (position) {
        var px = position.x - this._centerX;
        var py = position.y - this._centerY;
        var pz = position.z - this._centerZ;
        var distance = Math.sqrt(px * px + py * py + pz * pz);
        return distance <= this._radius;
    };
    //@override
    BoundingSphere.prototype.classifyToPlane = function (plane) {
        var a = plane.a;
        var b = plane.b;
        var c = plane.c;
        var dd = a * this._centerX + b * this._centerY + c * this._centerZ - plane.d;
        if (a < 0)
            a = -a;
        if (b < 0)
            b = -b;
        if (c < 0)
            c = -c;
        var rr = (a + b + c) * this._radius;
        return dd > rr ? PlaneClassification.FRONT : dd < -rr ? PlaneClassification.BACK : PlaneClassification.INTERSECT;
    };
    BoundingSphere.prototype.transformFrom = function (bounds, matrix) {
        var sphere = bounds;
        var cx = sphere._centerX;
        var cy = sphere._centerY;
        var cz = sphere._centerZ;
        var raw = new Array(16);
        matrix.copyRawDataTo(raw);
        var m11 = raw[0], m12 = raw[4], m13 = raw[8], m14 = raw[12];
        var m21 = raw[1], m22 = raw[5], m23 = raw[9], m24 = raw[13];
        var m31 = raw[2], m32 = raw[6], m33 = raw[10], m34 = raw[14];
        this._centerX = cx * m11 + cy * m12 + cz * m13 + m14;
        this._centerY = cx * m21 + cy * m22 + cz * m23 + m24;
        this._centerZ = cx * m31 + cy * m32 + cz * m33 + m34;
        if (m11 < 0)
            m11 = -m11;
        if (m12 < 0)
            m12 = -m12;
        if (m13 < 0)
            m13 = -m13;
        if (m21 < 0)
            m21 = -m21;
        if (m22 < 0)
            m22 = -m22;
        if (m23 < 0)
            m23 = -m23;
        if (m31 < 0)
            m31 = -m31;
        if (m32 < 0)
            m32 = -m32;
        if (m33 < 0)
            m33 = -m33;
        var r = sphere._radius;
        var rx = m11 + m12 + m13;
        var ry = m21 + m22 + m23;
        var rz = m31 + m32 + m33;
        this._radius = r * Math.sqrt(rx * rx + ry * ry + rz * rz);
        this._aabb.width = this._aabb.height = this._aabb.depth = this._radius * 2;
        this._aabb.x = this._centerX - this._radius;
        this._aabb.y = this._centerY + this._radius;
        this._aabb.z = this._centerZ - this._radius;
    };
    return BoundingSphere;
})(BoundingVolumeBase);
module.exports = BoundingSphere;

//# sourceMappingURL=data:application/json;base64,