var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BoundingVolumeBase = require("awayjs-core/lib/bounds/BoundingVolumeBase");

var Matrix3DUtils = require("awayjs-core/lib/core/geom/Matrix3DUtils");
var PlaneClassification = require("awayjs-core/lib/core/geom/PlaneClassification");

var Vector3D = require("awayjs-core/lib/core/geom/Vector3D");

/**
* AxisAlignedBoundingBox represents a bounding box volume that has its planes aligned to the local coordinate axes of the bounded object.
* This is useful for most meshes.
*/
var AxisAlignedBoundingBox = (function (_super) {
    __extends(AxisAlignedBoundingBox, _super);
    /**
    * Creates a new <code>AxisAlignedBoundingBox</code> object.
    */
    function AxisAlignedBoundingBox() {
        _super.call(this);
        this._centerX = 0;
        this._centerY = 0;
        this._centerZ = 0;
        this._halfExtentsX = 0;
        this._halfExtentsY = 0;
        this._halfExtentsZ = 0;
    }
    /**
    * @inheritDoc
    */
    AxisAlignedBoundingBox.prototype.nullify = function () {
        _super.prototype.nullify.call(this);

        this._centerX = this._centerY = this._centerZ = 0;
        this._halfExtentsX = this._halfExtentsY = this._halfExtentsZ = 0;
    };

    /**
    * @inheritDoc
    */
    AxisAlignedBoundingBox.prototype.isInFrustum = function (planes, numPlanes) {
        for (var i = 0; i < numPlanes; ++i) {
            var plane = planes[i];
            var a = plane.a;
            var b = plane.b;
            var c = plane.c;
            var flippedExtentX = a < 0 ? -this._halfExtentsX : this._halfExtentsX;
            var flippedExtentY = b < 0 ? -this._halfExtentsY : this._halfExtentsY;
            var flippedExtentZ = c < 0 ? -this._halfExtentsZ : this._halfExtentsZ;
            var projDist = a * (this._centerX + flippedExtentX) + b * (this._centerY + flippedExtentY) + c * (this._centerZ + flippedExtentZ) - plane.d;

            if (projDist < 0)
                return false;
        }

        return true;
    };

    AxisAlignedBoundingBox.prototype.rayIntersection = function (position, direction, targetNormal) {
        if (this.containsPoint(position))
            return 0;

        var px = position.x - this._centerX;
        var py = position.y - this._centerY;
        var pz = position.z - this._centerZ;

        var vx = direction.x;
        var vy = direction.y;
        var vz = direction.z;

        var ix;
        var iy;
        var iz;
        var rayEntryDistance;

        // ray-plane tests
        var intersects;
        if (vx < 0) {
            rayEntryDistance = (this._halfExtentsX - px) / vx;
            if (rayEntryDistance > 0) {
                iy = py + rayEntryDistance * vy;
                iz = pz + rayEntryDistance * vz;
                if (iy > -this._halfExtentsY && iy < this._halfExtentsY && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
                    targetNormal.x = 1;
                    targetNormal.y = 0;
                    targetNormal.z = 0;

                    intersects = true;
                }
            }
        }
        if (!intersects && vx > 0) {
            rayEntryDistance = (-this._halfExtentsX - px) / vx;
            if (rayEntryDistance > 0) {
                iy = py + rayEntryDistance * vy;
                iz = pz + rayEntryDistance * vz;
                if (iy > -this._halfExtentsY && iy < this._halfExtentsY && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
                    targetNormal.x = -1;
                    targetNormal.y = 0;
                    targetNormal.z = 0;
                    intersects = true;
                }
            }
        }
        if (!intersects && vy < 0) {
            rayEntryDistance = (this._halfExtentsY - py) / vy;
            if (rayEntryDistance > 0) {
                ix = px + rayEntryDistance * vx;
                iz = pz + rayEntryDistance * vz;
                if (ix > -this._halfExtentsX && ix < this._halfExtentsX && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
                    targetNormal.x = 0;
                    targetNormal.y = 1;
                    targetNormal.z = 0;
                    intersects = true;
                }
            }
        }
        if (!intersects && vy > 0) {
            rayEntryDistance = (-this._halfExtentsY - py) / vy;
            if (rayEntryDistance > 0) {
                ix = px + rayEntryDistance * vx;
                iz = pz + rayEntryDistance * vz;
                if (ix > -this._halfExtentsX && ix < this._halfExtentsX && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
                    targetNormal.x = 0;
                    targetNormal.y = -1;
                    targetNormal.z = 0;
                    intersects = true;
                }
            }
        }
        if (!intersects && vz < 0) {
            rayEntryDistance = (this._halfExtentsZ - pz) / vz;
            if (rayEntryDistance > 0) {
                ix = px + rayEntryDistance * vx;
                iy = py + rayEntryDistance * vy;
                if (iy > -this._halfExtentsY && iy < this._halfExtentsY && ix > -this._halfExtentsX && ix < this._halfExtentsX) {
                    targetNormal.x = 0;
                    targetNormal.y = 0;
                    targetNormal.z = 1;
                    intersects = true;
                }
            }
        }
        if (!intersects && vz > 0) {
            rayEntryDistance = (-this._halfExtentsZ - pz) / vz;
            if (rayEntryDistance > 0) {
                ix = px + rayEntryDistance * vx;
                iy = py + rayEntryDistance * vy;
                if (iy > -this._halfExtentsY && iy < this._halfExtentsY && ix > -this._halfExtentsX && ix < this._halfExtentsX) {
                    targetNormal.x = 0;
                    targetNormal.y = 0;
                    targetNormal.z = -1;
                    intersects = true;
                }
            }
        }

        return intersects ? rayEntryDistance : -1;
    };

    /**
    * @inheritDoc
    */
    AxisAlignedBoundingBox.prototype.containsPoint = function (position) {
        var px = position.x - this._centerX, py = position.y - this._centerY, pz = position.z - this._centerZ;
        return px <= this._halfExtentsX && px >= -this._halfExtentsX && py <= this._halfExtentsY && py >= -this._halfExtentsY && pz <= this._halfExtentsZ && pz >= -this._halfExtentsZ;
    };

    /**
    * @inheritDoc
    */
    AxisAlignedBoundingBox.prototype.fromExtremes = function (minX, minY, minZ, maxX, maxY, maxZ) {
        this._centerX = (maxX + minX) * .5;
        this._centerY = (maxY + minY) * .5;
        this._centerZ = (maxZ + minZ) * .5;
        this._halfExtentsX = (maxX - minX) * .5;
        this._halfExtentsY = (maxY - minY) * .5;
        this._halfExtentsZ = (maxZ - minZ) * .5;

        _super.prototype.fromExtremes.call(this, minX, minY, minZ, maxX, maxY, maxZ);
    };

    /**
    * @inheritDoc
    */
    AxisAlignedBoundingBox.prototype.clone = function () {
        var clone = new AxisAlignedBoundingBox();
        clone.fromExtremes(this._aabb.x, this._aabb.y + this._aabb.height, this._aabb.z, this._aabb.x + this._aabb.width, this._aabb.y, this._aabb.z + this._aabb.depth);
        return clone;
    };

    Object.defineProperty(AxisAlignedBoundingBox.prototype, "halfExtentsX", {
        get: function () {
            return this._halfExtentsX;
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(AxisAlignedBoundingBox.prototype, "halfExtentsY", {
        get: function () {
            return this._halfExtentsY;
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(AxisAlignedBoundingBox.prototype, "halfExtentsZ", {
        get: function () {
            return this._halfExtentsZ;
        },
        enumerable: true,
        configurable: true
    });

    /**
    * Finds the closest point on the bounding volume to another given point. This can be used for maximum error calculations for content within a given bound.
    * @param point The point for which to find the closest point on the bounding volume
    * @param target An optional Vector3D to store the result to prevent creating a new object.
    * @return
    */
    AxisAlignedBoundingBox.prototype.closestPointToPoint = function (point, target) {
        if (typeof target === "undefined") { target = null; }
        var p;

        if (target == null)
            target = new Vector3D();

        p = point.x;
        if (p < this._aabb.x)
            p = this._aabb.x;
        if (p > this._aabb.x + this._aabb.width)
            p = this._aabb.x + this._aabb.width;
        target.x = p;

        p = point.y;
        if (p < this._aabb.y + this._aabb.height)
            p = this._aabb.y + this._aabb.height;
        if (p > this._aabb.y)
            p = this._aabb.y;
        target.y = p;

        p = point.z;
        if (p < this._aabb.z)
            p = this._aabb.z;
        if (p > this._aabb.z + this._aabb.depth)
            p = this._aabb.z + this._aabb.depth;
        target.z = p;

        return target;
    };

    AxisAlignedBoundingBox.prototype.pUpdateBoundingRenderable = function () {
        this._pBoundingEntity.transform.scale.x = Math.max(this._halfExtentsX * 2, 0.001);
        this._pBoundingEntity.transform.scale.y = Math.max(this._halfExtentsY * 2, 0.001);
        this._pBoundingEntity.transform.scale.z = Math.max(this._halfExtentsZ * 2, 0.001);
        this._pBoundingEntity.transform.position.x = this._centerX;
        this._pBoundingEntity.transform.position.y = this._centerY;
        this._pBoundingEntity.transform.position.z = this._centerZ;
    };

    AxisAlignedBoundingBox.prototype.pCreateBoundingEntity = function () {
        return null;
    };

    AxisAlignedBoundingBox.prototype.classifyToPlane = function (plane) {
        var a = plane.a;
        var b = plane.b;
        var c = plane.c;
        var centerDistance = a * this._centerX + b * this._centerY + c * this._centerZ - plane.d;

        if (a < 0)
            a = -a;

        if (b < 0)
            b = -b;

        if (c < 0)
            c = -c;

        var boundOffset = a * this._halfExtentsX + b * this._halfExtentsY + c * this._halfExtentsZ;

        return centerDistance > boundOffset ? PlaneClassification.FRONT : centerDistance < -boundOffset ? PlaneClassification.BACK : PlaneClassification.INTERSECT;
    };

    AxisAlignedBoundingBox.prototype.transformFrom = function (bounds, matrix) {
        var aabb = bounds;
        var cx = aabb._centerX;
        var cy = aabb._centerY;
        var cz = aabb._centerZ;
        var raw = Matrix3DUtils.RAW_DATA_CONTAINER;

        matrix.copyRawDataTo(raw);

        var m11 = raw[0], m12 = raw[4], m13 = raw[8], m14 = raw[12];
        var m21 = raw[1], m22 = raw[5], m23 = raw[9], m24 = raw[13];
        var m31 = raw[2], m32 = raw[6], m33 = raw[10], m34 = raw[14];

        this._centerX = cx * m11 + cy * m12 + cz * m13 + m14;
        this._centerY = cx * m21 + cy * m22 + cz * m23 + m24;
        this._centerZ = cx * m31 + cy * m32 + cz * m33 + m34;

        if (m11 < 0)
            m11 = -m11;
        if (m12 < 0)
            m12 = -m12;
        if (m13 < 0)
            m13 = -m13;
        if (m21 < 0)
            m21 = -m21;
        if (m22 < 0)
            m22 = -m22;
        if (m23 < 0)
            m23 = -m23;
        if (m31 < 0)
            m31 = -m31;
        if (m32 < 0)
            m32 = -m32;
        if (m33 < 0)
            m33 = -m33;
        var hx = aabb._halfExtentsX;
        var hy = aabb._halfExtentsY;
        var hz = aabb._halfExtentsZ;
        this._halfExtentsX = hx * m11 + hy * m12 + hz * m13;
        this._halfExtentsY = hx * m21 + hy * m22 + hz * m23;
        this._halfExtentsZ = hx * m31 + hy * m32 + hz * m33;

        this._aabb.width = this._aabb.height = this._aabb.depth = this._halfExtentsX * 2;
        this._aabb.x = this._centerX - this._halfExtentsX;
        this._aabb.y = this._centerY + this._halfExtentsY;
        this._aabb.z = this._centerZ - this._halfExtentsZ;
    };
    return AxisAlignedBoundingBox;
})(BoundingVolumeBase);

module.exports = AxisAlignedBoundingBox;

//# sourceMappingURL=data:application/json;base64,