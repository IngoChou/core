var Box = require("awayjs-core/lib/geom/Box");
var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var BoundingVolumeBase = (function () {
    function BoundingVolumeBase() {
        this._pAabbPoints = new Array();
        this._pAabbPointsDirty = true;
        this._aabb = new Box();
    }
    Object.defineProperty(BoundingVolumeBase.prototype, "aabb", {
        get: function () {
            return this._aabb;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BoundingVolumeBase.prototype, "aabbPoints", {
        get: function () {
            if (this._pAabbPointsDirty)
                this.pUpdateAABBPoints();
            return this._pAabbPoints;
        },
        enumerable: true,
        configurable: true
    });
    BoundingVolumeBase.prototype.nullify = function () {
        this._aabb.x = this._aabb.y = this._aabb.z = 0;
        this._aabb.width = this._aabb.height = this._aabb.depth = 0;
        this._pAabbPointsDirty = true;
    };
    BoundingVolumeBase.prototype.fromVertices = function (vertices) {
        var i;
        var len = vertices.length;
        var minX, minY, minZ;
        var maxX, maxY, maxZ;
        if (len == 0) {
            this.nullify();
            return;
        }
        var v;
        minX = maxX = vertices[i++];
        minY = maxY = vertices[i++];
        minZ = maxZ = vertices[i++];
        while (i < len) {
            v = vertices[i++];
            if (v < minX)
                minX = v;
            else if (v > maxX)
                maxX = v;
            v = vertices[i++];
            if (v < minY)
                minY = v;
            else if (v > maxY)
                maxY = v;
            v = vertices[i++];
            if (v < minZ)
                minZ = v;
            else if (v > maxZ)
                maxZ = v;
        }
        this.fromExtremes(minX, minY, minZ, maxX, maxY, maxZ);
    };
    BoundingVolumeBase.prototype.fromSphere = function (center, radius) {
        this.fromExtremes(center.x - radius, center.y - radius, center.z - radius, center.x + radius, center.y + radius, center.z + radius);
    };
    BoundingVolumeBase.prototype.fromExtremes = function (minX, minY, minZ, maxX, maxY, maxZ) {
        this._aabb.x = minX;
        this._aabb.y = maxY;
        this._aabb.z = minZ;
        this._aabb.width = maxX - minX;
        this._aabb.height = maxY - minY;
        this._aabb.depth = maxZ - minZ;
        this._pAabbPointsDirty = true;
    };
    BoundingVolumeBase.prototype.isInFrustum = function (planes, numPlanes) {
        throw new AbstractMethodError();
    };
    BoundingVolumeBase.prototype.overlaps = function (bounds) {
        return this._aabb.intersects(bounds.aabb);
    };
    BoundingVolumeBase.prototype.clone = function () {
        throw new AbstractMethodError();
    };
    BoundingVolumeBase.prototype.rayIntersection = function (position, direction, targetNormal) {
        return -1;
    };
    BoundingVolumeBase.prototype.containsPoint = function (position) {
        return false;
    };
    BoundingVolumeBase.prototype.pUpdateAABBPoints = function () {
        var minX = this._aabb.x;
        var minY = this._aabb.y - this._aabb.height;
        var minZ = this._aabb.z;
        var maxX = this._aabb.x + this._aabb.width;
        var maxY = this._aabb.y;
        var maxZ = this._aabb.z + this._aabb.depth;
        this._pAabbPoints[0] = minX;
        this._pAabbPoints[1] = minY;
        this._pAabbPoints[2] = minZ;
        this._pAabbPoints[3] = maxX;
        this._pAabbPoints[4] = minY;
        this._pAabbPoints[5] = minZ;
        this._pAabbPoints[6] = minX;
        this._pAabbPoints[7] = maxY;
        this._pAabbPoints[8] = minZ;
        this._pAabbPoints[9] = maxX;
        this._pAabbPoints[10] = maxY;
        this._pAabbPoints[11] = minZ;
        this._pAabbPoints[12] = minX;
        this._pAabbPoints[13] = minY;
        this._pAabbPoints[14] = maxZ;
        this._pAabbPoints[15] = maxX;
        this._pAabbPoints[16] = minY;
        this._pAabbPoints[17] = maxZ;
        this._pAabbPoints[18] = minX;
        this._pAabbPoints[19] = maxY;
        this._pAabbPoints[20] = maxZ;
        this._pAabbPoints[21] = maxX;
        this._pAabbPoints[22] = maxY;
        this._pAabbPoints[23] = maxZ;
        this._pAabbPointsDirty = false;
    };
    BoundingVolumeBase.prototype.classifyToPlane = function (plane) {
        throw new AbstractMethodError();
    };
    BoundingVolumeBase.prototype.transformFrom = function (bounds, matrix) {
        throw new AbstractMethodError();
    };
    return BoundingVolumeBase;
})();
module.exports = BoundingVolumeBase;

//# sourceMappingURL=data:application/json;base64,