var Box = require("awayjs-core/lib/geom/Box");
var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var BoundingVolumeBase = (function () {
    function BoundingVolumeBase() {
        this._pAabbPoints = new Array();
        this._pAabbPointsDirty = true;
        this._aabb = new Box();
    }
    Object.defineProperty(BoundingVolumeBase.prototype, "aabb", {
        get: function () {
            return this._aabb;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BoundingVolumeBase.prototype, "aabbPoints", {
        get: function () {
            if (this._pAabbPointsDirty)
                this.pUpdateAABBPoints();
            return this._pAabbPoints;
        },
        enumerable: true,
        configurable: true
    });
    BoundingVolumeBase.prototype.nullify = function () {
        this._aabb.x = this._aabb.y = this._aabb.z = 0;
        this._aabb.width = this._aabb.height = this._aabb.depth = 0;
        this._pAabbPointsDirty = true;
    };
    BoundingVolumeBase.prototype.fromVertices = function (vertices) {
        var i;
        var len = vertices.length;
        if (len == 0) {
            this.nullify();
            return;
        }
        var v;
        this.minX = this.maxX = vertices[i++];
        this.minY = this.maxY = vertices[i++];
        this.minZ = this.maxZ = vertices[i++];
        while (i < len) {
            v = vertices[i++];
            if (v < this.minX)
                this.minX = v;
            else if (v > this.maxX)
                this.maxX = v;
            v = vertices[i++];
            if (v < this.minY)
                this.minY = v;
            else if (v > this.maxY)
                this.maxY = v;
            v = vertices[i++];
            if (v < this.minZ)
                this.minZ = v;
            else if (v > this.maxZ)
                this.maxZ = v;
        }
        this.fromExtremes(this.minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ);
    };
    BoundingVolumeBase.prototype.fromSphere = function (center, radius) {
        this.fromExtremes(center.x - radius, center.y - radius, center.z - radius, center.x + radius, center.y + radius, center.z + radius);
    };
    BoundingVolumeBase.prototype.fromExtremes = function (minX, minY, minZ, maxX, maxY, maxZ) {
        this._aabb.x = minX;
        this._aabb.y = maxY;
        this._aabb.z = minZ;
        this._aabb.width = maxX - minX;
        this._aabb.height = maxY - minY;
        this._aabb.depth = maxZ - minZ;
        this._pAabbPointsDirty = true;
    };
    BoundingVolumeBase.prototype.isInFrustum = function (planes, numPlanes) {
        throw new AbstractMethodError();
    };
    BoundingVolumeBase.prototype.overlaps = function (bounds) {
        return this._aabb.intersects(bounds.aabb);
    };
    BoundingVolumeBase.prototype.clone = function () {
        throw new AbstractMethodError();
    };
    BoundingVolumeBase.prototype.rayIntersection = function (position, direction, targetNormal) {
        return -1;
    };
    BoundingVolumeBase.prototype.containsPoint = function (position) {
        return false;
    };
    BoundingVolumeBase.prototype.pUpdateAABBPoints = function () {
        this.minX = this._aabb.x;
        this.minY = this._aabb.y - this._aabb.height;
        this.minZ = this._aabb.z;
        this.maxX = this._aabb.x + this._aabb.width;
        this.maxY = this._aabb.y;
        this.maxZ = this._aabb.z + this._aabb.depth;
        this._pAabbPoints[0] = this.minX;
        this._pAabbPoints[1] = this.minY;
        this._pAabbPoints[2] = this.minZ;
        this._pAabbPoints[3] = this.maxX;
        this._pAabbPoints[4] = this.minY;
        this._pAabbPoints[5] = this.minZ;
        this._pAabbPoints[6] = this.minX;
        this._pAabbPoints[7] = this.maxY;
        this._pAabbPoints[8] = this.minZ;
        this._pAabbPoints[9] = this.maxX;
        this._pAabbPoints[10] = this.maxY;
        this._pAabbPoints[11] = this.minZ;
        this._pAabbPoints[12] = this.minX;
        this._pAabbPoints[13] = this.minY;
        this._pAabbPoints[14] = this.maxZ;
        this._pAabbPoints[15] = this.maxX;
        this._pAabbPoints[16] = this.minY;
        this._pAabbPoints[17] = this.maxZ;
        this._pAabbPoints[18] = this.minX;
        this._pAabbPoints[19] = this.maxY;
        this._pAabbPoints[20] = this.maxZ;
        this._pAabbPoints[21] = this.maxX;
        this._pAabbPoints[22] = this.maxY;
        this._pAabbPoints[23] = this.maxZ;
        this._pAabbPointsDirty = false;
    };
    BoundingVolumeBase.prototype.classifyToPlane = function (plane) {
        throw new AbstractMethodError();
    };
    BoundingVolumeBase.prototype.transformFrom = function (bounds, matrix) {
        throw new AbstractMethodError();
    };
    return BoundingVolumeBase;
})();
module.exports = BoundingVolumeBase;

//# sourceMappingURL=data:application/json;base64,