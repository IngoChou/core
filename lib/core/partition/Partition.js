var NullNode = require("awayjs-core/lib/core/partition/NullNode");

/**
* @class away.partition.Partition
*/
var Partition = (function () {
    function Partition(rootNode) {
        this._updatesMade = false;
        this._rootNode = rootNode || new NullNode();
    }
    Object.defineProperty(Partition.prototype, "rootNode", {
        get: function () {
            return this._rootNode;
        },
        enumerable: true,
        configurable: true
    });

    Partition.prototype.traverse = function (traverser) {
        if (this._updatesMade)
            this.updateEntities();

        this._rootNode.acceptTraverser(traverser);
    };

    Partition.prototype.iMarkForUpdate = function (entity) {
        var node = entity.partitionNode;
        var t = this._updateQueue;

        while (t) {
            if (node == t)
                return;

            t = t._iUpdateQueueNext;
        }

        node._iUpdateQueueNext = this._updateQueue;

        this._updateQueue = node;
        this._updatesMade = true;
    };

    Partition.prototype.iRemoveEntity = function (entity) {
        var node = entity.partitionNode;
        var t;

        node.removeFromParent();

        if (node == this._updateQueue) {
            this._updateQueue = node._iUpdateQueueNext;
        } else {
            t = this._updateQueue;
            while (t && t._iUpdateQueueNext != node)
                t = t._iUpdateQueueNext;

            if (t)
                t._iUpdateQueueNext = node._iUpdateQueueNext;
        }

        node._iUpdateQueueNext = null;

        if (!this._updateQueue)
            this._updatesMade = false;
    };

    Partition.prototype.updateEntities = function () {
        var node = this._updateQueue;
        var targetNode;
        var t;
        this._updateQueue = null;
        this._updatesMade = false;

        do {
            targetNode = this._rootNode.findPartitionForEntity(node.entity);

            if (node.parent != targetNode) {
                if (node)
                    node.removeFromParent();

                targetNode.iAddNode(node);
            }

            t = node._iUpdateQueueNext;
            node._iUpdateQueueNext = null;

            //required for controllers with autoUpdate set to true
            node.entity._iInternalUpdate();
        } while((node = t) != null);
    };
    return Partition;
})();

module.exports = Partition;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvcGFydGl0aW9uL1BhcnRpdGlvbi50cyJdLCJuYW1lcyI6WyJQYXJ0aXRpb24iLCJQYXJ0aXRpb24uY29uc3RydWN0b3IiLCJQYXJ0aXRpb24udHJhdmVyc2UiLCJQYXJ0aXRpb24uaU1hcmtGb3JVcGRhdGUiLCJQYXJ0aXRpb24uaVJlbW92ZUVudGl0eSIsIlBhcnRpdGlvbi51cGRhdGVFbnRpdGllcyJdLCJtYXBwaW5ncyI6IkFBQUEsaUVBRzBFOztBQUcxRTs7RUFFRztBQUNIO0lBT0NBLG1CQUFZQSxRQUFpQkE7UUFIN0JDLEtBQVFBLFlBQVlBLEdBQVdBLEtBQUtBLENBQUNBO1FBS3BDQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxRQUFRQSxJQUFlQSxJQUFJQSxRQUFRQSxDQUFDQSxDQUFDQTtJQUN2REEsQ0FBQ0E7SUFFREQ7UUFBQUEsS0FBQUE7WUFFQ0EsT0FBT0EsSUFBSUEsQ0FBQ0EsU0FBU0E7UUFDdEJBLENBQUNBOzs7O0FBQUFBO0lBRURBLCtCQUFBQSxVQUFnQkEsU0FBb0JBO1FBRW5DRSxJQUFJQSxJQUFJQSxDQUFDQSxZQUFZQTtZQUNwQkEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7O1FBRXZCQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxlQUFlQSxDQUFDQSxTQUFTQSxDQUFDQTtJQUMxQ0EsQ0FBQ0E7O0lBRURGLHFDQUFBQSxVQUFzQkEsTUFBb0JBO1FBRXpDRyxJQUFJQSxJQUFJQSxHQUFjQSxNQUFNQSxDQUFDQSxhQUFhQTtRQUMxQ0EsSUFBSUEsQ0FBQ0EsR0FBY0EsSUFBSUEsQ0FBQ0EsWUFBWUE7O1FBRXBDQSxPQUFPQSxDQUFDQSxDQUFFQTtZQUNUQSxJQUFJQSxJQUFJQSxJQUFJQSxDQUFDQTtnQkFDWkEsTUFBT0EsQ0FBQUE7O1lBRVJBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLGlCQUFpQkE7U0FDdkJBOztRQUVEQSxJQUFJQSxDQUFDQSxpQkFBaUJBLEdBQUdBLElBQUlBLENBQUNBLFlBQVlBOztRQUUxQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUE7UUFDeEJBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBO0lBQ3pCQSxDQUFDQTs7SUFFREgsb0NBQUFBLFVBQXFCQSxNQUFvQkE7UUFFeENJLElBQUlBLElBQUlBLEdBQWNBLE1BQU1BLENBQUNBLGFBQWFBO1FBQzFDQSxJQUFJQSxDQUFDQTs7UUFFTEEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxDQUFDQTs7UUFFdkJBLElBQUlBLElBQUlBLElBQUlBLElBQUlBLENBQUNBLFlBQVlBLENBQUVBO1lBQzlCQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQSxpQkFBaUJBO1NBQzFDQSxLQUFNQTtZQUNOQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQTtZQUNyQkEsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsaUJBQWlCQSxJQUFJQSxJQUFJQTtnQkFDdENBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLGlCQUFpQkEsQ0FBQ0E7O1lBRXpCQSxJQUFJQSxDQUFDQTtnQkFDSkEsQ0FBQ0EsQ0FBQ0EsaUJBQWlCQSxHQUFHQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBO1NBQzlDQTs7UUFFREEsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxHQUFHQSxJQUFJQTs7UUFFN0JBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBO1lBQ3JCQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxLQUFLQSxDQUFDQTtJQUM1QkEsQ0FBQ0E7O0lBRURKLHFDQUFBQTtRQUVDSyxJQUFJQSxJQUFJQSxHQUFjQSxJQUFJQSxDQUFDQSxZQUFZQTtRQUN2Q0EsSUFBSUEsVUFBVUE7UUFDZEEsSUFBSUEsQ0FBQ0E7UUFDTEEsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUE7UUFDeEJBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLEtBQUtBOztRQUV6QkEsRUFBR0E7WUFDRkEsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTs7WUFFL0RBLElBQUlBLElBQUlBLENBQUNBLE1BQU1BLElBQUlBLFVBQVVBLENBQUVBO2dCQUM5QkEsSUFBSUEsSUFBSUE7b0JBQ1BBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7O2dCQUV6QkEsVUFBVUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7YUFDekJBOztZQUVEQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxpQkFBaUJBO1lBQzFCQSxJQUFJQSxDQUFDQSxpQkFBaUJBLEdBQUdBLElBQUlBOztZQUU3QkEsc0RBQXNEQTtZQUN0REEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxDQUFDQTtTQUU5QkEsTUFBTUEsQ0FBRUEsQ0FBQ0EsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBRUE7SUFDOUJBLENBQUNBO0lBQ0ZMLGlCQUFDQTtBQUFEQSxDQUFDQSxJQUFBOztBQUVELDBCQUFtQixDQUFBIiwiZmlsZSI6ImNvcmUvcGFydGl0aW9uL1BhcnRpdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1jb3JlLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEaXNwbGF5T2JqZWN0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9iYXNlL0Rpc3BsYXlPYmplY3RcIik7XG5pbXBvcnQgRW50aXR5Tm9kZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9wYXJ0aXRpb24vRW50aXR5Tm9kZVwiKTtcbmltcG9ydCBOb2RlQmFzZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL3BhcnRpdGlvbi9Ob2RlQmFzZVwiKTtcbmltcG9ydCBOdWxsTm9kZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL3BhcnRpdGlvbi9OdWxsTm9kZVwiKTtcbmltcG9ydCBJQ29sbGVjdG9yXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL3RyYXZlcnNlL0lDb2xsZWN0b3JcIik7XG5cbi8qKlxuICogQGNsYXNzIGF3YXkucGFydGl0aW9uLlBhcnRpdGlvblxuICovXG5jbGFzcyBQYXJ0aXRpb25cbntcblxuXHRwdWJsaWMgX3Jvb3ROb2RlOk5vZGVCYXNlO1xuXHRwcml2YXRlIF91cGRhdGVzTWFkZTpCb29sZWFuID0gZmFsc2U7XG5cdHByaXZhdGUgX3VwZGF0ZVF1ZXVlOkVudGl0eU5vZGU7XG5cblx0Y29uc3RydWN0b3Iocm9vdE5vZGU6Tm9kZUJhc2UpXG5cdHtcblx0XHR0aGlzLl9yb290Tm9kZSA9IHJvb3ROb2RlIHx8IDxOb2RlQmFzZT4gbmV3IE51bGxOb2RlKCk7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IHJvb3ROb2RlKCk6Tm9kZUJhc2Vcblx0e1xuXHRcdHJldHVybiB0aGlzLl9yb290Tm9kZTtcblx0fVxuXG5cdHB1YmxpYyB0cmF2ZXJzZSh0cmF2ZXJzZXI6SUNvbGxlY3Rvcilcblx0e1xuXHRcdGlmICh0aGlzLl91cGRhdGVzTWFkZSlcblx0XHRcdHRoaXMudXBkYXRlRW50aXRpZXMoKTtcblxuXHRcdHRoaXMuX3Jvb3ROb2RlLmFjY2VwdFRyYXZlcnNlcih0cmF2ZXJzZXIpO1xuXHR9XG5cblx0cHVibGljIGlNYXJrRm9yVXBkYXRlKGVudGl0eTpEaXNwbGF5T2JqZWN0KVxuXHR7XG5cdFx0dmFyIG5vZGU6RW50aXR5Tm9kZSA9IGVudGl0eS5wYXJ0aXRpb25Ob2RlO1xuXHRcdHZhciB0OkVudGl0eU5vZGUgPSB0aGlzLl91cGRhdGVRdWV1ZTtcblxuXHRcdHdoaWxlICh0KSB7XG5cdFx0XHRpZiAobm9kZSA9PSB0KVxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdHQgPSB0Ll9pVXBkYXRlUXVldWVOZXh0O1xuXHRcdH1cblxuXHRcdG5vZGUuX2lVcGRhdGVRdWV1ZU5leHQgPSB0aGlzLl91cGRhdGVRdWV1ZTtcblxuXHRcdHRoaXMuX3VwZGF0ZVF1ZXVlID0gbm9kZTtcblx0XHR0aGlzLl91cGRhdGVzTWFkZSA9IHRydWU7XG5cdH1cblxuXHRwdWJsaWMgaVJlbW92ZUVudGl0eShlbnRpdHk6RGlzcGxheU9iamVjdClcblx0e1xuXHRcdHZhciBub2RlOkVudGl0eU5vZGUgPSBlbnRpdHkucGFydGl0aW9uTm9kZTtcblx0XHR2YXIgdDpFbnRpdHlOb2RlO1xuXG5cdFx0bm9kZS5yZW1vdmVGcm9tUGFyZW50KCk7XG5cblx0XHRpZiAobm9kZSA9PSB0aGlzLl91cGRhdGVRdWV1ZSkge1xuXHRcdFx0dGhpcy5fdXBkYXRlUXVldWUgPSBub2RlLl9pVXBkYXRlUXVldWVOZXh0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0ID0gdGhpcy5fdXBkYXRlUXVldWU7XG5cdFx0XHR3aGlsZSAodCAmJiB0Ll9pVXBkYXRlUXVldWVOZXh0ICE9IG5vZGUpXG5cdFx0XHRcdHQgPSB0Ll9pVXBkYXRlUXVldWVOZXh0O1xuXG5cdFx0XHRpZiAodClcblx0XHRcdFx0dC5faVVwZGF0ZVF1ZXVlTmV4dCA9IG5vZGUuX2lVcGRhdGVRdWV1ZU5leHQ7XG5cdFx0fVxuXG5cdFx0bm9kZS5faVVwZGF0ZVF1ZXVlTmV4dCA9IG51bGw7XG5cblx0XHRpZiAoIXRoaXMuX3VwZGF0ZVF1ZXVlKVxuXHRcdFx0dGhpcy5fdXBkYXRlc01hZGUgPSBmYWxzZTtcblx0fVxuXG5cdHByaXZhdGUgdXBkYXRlRW50aXRpZXMoKVxuXHR7XG5cdFx0dmFyIG5vZGU6RW50aXR5Tm9kZSA9IHRoaXMuX3VwZGF0ZVF1ZXVlO1xuXHRcdHZhciB0YXJnZXROb2RlOk5vZGVCYXNlO1xuXHRcdHZhciB0OkVudGl0eU5vZGU7XG5cdFx0dGhpcy5fdXBkYXRlUXVldWUgPSBudWxsO1xuXHRcdHRoaXMuX3VwZGF0ZXNNYWRlID0gZmFsc2U7XG5cblx0XHRkbyB7XG5cdFx0XHR0YXJnZXROb2RlID0gdGhpcy5fcm9vdE5vZGUuZmluZFBhcnRpdGlvbkZvckVudGl0eShub2RlLmVudGl0eSk7XG5cblx0XHRcdGlmIChub2RlLnBhcmVudCAhPSB0YXJnZXROb2RlKSB7XG5cdFx0XHRcdGlmIChub2RlKVxuXHRcdFx0XHRcdG5vZGUucmVtb3ZlRnJvbVBhcmVudCgpO1xuXG5cdFx0XHRcdHRhcmdldE5vZGUuaUFkZE5vZGUobm9kZSk7XG5cdFx0XHR9XG5cblx0XHRcdHQgPSBub2RlLl9pVXBkYXRlUXVldWVOZXh0O1xuXHRcdFx0bm9kZS5faVVwZGF0ZVF1ZXVlTmV4dCA9IG51bGw7XG5cblx0XHRcdC8vcmVxdWlyZWQgZm9yIGNvbnRyb2xsZXJzIHdpdGggYXV0b1VwZGF0ZSBzZXQgdG8gdHJ1ZVxuXHRcdFx0bm9kZS5lbnRpdHkuX2lJbnRlcm5hbFVwZGF0ZSgpO1xuXG5cdFx0fSB3aGlsZSAoKG5vZGUgPSB0KSAhPSBudWxsKTtcblx0fVxufVxuXG5leHBvcnQgPSBQYXJ0aXRpb247Il19