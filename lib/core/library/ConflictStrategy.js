var ErrorConflictStrategy = require("awayjs-core/lib/core/library/ErrorConflictStrategy");
var IgnoreConflictStrategy = require("awayjs-core/lib/core/library/IgnoreConflictStrategy");
var NumSuffixConflictStrategy = require("awayjs-core/lib/core/library/NumSuffixConflictStrategy");

/**
* Enumeration class for bundled conflict strategies. Set one of these values (or an
* instance of a self-defined sub-class of ConflictStrategyBase) to the conflictStrategy
* property on an AssetLibrary to define how that library resolves naming conflicts.
*
* The value of the <code>AssetLibrary.conflictPrecedence</code> property defines which
* of the conflicting assets will get to keep it's name, and which is renamed (if any.)
*
* @see away.library.AssetLibrary.conflictStrategy
* @see away.library.naming.ConflictStrategyBase
*/
var ConflictStrategy = (function () {
    function ConflictStrategy(include) {
        //TODO: find out why typescript d.ts files do not include this class
    }
    ConflictStrategy.APPEND_NUM_SUFFIX = new NumSuffixConflictStrategy();

    ConflictStrategy.IGNORE = new IgnoreConflictStrategy();

    ConflictStrategy.THROW_ERROR = new ErrorConflictStrategy();
    return ConflictStrategy;
})();

module.exports = ConflictStrategy;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvbGlicmFyeS9Db25mbGljdFN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbIkNvbmZsaWN0U3RyYXRlZ3kiLCJDb25mbGljdFN0cmF0ZWd5LmNvbnN0cnVjdG9yIl0sIm1hcHBpbmdzIjoiQUFBQSx5RkFDOEY7QUFDOUYsMkZBQWdHO0FBQ2hHLGlHQUFxRzs7QUFFckc7Ozs7Ozs7Ozs7RUFVRztBQUNIO0lBc0JDQSwwQkFBWUEsT0FBNkJBO1FBRXhDQyxvRUFBb0VBO0lBQ3JFQSxDQUFDQTtJQW5CREQscUNBQXVEQSxJQUFJQSx5QkFBeUJBLENBQUNBLENBQUNBOztJQU90RkEsMEJBQTRDQSxJQUFJQSxzQkFBc0JBLENBQUNBLENBQUNBOztJQU94RUEsK0JBQWlEQSxJQUFJQSxxQkFBcUJBLENBQUNBLENBQUNBO0lBTTdFQSx3QkFBQ0E7QUFBREEsQ0FBQ0EsSUFBQTs7QUFFRCxpQ0FBMEIsQ0FBQSIsImZpbGUiOiJjb3JlL2xpYnJhcnkvQ29uZmxpY3RTdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1jb3JlLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb25mbGljdFN0cmF0ZWd5QmFzZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2xpYnJhcnkvQ29uZmxpY3RTdHJhdGVneUJhc2VcIik7XG5pbXBvcnQgRXJyb3JDb25mbGljdFN0cmF0ZWd5XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2xpYnJhcnkvRXJyb3JDb25mbGljdFN0cmF0ZWd5XCIpO1xuaW1wb3J0IElnbm9yZUNvbmZsaWN0U3RyYXRlZ3lcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2NvcmUvbGlicmFyeS9JZ25vcmVDb25mbGljdFN0cmF0ZWd5XCIpO1xuaW1wb3J0IE51bVN1ZmZpeENvbmZsaWN0U3RyYXRlZ3lcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2xpYnJhcnkvTnVtU3VmZml4Q29uZmxpY3RTdHJhdGVneVwiKTtcblxuLyoqXG4gKiBFbnVtZXJhdGlvbiBjbGFzcyBmb3IgYnVuZGxlZCBjb25mbGljdCBzdHJhdGVnaWVzLiBTZXQgb25lIG9mIHRoZXNlIHZhbHVlcyAob3IgYW5cbiAqIGluc3RhbmNlIG9mIGEgc2VsZi1kZWZpbmVkIHN1Yi1jbGFzcyBvZiBDb25mbGljdFN0cmF0ZWd5QmFzZSkgdG8gdGhlIGNvbmZsaWN0U3RyYXRlZ3lcbiAqIHByb3BlcnR5IG9uIGFuIEFzc2V0TGlicmFyeSB0byBkZWZpbmUgaG93IHRoYXQgbGlicmFyeSByZXNvbHZlcyBuYW1pbmcgY29uZmxpY3RzLlxuICpcbiAqIFRoZSB2YWx1ZSBvZiB0aGUgPGNvZGU+QXNzZXRMaWJyYXJ5LmNvbmZsaWN0UHJlY2VkZW5jZTwvY29kZT4gcHJvcGVydHkgZGVmaW5lcyB3aGljaFxuICogb2YgdGhlIGNvbmZsaWN0aW5nIGFzc2V0cyB3aWxsIGdldCB0byBrZWVwIGl0J3MgbmFtZSwgYW5kIHdoaWNoIGlzIHJlbmFtZWQgKGlmIGFueS4pXG4gKlxuICogQHNlZSBhd2F5LmxpYnJhcnkuQXNzZXRMaWJyYXJ5LmNvbmZsaWN0U3RyYXRlZ3lcbiAqIEBzZWUgYXdheS5saWJyYXJ5Lm5hbWluZy5Db25mbGljdFN0cmF0ZWd5QmFzZVxuICovXG5jbGFzcyBDb25mbGljdFN0cmF0ZWd5XG57XG5cdC8qKlxuXHQgKiBTcGVjaWZpZXMgdGhhdCBpbiBjYXNlIG9mIGEgbmFtaW5nIGNvbmZsaWN0LCBvbmUgb2YgdGhlIGFzc2V0cyB3aWxsIGJlIHJlbmFtZWQgYW5kXG5cdCAqIGEgbnVtZXJpYyBzdWZmaXggYXBwZW5kZWQgdG8gdGhlIGJhc2UgbmFtZS5cblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgQVBQRU5EX05VTV9TVUZGSVg6Q29uZmxpY3RTdHJhdGVneUJhc2UgPSBuZXcgTnVtU3VmZml4Q29uZmxpY3RTdHJhdGVneSgpO1xuXG5cdC8qKlxuXHQgKiBTcGVjaWZpZXMgdGhhdCBuYW1pbmcgY29uZmxpY3RzIHNob3VsZCBiZSBpZ25vcmVkLiBUaGlzIGlzIG5vdCByZWNvbW1lbmRlZCBpbiBtb3N0XG5cdCAqIGNhc2VzLCB1bmxlc3MgaXQgY2FuIGJlIDEwMCUgZ3VhcmFudGVlZCB0aGF0IHRoZSBhcHBsaWNhdGlvbiBkb2VzIG5vdCBjYXVzZSBuYW1pbmdcblx0ICogY29uZmxpY3RzIGluIHRoZSBsaWJyYXJ5IChpLmUuIHdoZW4gYW4gYXBwLWxldmVsIHN5c3RlbSBpcyBpbiBwbGFjZSB0byBwcmV2ZW50IHRoaXMuKVxuXHQgKi9cblx0cHVibGljIHN0YXRpYyBJR05PUkU6Q29uZmxpY3RTdHJhdGVneUJhc2UgPSBuZXcgSWdub3JlQ29uZmxpY3RTdHJhdGVneSgpO1xuXG5cdC8qKlxuXHQgKiBTcGVjaWZpZXMgdGhhdCBhbiBlcnJvciBzaG91bGQgYmUgdGhyb3duIGlmIGEgbmFtaW5nIGNvbmZsaWN0IGlzIGRpc2NvdmVyZWQuIFVzZSB0aGlzXG5cdCAqIHRvIGJlIDEwMCUgc3VyZSB0aGF0IG5hbWluZyBjb25mbGljdHMgbmV2ZXIgb2NjdXIgdW5ub3RpY2VkLCBhbmQgd2hlbiBpdCdzIHVuZGVzaXJhYmxlXG5cdCAqIHRvIGhhdmUgdGhlIGxpYnJhcnkgYXV0b21hdGljYWxseSByZW5hbWUgYXNzZXRzIHRvIGF2b2lkIHN1Y2ggY29uZmxpY3RzLlxuXHQgKi9cblx0cHVibGljIHN0YXRpYyBUSFJPV19FUlJPUjpDb25mbGljdFN0cmF0ZWd5QmFzZSA9IG5ldyBFcnJvckNvbmZsaWN0U3RyYXRlZ3koKTtcblxuXHRjb25zdHJ1Y3RvcihpbmNsdWRlPzpDb25mbGljdFN0cmF0ZWd5QmFzZSlcblx0e1xuXHRcdC8vVE9ETzogZmluZCBvdXQgd2h5IHR5cGVzY3JpcHQgZC50cyBmaWxlcyBkbyBub3QgaW5jbHVkZSB0aGlzIGNsYXNzXG5cdH1cbn1cblxuZXhwb3J0ID0gQ29uZmxpY3RTdHJhdGVneTsiXX0=