var ConflictPrecedence = require("awayjs-core/lib/core/library/ConflictPrecedence");

var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var AssetEvent = require("awayjs-core/lib/events/AssetEvent");

/**
* Abstract base class for naming conflict resolution classes. Extend this to create a
* strategy class which the asset library can use to resolve asset naming conflicts, or
* use one of the bundled concrete strategy classes:
*
* <ul>
*   <li>IgnoreConflictStrategy (ConflictStrategy.IGNORE)</li>
*   <li>ErrorConflictStrategy (ConflictStrategy.THROW_ERROR)</li>
*   <li>NumSuffixConflictStrategy (ConflictStrategy.APPEND_NUM_SUFFIX)</li>
* </ul>
*
* @see away.library.AssetLibrary.conflictStrategy
* @see away.library.ConflictStrategy
* @see away.library.IgnoreConflictStrategy
* @see away.library.ErrorConflictStrategy
* @see away.library.NumSuffixConflictStrategy
*/
var ConflictStrategyBase = (function () {
    function ConflictStrategyBase() {
    }
    /**
    * Resolve a naming conflict between two assets. Must be implemented by concrete strategy
    * classes.
    */
    ConflictStrategyBase.prototype.resolveConflict = function (changedAsset, oldAsset, assetsDictionary, precedence) {
        throw new AbstractMethodError();
    };

    /**
    * Create instance of this conflict strategy. Used internally by the AssetLibrary to
    * make sure the same strategy instance is not used in all AssetLibrary instances, which
    * would break any state caching that happens inside the strategy class.
    */
    ConflictStrategyBase.prototype.create = function () {
        throw new AbstractMethodError();
    };

    /**
    * Provided as a convenience method for all conflict strategy classes, as a way to finalize
    * the conflict resolution by applying the new names and dispatching the correct events.
    */
    ConflictStrategyBase.prototype._pUpdateNames = function (ns, nonConflictingName, oldAsset, newAsset, assetsDictionary, precedence) {
        var loser_prev_name;
        var winner;
        var loser;

        winner = (precedence === ConflictPrecedence.FAVOR_NEW) ? newAsset : oldAsset;
        loser = (precedence === ConflictPrecedence.FAVOR_NEW) ? oldAsset : newAsset;

        loser_prev_name = loser.name;

        assetsDictionary[winner.name] = winner;
        assetsDictionary[nonConflictingName] = loser;
        loser.resetAssetPath(nonConflictingName, ns, false);

        loser.dispatchEvent(new AssetEvent(AssetEvent.ASSET_CONFLICT_RESOLVED, loser, loser_prev_name));
    };
    return ConflictStrategyBase;
})();

module.exports = ConflictStrategyBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvbGlicmFyeS9Db25mbGljdFN0cmF0ZWd5QmFzZS50cyJdLCJuYW1lcyI6WyJDb25mbGljdFN0cmF0ZWd5QmFzZSIsIkNvbmZsaWN0U3RyYXRlZ3lCYXNlLmNvbnN0cnVjdG9yIiwiQ29uZmxpY3RTdHJhdGVneUJhc2UucmVzb2x2ZUNvbmZsaWN0IiwiQ29uZmxpY3RTdHJhdGVneUJhc2UuY3JlYXRlIiwiQ29uZmxpY3RTdHJhdGVneUJhc2UuX3BVcGRhdGVOYW1lcyJdLCJtYXBwaW5ncyI6IkFBQUEsbUZBQXdGOztBQUV4RiwrRUFBb0Y7QUFDcEYsNkRBQW9FOztBQUVwRTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRztBQUNIO0lBR0NBO0lBRUFDLENBQUNBO0lBTUREOzs7TUFER0E7cURBQ0hBLFVBQXVCQSxZQUFtQkEsRUFBRUEsUUFBZUEsRUFBRUEsZ0JBQXVCQSxFQUFFQSxVQUFpQkE7UUFFdEdFLE1BQU1BLElBQUlBLG1CQUFtQkEsQ0FBQ0EsQ0FBQ0E7SUFDaENBLENBQUNBOztJQU9ERjs7OztNQURHQTs0Q0FDSEE7UUFFQ0csTUFBTUEsSUFBSUEsbUJBQW1CQSxDQUFDQSxDQUFDQTtJQUNoQ0EsQ0FBQ0E7O0lBTURIOzs7TUFER0E7bURBQ0hBLFVBQXFCQSxFQUFTQSxFQUFFQSxrQkFBeUJBLEVBQUVBLFFBQWVBLEVBQUVBLFFBQWVBLEVBQUVBLGdCQUF1QkEsRUFBRUEsVUFBaUJBO1FBRXRJSSxJQUFJQSxlQUFlQTtRQUNuQkEsSUFBSUEsTUFBTUE7UUFDVkEsSUFBSUEsS0FBS0E7O1FBRVRBLE1BQU1BLEdBQUdBLENBQUNBLFVBQVVBLEtBQUtBLGtCQUFrQkEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsR0FBRUEsUUFBUUEsR0FBR0EsUUFBUUE7UUFDM0VBLEtBQUtBLEdBQUdBLENBQUNBLFVBQVVBLEtBQUtBLGtCQUFrQkEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsR0FBRUEsUUFBUUEsR0FBR0EsUUFBUUE7O1FBRTFFQSxlQUFlQSxHQUFHQSxLQUFLQSxDQUFDQSxJQUFJQTs7UUFFNUJBLGdCQUFnQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsTUFBTUE7UUFDdENBLGdCQUFnQkEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxHQUFHQSxLQUFLQTtRQUM1Q0EsS0FBS0EsQ0FBQ0EsY0FBY0EsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxFQUFFQSxFQUFFQSxLQUFLQSxDQUFDQTs7UUFFbkRBLEtBQUtBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLFVBQVVBLENBQUNBLFVBQVVBLENBQUNBLHVCQUF1QkEsRUFBRUEsS0FBS0EsRUFBRUEsZUFBZUEsQ0FBQ0EsQ0FBQ0E7SUFDaEdBLENBQUNBO0lBQ0ZKLDRCQUFDQTtBQUFEQSxDQUFDQSxJQUFBOztBQUVELHFDQUE4QixDQUFBIiwiZmlsZSI6ImNvcmUvbGlicmFyeS9Db25mbGljdFN0cmF0ZWd5QmFzZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1jb3JlLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb25mbGljdFByZWNlZGVuY2VcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2NvcmUvbGlicmFyeS9Db25mbGljdFByZWNlZGVuY2VcIik7XG5pbXBvcnQgSUFzc2V0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2xpYnJhcnkvSUFzc2V0XCIpO1xuaW1wb3J0IEFic3RyYWN0TWV0aG9kRXJyb3JcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2Vycm9ycy9BYnN0cmFjdE1ldGhvZEVycm9yXCIpO1xuaW1wb3J0IEFzc2V0RXZlbnRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9ldmVudHMvQXNzZXRFdmVudFwiKTtcblxuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBuYW1pbmcgY29uZmxpY3QgcmVzb2x1dGlvbiBjbGFzc2VzLiBFeHRlbmQgdGhpcyB0byBjcmVhdGUgYVxuICogc3RyYXRlZ3kgY2xhc3Mgd2hpY2ggdGhlIGFzc2V0IGxpYnJhcnkgY2FuIHVzZSB0byByZXNvbHZlIGFzc2V0IG5hbWluZyBjb25mbGljdHMsIG9yXG4gKiB1c2Ugb25lIG9mIHRoZSBidW5kbGVkIGNvbmNyZXRlIHN0cmF0ZWd5IGNsYXNzZXM6XG4gKlxuICogPHVsPlxuICogICA8bGk+SWdub3JlQ29uZmxpY3RTdHJhdGVneSAoQ29uZmxpY3RTdHJhdGVneS5JR05PUkUpPC9saT5cbiAqICAgPGxpPkVycm9yQ29uZmxpY3RTdHJhdGVneSAoQ29uZmxpY3RTdHJhdGVneS5USFJPV19FUlJPUik8L2xpPlxuICogICA8bGk+TnVtU3VmZml4Q29uZmxpY3RTdHJhdGVneSAoQ29uZmxpY3RTdHJhdGVneS5BUFBFTkRfTlVNX1NVRkZJWCk8L2xpPlxuICogPC91bD5cbiAqXG4gKiBAc2VlIGF3YXkubGlicmFyeS5Bc3NldExpYnJhcnkuY29uZmxpY3RTdHJhdGVneVxuICogQHNlZSBhd2F5LmxpYnJhcnkuQ29uZmxpY3RTdHJhdGVneVxuICogQHNlZSBhd2F5LmxpYnJhcnkuSWdub3JlQ29uZmxpY3RTdHJhdGVneVxuICogQHNlZSBhd2F5LmxpYnJhcnkuRXJyb3JDb25mbGljdFN0cmF0ZWd5XG4gKiBAc2VlIGF3YXkubGlicmFyeS5OdW1TdWZmaXhDb25mbGljdFN0cmF0ZWd5XG4gKi9cbmNsYXNzIENvbmZsaWN0U3RyYXRlZ3lCYXNlXG57XG5cblx0Y29uc3RydWN0b3IoKVxuXHR7XG5cdH1cblxuXHQvKipcblx0ICogUmVzb2x2ZSBhIG5hbWluZyBjb25mbGljdCBiZXR3ZWVuIHR3byBhc3NldHMuIE11c3QgYmUgaW1wbGVtZW50ZWQgYnkgY29uY3JldGUgc3RyYXRlZ3lcblx0ICogY2xhc3Nlcy5cblx0ICovXG5cdHB1YmxpYyByZXNvbHZlQ29uZmxpY3QoY2hhbmdlZEFzc2V0OklBc3NldCwgb2xkQXNzZXQ6SUFzc2V0LCBhc3NldHNEaWN0aW9uYXJ5Ok9iamVjdCwgcHJlY2VkZW5jZTpzdHJpbmcpXG5cdHtcblx0XHR0aHJvdyBuZXcgQWJzdHJhY3RNZXRob2RFcnJvcigpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZSBpbnN0YW5jZSBvZiB0aGlzIGNvbmZsaWN0IHN0cmF0ZWd5LiBVc2VkIGludGVybmFsbHkgYnkgdGhlIEFzc2V0TGlicmFyeSB0b1xuXHQgKiBtYWtlIHN1cmUgdGhlIHNhbWUgc3RyYXRlZ3kgaW5zdGFuY2UgaXMgbm90IHVzZWQgaW4gYWxsIEFzc2V0TGlicmFyeSBpbnN0YW5jZXMsIHdoaWNoXG5cdCAqIHdvdWxkIGJyZWFrIGFueSBzdGF0ZSBjYWNoaW5nIHRoYXQgaGFwcGVucyBpbnNpZGUgdGhlIHN0cmF0ZWd5IGNsYXNzLlxuXHQgKi9cblx0cHVibGljIGNyZWF0ZSgpOkNvbmZsaWN0U3RyYXRlZ3lCYXNlXG5cdHtcblx0XHR0aHJvdyBuZXcgQWJzdHJhY3RNZXRob2RFcnJvcigpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFByb3ZpZGVkIGFzIGEgY29udmVuaWVuY2UgbWV0aG9kIGZvciBhbGwgY29uZmxpY3Qgc3RyYXRlZ3kgY2xhc3NlcywgYXMgYSB3YXkgdG8gZmluYWxpemVcblx0ICogdGhlIGNvbmZsaWN0IHJlc29sdXRpb24gYnkgYXBwbHlpbmcgdGhlIG5ldyBuYW1lcyBhbmQgZGlzcGF0Y2hpbmcgdGhlIGNvcnJlY3QgZXZlbnRzLlxuXHQgKi9cblx0cHVibGljIF9wVXBkYXRlTmFtZXMobnM6c3RyaW5nLCBub25Db25mbGljdGluZ05hbWU6c3RyaW5nLCBvbGRBc3NldDpJQXNzZXQsIG5ld0Fzc2V0OklBc3NldCwgYXNzZXRzRGljdGlvbmFyeTpPYmplY3QsIHByZWNlZGVuY2U6c3RyaW5nKVxuXHR7XG5cdFx0dmFyIGxvc2VyX3ByZXZfbmFtZTpzdHJpbmc7XG5cdFx0dmFyIHdpbm5lcjpJQXNzZXQ7XG5cdFx0dmFyIGxvc2VyOklBc3NldDtcblxuXHRcdHdpbm5lciA9IChwcmVjZWRlbmNlID09PSBDb25mbGljdFByZWNlZGVuY2UuRkFWT1JfTkVXKT8gbmV3QXNzZXQgOiBvbGRBc3NldDtcblx0XHRsb3NlciA9IChwcmVjZWRlbmNlID09PSBDb25mbGljdFByZWNlZGVuY2UuRkFWT1JfTkVXKT8gb2xkQXNzZXQgOiBuZXdBc3NldDtcblxuXHRcdGxvc2VyX3ByZXZfbmFtZSA9IGxvc2VyLm5hbWU7XG5cblx0XHRhc3NldHNEaWN0aW9uYXJ5W3dpbm5lci5uYW1lXSA9IHdpbm5lcjtcblx0XHRhc3NldHNEaWN0aW9uYXJ5W25vbkNvbmZsaWN0aW5nTmFtZV0gPSBsb3Nlcjtcblx0XHRsb3Nlci5yZXNldEFzc2V0UGF0aChub25Db25mbGljdGluZ05hbWUsIG5zLCBmYWxzZSk7XG5cblx0XHRsb3Nlci5kaXNwYXRjaEV2ZW50KG5ldyBBc3NldEV2ZW50KEFzc2V0RXZlbnQuQVNTRVRfQ09ORkxJQ1RfUkVTT0xWRUQsIGxvc2VyLCBsb3Nlcl9wcmV2X25hbWUpKTtcblx0fVxufVxuXG5leHBvcnQgPSBDb25mbGljdFN0cmF0ZWd5QmFzZTsiXX0=