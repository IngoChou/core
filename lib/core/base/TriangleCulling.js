/**
* Defines codes for culling algorithms that determine which triangles not to
* render when drawing triangle paths.
*
* <p> The terms <code>POSITIVE</code> and <code>NEGATIVE</code> refer to the
* sign of a triangle's normal along the z-axis. The normal is a 3D vector
* that is perpendicular to the surface of the triangle. </p>
*
* <p> A triangle whose vertices 0, 1, and 2 are arranged in a clockwise order
* has a positive normal value. That is, its normal points in a positive
* z-axis direction, away from the current view point. When the
* <code>TriangleCulling.POSITIVE</code> algorithm is used, triangles with
* positive normals are not rendered. Another term for this is backface
* culling. </p>
*
* <p> A triangle whose vertices are arranged in a counter-clockwise order has
* a negative normal value. That is, its normal points in a negative z-axis
* direction, toward the current view point. When the
* <code>TriangleCulling.NEGATIVE</code> algorithm is used, triangles with
* negative normals will not be rendered. </p>
*/
var TriangleCulling = (function () {
    function TriangleCulling() {
    }
    TriangleCulling.NEGATIVE = "negative";

    TriangleCulling.NONE = "none";

    TriangleCulling.POSITIVE = "positive";
    return TriangleCulling;
})();

module.exports = TriangleCulling;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvYmFzZS9UcmlhbmdsZUN1bGxpbmcudHMiXSwibmFtZXMiOlsiVHJpYW5nbGVDdWxsaW5nIiwiVHJpYW5nbGVDdWxsaW5nLmNvbnN0cnVjdG9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFvQkc7QUFDSDtJQUFBQTtJQWlCQUMsQ0FBQ0E7QUFBQUQsSUFaQUEsMkJBQWdDQSxVQUFVQTs7SUFLMUNBLHVCQUE0QkEsTUFBTUE7O0lBTWxDQSwyQkFBZ0NBLFVBQVVBO0lBQzNDQSx1QkFBQ0E7QUFBREEsQ0FBQ0EsSUFBQTs7QUFFRCxnQ0FBeUIsQ0FBQSIsImZpbGUiOiJjb3JlL2Jhc2UvVHJpYW5nbGVDdWxsaW5nLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9yb2JiYXRlbWFuL1dlYnN0b3JtUHJvamVjdHMvYXdheWpzLWNvcmUvIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEZWZpbmVzIGNvZGVzIGZvciBjdWxsaW5nIGFsZ29yaXRobXMgdGhhdCBkZXRlcm1pbmUgd2hpY2ggdHJpYW5nbGVzIG5vdCB0b1xuICogcmVuZGVyIHdoZW4gZHJhd2luZyB0cmlhbmdsZSBwYXRocy5cbiAqXG4gKiA8cD4gVGhlIHRlcm1zIDxjb2RlPlBPU0lUSVZFPC9jb2RlPiBhbmQgPGNvZGU+TkVHQVRJVkU8L2NvZGU+IHJlZmVyIHRvIHRoZVxuICogc2lnbiBvZiBhIHRyaWFuZ2xlJ3Mgbm9ybWFsIGFsb25nIHRoZSB6LWF4aXMuIFRoZSBub3JtYWwgaXMgYSAzRCB2ZWN0b3JcbiAqIHRoYXQgaXMgcGVycGVuZGljdWxhciB0byB0aGUgc3VyZmFjZSBvZiB0aGUgdHJpYW5nbGUuIDwvcD5cbiAqXG4gKiA8cD4gQSB0cmlhbmdsZSB3aG9zZSB2ZXJ0aWNlcyAwLCAxLCBhbmQgMiBhcmUgYXJyYW5nZWQgaW4gYSBjbG9ja3dpc2Ugb3JkZXJcbiAqIGhhcyBhIHBvc2l0aXZlIG5vcm1hbCB2YWx1ZS4gVGhhdCBpcywgaXRzIG5vcm1hbCBwb2ludHMgaW4gYSBwb3NpdGl2ZVxuICogei1heGlzIGRpcmVjdGlvbiwgYXdheSBmcm9tIHRoZSBjdXJyZW50IHZpZXcgcG9pbnQuIFdoZW4gdGhlXG4gKiA8Y29kZT5UcmlhbmdsZUN1bGxpbmcuUE9TSVRJVkU8L2NvZGU+IGFsZ29yaXRobSBpcyB1c2VkLCB0cmlhbmdsZXMgd2l0aFxuICogcG9zaXRpdmUgbm9ybWFscyBhcmUgbm90IHJlbmRlcmVkLiBBbm90aGVyIHRlcm0gZm9yIHRoaXMgaXMgYmFja2ZhY2VcbiAqIGN1bGxpbmcuIDwvcD5cbiAqXG4gKiA8cD4gQSB0cmlhbmdsZSB3aG9zZSB2ZXJ0aWNlcyBhcmUgYXJyYW5nZWQgaW4gYSBjb3VudGVyLWNsb2Nrd2lzZSBvcmRlciBoYXNcbiAqIGEgbmVnYXRpdmUgbm9ybWFsIHZhbHVlLiBUaGF0IGlzLCBpdHMgbm9ybWFsIHBvaW50cyBpbiBhIG5lZ2F0aXZlIHotYXhpc1xuICogZGlyZWN0aW9uLCB0b3dhcmQgdGhlIGN1cnJlbnQgdmlldyBwb2ludC4gV2hlbiB0aGVcbiAqIDxjb2RlPlRyaWFuZ2xlQ3VsbGluZy5ORUdBVElWRTwvY29kZT4gYWxnb3JpdGhtIGlzIHVzZWQsIHRyaWFuZ2xlcyB3aXRoXG4gKiBuZWdhdGl2ZSBub3JtYWxzIHdpbGwgbm90IGJlIHJlbmRlcmVkLiA8L3A+XG4gKi9cbmNsYXNzIFRyaWFuZ2xlQ3VsbGluZ1xue1xuXHQvKipcblx0ICogU3BlY2lmaWVzIGN1bGxpbmcgb2YgYWxsIHRyaWFuZ2xlcyBmYWNpbmcgdG93YXJkIHRoZSBjdXJyZW50IHZpZXcgcG9pbnQuXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIE5FR0FUSVZFOnN0cmluZyA9IFwibmVnYXRpdmVcIjtcblxuXHQvKipcblx0ICogU3BlY2lmaWVzIG5vIGN1bGxpbmcuIEFsbCB0cmlhbmdsZXMgaW4gdGhlIHBhdGggYXJlIHJlbmRlcmVkLlxuXHQgKi9cblx0cHVibGljIHN0YXRpYyBOT05FOnN0cmluZyA9IFwibm9uZVwiO1xuXG5cdC8qKlxuXHQgKiBTcGVjaWZpZXMgY3VsbGluZyBvZiBhbGwgdHJpYW5nbGVzIGZhY2luZyBhd2F5IGZyb20gdGhlIGN1cnJlbnQgdmlld1xuXHQgKiBwb2ludC4gVGhpcyBpcyBhbHNvIGtub3duIGFzIGJhY2tmYWNlIGN1bGxpbmcuXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIFBPU0lUSVZFOnN0cmluZyA9IFwicG9zaXRpdmVcIjtcbn1cblxuZXhwb3J0ID0gVHJpYW5nbGVDdWxsaW5nOyJdfQ==