/**
* A class that provides constant values for visual blend mode effects. These
* constants are used in the following:
* <ul>
*   <li> The <code>blendMode</code> property of the
* flash.display.DisplayObject class.</li>
*   <li> The <code>blendMode</code> parameter of the <code>draw()</code>
* method of the flash.display.BitmapData class</li>
* </ul>
*/
var BlendMode = (function () {
    function BlendMode() {
    }
    BlendMode.ADD = "add";

    BlendMode.ALPHA = "alpha";

    BlendMode.DARKEN = "darken";

    BlendMode.DIFFERENCE = "difference";

    BlendMode.ERASE = "erase";

    BlendMode.HARDLIGHT = "hardlight";

    BlendMode.INVERT = "invert";

    BlendMode.LAYER = "layer";

    BlendMode.LIGHTEN = "lighten";

    BlendMode.MULTIPLY = "multiply";

    BlendMode.NORMAL = "normal";

    BlendMode.OVERLAY = "overlay";

    BlendMode.SCREEN = "screen";

    BlendMode.SHADER = "shader";

    BlendMode.SUBTRACT = "subtract";
    return BlendMode;
})();

module.exports = BlendMode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvYmFzZS9CbGVuZE1vZGUudHMiXSwibmFtZXMiOlsiQmxlbmRNb2RlIiwiQmxlbmRNb2RlLmNvbnN0cnVjdG9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0VBU0c7QUFDSDtJQUFBQTtJQWlMQUMsQ0FBQ0E7QUFBQUQsSUFyS0FBLGdCQUEyQkEsS0FBS0E7O0lBVWhDQSxrQkFBNkJBLE9BQU9BOztJQWNwQ0EsbUJBQThCQSxRQUFRQTs7SUFhdENBLHVCQUFrQ0EsWUFBWUE7O0lBUzlDQSxrQkFBNkJBLE9BQU9BOztJQVlwQ0Esc0JBQWlDQSxXQUFXQTs7SUFLNUNBLG1CQUE4QkEsUUFBUUE7O0lBWXRDQSxrQkFBNkJBLE9BQU9BOztJQWNwQ0Esb0JBQStCQSxTQUFTQTs7SUFleENBLHFCQUFnQ0EsVUFBVUE7O0lBTzFDQSxtQkFBOEJBLFFBQVFBOztJQVl0Q0Esb0JBQStCQSxTQUFTQTs7SUFReENBLG1CQUE4QkEsUUFBUUE7O0lBcUJ0Q0EsbUJBQThCQSxRQUFRQTs7SUFZdENBLHFCQUFnQ0EsVUFBVUE7SUFDM0NBLGlCQUFDQTtBQUFEQSxDQUFDQSxJQUFBOztBQUVELDBCQUFtQixDQUFBIiwiZmlsZSI6ImNvcmUvYmFzZS9CbGVuZE1vZGUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3JvYmJhdGVtYW4vV2Vic3Rvcm1Qcm9qZWN0cy9hd2F5anMtY29yZS8iLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgY2xhc3MgdGhhdCBwcm92aWRlcyBjb25zdGFudCB2YWx1ZXMgZm9yIHZpc3VhbCBibGVuZCBtb2RlIGVmZmVjdHMuIFRoZXNlXG4gKiBjb25zdGFudHMgYXJlIHVzZWQgaW4gdGhlIGZvbGxvd2luZzpcbiAqIDx1bD5cbiAqICAgPGxpPiBUaGUgPGNvZGU+YmxlbmRNb2RlPC9jb2RlPiBwcm9wZXJ0eSBvZiB0aGVcbiAqIGZsYXNoLmRpc3BsYXkuRGlzcGxheU9iamVjdCBjbGFzcy48L2xpPlxuICogICA8bGk+IFRoZSA8Y29kZT5ibGVuZE1vZGU8L2NvZGU+IHBhcmFtZXRlciBvZiB0aGUgPGNvZGU+ZHJhdygpPC9jb2RlPlxuICogbWV0aG9kIG9mIHRoZSBmbGFzaC5kaXNwbGF5LkJpdG1hcERhdGEgY2xhc3M8L2xpPlxuICogPC91bD5cbiAqL1xuY2xhc3MgQmxlbmRNb2RlXG57XG5cdC8qKlxuXHQgKiBBZGRzIHRoZSB2YWx1ZXMgb2YgdGhlIGNvbnN0aXR1ZW50IGNvbG9ycyBvZiB0aGUgZGlzcGxheSBvYmplY3QgdG8gdGhlXG5cdCAqIGNvbG9ycyBvZiBpdHMgYmFja2dyb3VuZCwgYXBwbHlpbmcgYSBjZWlsaW5nIG9mIDB4RkYuIFRoaXMgc2V0dGluZyBpc1xuXHQgKiBjb21tb25seSB1c2VkIGZvciBhbmltYXRpbmcgYSBsaWdodGVuaW5nIGRpc3NvbHZlIGJldHdlZW4gdHdvIG9iamVjdHMuXG5cdCAqXG5cdCAqIDxwPkZvciBleGFtcGxlLCBpZiB0aGUgZGlzcGxheSBvYmplY3QgaGFzIGEgcGl4ZWwgd2l0aCBhbiBSR0IgdmFsdWUgb2Zcblx0ICogMHhBQUE2MzMsIGFuZCB0aGUgYmFja2dyb3VuZCBwaXhlbCBoYXMgYW4gUkdCIHZhbHVlIG9mIDB4REQyMjAwLCB0aGVcblx0ICogcmVzdWx0aW5nIFJHQiB2YWx1ZSBmb3IgdGhlIGRpc3BsYXllZCBwaXhlbCBpcyAweEZGQzgzMyhiZWNhdXNlIDB4QUEgK1xuXHQgKiAweEREID4gMHhGRiwgMHhBNiArIDB4MjIgPSAweEM4LCBhbmQgMHgzMyArIDB4MDAgPSAweDMzKS48L3A+XG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIEFERDpzdHJpbmcgPSBcImFkZFwiO1xuXG5cdC8qKlxuXHQgKiBBcHBsaWVzIHRoZSBhbHBoYSB2YWx1ZSBvZiBlYWNoIHBpeGVsIG9mIHRoZSBkaXNwbGF5IG9iamVjdCB0byB0aGVcblx0ICogYmFja2dyb3VuZC4gVGhpcyByZXF1aXJlcyB0aGUgPGNvZGU+YmxlbmRNb2RlPC9jb2RlPiBwcm9wZXJ0eSBvZiB0aGVcblx0ICogcGFyZW50IGRpc3BsYXkgb2JqZWN0IGJlIHNldCB0b1xuXHQgKiA8Y29kZT5hd2F5LmJhc2UuQmxlbmRNb2RlLkxBWUVSPC9jb2RlPi5cblx0ICpcblx0ICogPHA+Tm90IHN1cHBvcnRlZCB1bmRlciBHUFUgcmVuZGVyaW5nLjwvcD5cblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgQUxQSEE6c3RyaW5nID0gXCJhbHBoYVwiO1xuXG5cdC8qKlxuXHQgKiBTZWxlY3RzIHRoZSBkYXJrZXIgb2YgdGhlIGNvbnN0aXR1ZW50IGNvbG9ycyBvZiB0aGUgZGlzcGxheSBvYmplY3QgYW5kIHRoZVxuXHQgKiBjb2xvcnMgb2YgdGhlIGJhY2tncm91bmQodGhlIGNvbG9ycyB3aXRoIHRoZSBzbWFsbGVyIHZhbHVlcykuIFRoaXNcblx0ICogc2V0dGluZyBpcyBjb21tb25seSB1c2VkIGZvciBzdXBlcmltcG9zaW5nIHR5cGUuXG5cdCAqXG5cdCAqIDxwPkZvciBleGFtcGxlLCBpZiB0aGUgZGlzcGxheSBvYmplY3QgaGFzIGEgcGl4ZWwgd2l0aCBhbiBSR0IgdmFsdWUgb2Zcblx0ICogMHhGRkNDMzMsIGFuZCB0aGUgYmFja2dyb3VuZCBwaXhlbCBoYXMgYW4gUkdCIHZhbHVlIG9mIDB4RERGODAwLCB0aGVcblx0ICogcmVzdWx0aW5nIFJHQiB2YWx1ZSBmb3IgdGhlIGRpc3BsYXllZCBwaXhlbCBpcyAweEREQ0MwMChiZWNhdXNlIDB4RkYgPlxuXHQgKiAweERELCAweENDIDwgMHhGOCwgYW5kIDB4MzMgPiAweDAwID0gMzMpLjwvcD5cblx0ICpcblx0ICogPHA+Tm90IHN1cHBvcnRlZCB1bmRlciBHUFUgcmVuZGVyaW5nLjwvcD5cblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgREFSS0VOOnN0cmluZyA9IFwiZGFya2VuXCI7XG5cblx0LyoqXG5cdCAqIENvbXBhcmVzIHRoZSBjb25zdGl0dWVudCBjb2xvcnMgb2YgdGhlIGRpc3BsYXkgb2JqZWN0IHdpdGggdGhlIGNvbG9ycyBvZlxuXHQgKiBpdHMgYmFja2dyb3VuZCwgYW5kIHN1YnRyYWN0cyB0aGUgZGFya2VyIG9mIHRoZSB2YWx1ZXMgb2YgdGhlIHR3b1xuXHQgKiBjb25zdGl0dWVudCBjb2xvcnMgZnJvbSB0aGUgbGlnaHRlciB2YWx1ZS4gVGhpcyBzZXR0aW5nIGlzIGNvbW1vbmx5IHVzZWRcblx0ICogZm9yIG1vcmUgdmlicmFudCBjb2xvcnMuXG5cdCAqXG5cdCAqIDxwPkZvciBleGFtcGxlLCBpZiB0aGUgZGlzcGxheSBvYmplY3QgaGFzIGEgcGl4ZWwgd2l0aCBhbiBSR0IgdmFsdWUgb2Zcblx0ICogMHhGRkNDMzMsIGFuZCB0aGUgYmFja2dyb3VuZCBwaXhlbCBoYXMgYW4gUkdCIHZhbHVlIG9mIDB4RERGODAwLCB0aGVcblx0ICogcmVzdWx0aW5nIFJHQiB2YWx1ZSBmb3IgdGhlIGRpc3BsYXllZCBwaXhlbCBpcyAweDIyMkMzMyhiZWNhdXNlIDB4RkYgLVxuXHQgKiAweEREID0gMHgyMiwgMHhGOCAtIDB4Q0MgPSAweDJDLCBhbmQgMHgzMyAtIDB4MDAgPSAweDMzKS48L3A+XG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIERJRkZFUkVOQ0U6c3RyaW5nID0gXCJkaWZmZXJlbmNlXCI7XG5cblx0LyoqXG5cdCAqIEVyYXNlcyB0aGUgYmFja2dyb3VuZCBiYXNlZCBvbiB0aGUgYWxwaGEgdmFsdWUgb2YgdGhlIGRpc3BsYXkgb2JqZWN0LiBUaGlzXG5cdCAqIHByb2Nlc3MgcmVxdWlyZXMgdGhhdCB0aGUgPGNvZGU+YmxlbmRNb2RlPC9jb2RlPiBwcm9wZXJ0eSBvZiB0aGUgcGFyZW50XG5cdCAqIGRpc3BsYXkgb2JqZWN0IGJlIHNldCB0byA8Y29kZT5mbGFzaC5kaXNwbGF5LkJsZW5kTW9kZS5MQVlFUjwvY29kZT4uXG5cdCAqXG5cdCAqIDxwPk5vdCBzdXBwb3J0ZWQgdW5kZXIgR1BVIHJlbmRlcmluZy48L3A+XG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIEVSQVNFOnN0cmluZyA9IFwiZXJhc2VcIjtcblxuXHQvKipcblx0ICogQWRqdXN0cyB0aGUgY29sb3Igb2YgZWFjaCBwaXhlbCBiYXNlZCBvbiB0aGUgZGFya25lc3Mgb2YgdGhlIGRpc3BsYXlcblx0ICogb2JqZWN0LiBJZiB0aGUgZGlzcGxheSBvYmplY3QgaXMgbGlnaHRlciB0aGFuIDUwJSBncmF5LCB0aGUgZGlzcGxheSBvYmplY3Rcblx0ICogYW5kIGJhY2tncm91bmQgY29sb3JzIGFyZSBzY3JlZW5lZCwgd2hpY2ggcmVzdWx0cyBpbiBhIGxpZ2h0ZXIgY29sb3IuIElmXG5cdCAqIHRoZSBkaXNwbGF5IG9iamVjdCBpcyBkYXJrZXIgdGhhbiA1MCUgZ3JheSwgdGhlIGNvbG9ycyBhcmUgbXVsdGlwbGllZCxcblx0ICogd2hpY2ggcmVzdWx0cyBpbiBhIGRhcmtlciBjb2xvci4gVGhpcyBzZXR0aW5nIGlzIGNvbW1vbmx5IHVzZWQgZm9yIHNoYWRpbmdcblx0ICogZWZmZWN0cy5cblx0ICpcblx0ICogPHA+Tm90IHN1cHBvcnRlZCB1bmRlciBHUFUgcmVuZGVyaW5nLjwvcD5cblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgSEFSRExJR0hUOnN0cmluZyA9IFwiaGFyZGxpZ2h0XCI7XG5cblx0LyoqXG5cdCAqIEludmVydHMgdGhlIGJhY2tncm91bmQuXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIElOVkVSVDpzdHJpbmcgPSBcImludmVydFwiO1xuXG5cdC8qKlxuXHQgKiBGb3JjZXMgdGhlIGNyZWF0aW9uIG9mIGEgdHJhbnNwYXJlbmN5IGdyb3VwIGZvciB0aGUgZGlzcGxheSBvYmplY3QuIFRoaXNcblx0ICogbWVhbnMgdGhhdCB0aGUgZGlzcGxheSBvYmplY3QgaXMgcHJlY29tcG9zZWQgaW4gYSB0ZW1wb3JhcnkgYnVmZmVyIGJlZm9yZVxuXHQgKiBpdCBpcyBwcm9jZXNzZWQgZnVydGhlci4gVGhlIHByZWNvbXBvc2l0aW9uIGlzIGRvbmUgYXV0b21hdGljYWxseSBpZiB0aGVcblx0ICogZGlzcGxheSBvYmplY3QgaXMgcHJlY2FjaGVkIGJ5IG1lYW5zIG9mIGJpdG1hcCBjYWNoaW5nIG9yIGlmIHRoZSBkaXNwbGF5XG5cdCAqIG9iamVjdCBpcyBhIGRpc3BsYXkgb2JqZWN0IGNvbnRhaW5lciB0aGF0IGhhcyBhdCBsZWFzdCBvbmUgY2hpbGQgb2JqZWN0XG5cdCAqIHdpdGggYSA8Y29kZT5ibGVuZE1vZGU8L2NvZGU+IHNldHRpbmcgb3RoZXIgdGhhbiA8Y29kZT5cIm5vcm1hbFwiPC9jb2RlPi5cblx0ICpcblx0ICogPHA+Tm90IHN1cHBvcnRlZCB1bmRlciBHUFUgcmVuZGVyaW5nLjwvcD5cblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgTEFZRVI6c3RyaW5nID0gXCJsYXllclwiO1xuXG5cdC8qKlxuXHQgKiBTZWxlY3RzIHRoZSBsaWdodGVyIG9mIHRoZSBjb25zdGl0dWVudCBjb2xvcnMgb2YgdGhlIGRpc3BsYXkgb2JqZWN0IGFuZFxuXHQgKiB0aGUgY29sb3JzIG9mIHRoZSBiYWNrZ3JvdW5kKHRoZSBjb2xvcnMgd2l0aCB0aGUgbGFyZ2VyIHZhbHVlcykuIFRoaXNcblx0ICogc2V0dGluZyBpcyBjb21tb25seSB1c2VkIGZvciBzdXBlcmltcG9zaW5nIHR5cGUuXG5cdCAqXG5cdCAqIDxwPkZvciBleGFtcGxlLCBpZiB0aGUgZGlzcGxheSBvYmplY3QgaGFzIGEgcGl4ZWwgd2l0aCBhbiBSR0IgdmFsdWUgb2Zcblx0ICogMHhGRkNDMzMsIGFuZCB0aGUgYmFja2dyb3VuZCBwaXhlbCBoYXMgYW4gUkdCIHZhbHVlIG9mIDB4RERGODAwLCB0aGVcblx0ICogcmVzdWx0aW5nIFJHQiB2YWx1ZSBmb3IgdGhlIGRpc3BsYXllZCBwaXhlbCBpcyAweEZGRjgzMyhiZWNhdXNlIDB4RkYgPlxuXHQgKiAweERELCAweENDIDwgMHhGOCwgYW5kIDB4MzMgPiAweDAwID0gMzMpLjwvcD5cblx0ICpcblx0ICogPHA+Tm90IHN1cHBvcnRlZCB1bmRlciBHUFUgcmVuZGVyaW5nLjwvcD5cblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgTElHSFRFTjpzdHJpbmcgPSBcImxpZ2h0ZW5cIjtcblxuXHQvKipcblx0ICogTXVsdGlwbGllcyB0aGUgdmFsdWVzIG9mIHRoZSBkaXNwbGF5IG9iamVjdCBjb25zdGl0dWVudCBjb2xvcnMgYnkgdGhlXG5cdCAqIGNvbnN0aXR1ZW50IGNvbG9ycyBvZiB0aGUgYmFja2dyb3VuZCBjb2xvciwgYW5kIG5vcm1hbGl6ZXMgYnkgZGl2aWRpbmcgYnlcblx0ICogMHhGRiwgcmVzdWx0aW5nIGluIGRhcmtlciBjb2xvcnMuIFRoaXMgc2V0dGluZyBpcyBjb21tb25seSB1c2VkIGZvclxuXHQgKiBzaGFkb3dzIGFuZCBkZXB0aCBlZmZlY3RzLlxuXHQgKlxuXHQgKiA8cD5Gb3IgZXhhbXBsZSwgaWYgYSBjb25zdGl0dWVudCBjb2xvcihzdWNoIGFzIHJlZCkgb2Ygb25lIHBpeGVsIGluIHRoZVxuXHQgKiBkaXNwbGF5IG9iamVjdCBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgY29sb3Igb2YgdGhlIHBpeGVsIGluIHRoZSBiYWNrZ3JvdW5kXG5cdCAqIGJvdGggaGF2ZSB0aGUgdmFsdWUgMHg4OCwgdGhlIG11bHRpcGxpZWQgcmVzdWx0IGlzIDB4NDg0MC4gRGl2aWRpbmcgYnlcblx0ICogMHhGRiB5aWVsZHMgYSB2YWx1ZSBvZiAweDQ4IGZvciB0aGF0IGNvbnN0aXR1ZW50IGNvbG9yLCB3aGljaCBpcyBhIGRhcmtlclxuXHQgKiBzaGFkZSB0aGFuIHRoZSBjb2xvciBvZiB0aGUgZGlzcGxheSBvYmplY3Qgb3IgdGhlIGNvbG9yIG9mIHRoZVxuXHQgKiBiYWNrZ3JvdW5kLjwvcD5cblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgTVVMVElQTFk6c3RyaW5nID0gXCJtdWx0aXBseVwiO1xuXG5cdC8qKlxuXHQgKiBUaGUgZGlzcGxheSBvYmplY3QgYXBwZWFycyBpbiBmcm9udCBvZiB0aGUgYmFja2dyb3VuZC4gUGl4ZWwgdmFsdWVzIG9mIHRoZVxuXHQgKiBkaXNwbGF5IG9iamVjdCBvdmVycmlkZSB0aGUgcGl4ZWwgdmFsdWVzIG9mIHRoZSBiYWNrZ3JvdW5kLiBXaGVyZSB0aGVcblx0ICogZGlzcGxheSBvYmplY3QgaXMgdHJhbnNwYXJlbnQsIHRoZSBiYWNrZ3JvdW5kIGlzIHZpc2libGUuXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIE5PUk1BTDpzdHJpbmcgPSBcIm5vcm1hbFwiO1xuXG5cdC8qKlxuXHQgKiBBZGp1c3RzIHRoZSBjb2xvciBvZiBlYWNoIHBpeGVsIGJhc2VkIG9uIHRoZSBkYXJrbmVzcyBvZiB0aGUgYmFja2dyb3VuZC5cblx0ICogSWYgdGhlIGJhY2tncm91bmQgaXMgbGlnaHRlciB0aGFuIDUwJSBncmF5LCB0aGUgZGlzcGxheSBvYmplY3QgYW5kXG5cdCAqIGJhY2tncm91bmQgY29sb3JzIGFyZSBzY3JlZW5lZCwgd2hpY2ggcmVzdWx0cyBpbiBhIGxpZ2h0ZXIgY29sb3IuIElmIHRoZVxuXHQgKiBiYWNrZ3JvdW5kIGlzIGRhcmtlciB0aGFuIDUwJSBncmF5LCB0aGUgY29sb3JzIGFyZSBtdWx0aXBsaWVkLCB3aGljaFxuXHQgKiByZXN1bHRzIGluIGEgZGFya2VyIGNvbG9yLiBUaGlzIHNldHRpbmcgaXMgY29tbW9ubHkgdXNlZCBmb3Igc2hhZGluZ1xuXHQgKiBlZmZlY3RzLlxuXHQgKlxuXHQgKiA8cD5Ob3Qgc3VwcG9ydGVkIHVuZGVyIEdQVSByZW5kZXJpbmcuPC9wPlxuXHQgKi9cblx0cHVibGljIHN0YXRpYyBPVkVSTEFZOnN0cmluZyA9IFwib3ZlcmxheVwiO1xuXG5cdC8qKlxuXHQgKiBNdWx0aXBsaWVzIHRoZSBjb21wbGVtZW50KGludmVyc2UpIG9mIHRoZSBkaXNwbGF5IG9iamVjdCBjb2xvciBieSB0aGVcblx0ICogY29tcGxlbWVudCBvZiB0aGUgYmFja2dyb3VuZCBjb2xvciwgcmVzdWx0aW5nIGluIGEgYmxlYWNoaW5nIGVmZmVjdC4gVGhpc1xuXHQgKiBzZXR0aW5nIGlzIGNvbW1vbmx5IHVzZWQgZm9yIGhpZ2hsaWdodHMgb3IgdG8gcmVtb3ZlIGJsYWNrIGFyZWFzIG9mIHRoZVxuXHQgKiBkaXNwbGF5IG9iamVjdC5cblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgU0NSRUVOOnN0cmluZyA9IFwic2NyZWVuXCI7XG5cblx0LyoqXG5cdCAqIFVzZXMgYSBzaGFkZXIgdG8gZGVmaW5lIHRoZSBibGVuZCBiZXR3ZWVuIG9iamVjdHMuXG5cdCAqXG5cdCAqIDxwPlNldHRpbmcgdGhlIDxjb2RlPmJsZW5kU2hhZGVyPC9jb2RlPiBwcm9wZXJ0eSB0byBhIFNoYWRlciBpbnN0YW5jZVxuXHQgKiBhdXRvbWF0aWNhbGx5IHNldHMgdGhlIGRpc3BsYXkgb2JqZWN0J3MgPGNvZGU+YmxlbmRNb2RlPC9jb2RlPiBwcm9wZXJ0eSB0b1xuXHQgKiA8Y29kZT5CbGVuZE1vZGUuU0hBREVSPC9jb2RlPi4gSWYgdGhlIDxjb2RlPmJsZW5kTW9kZTwvY29kZT4gcHJvcGVydHkgaXNcblx0ICogc2V0IHRvIDxjb2RlPkJsZW5kTW9kZS5TSEFERVI8L2NvZGU+IHdpdGhvdXQgZmlyc3Qgc2V0dGluZyB0aGVcblx0ICogPGNvZGU+YmxlbmRTaGFkZXI8L2NvZGU+IHByb3BlcnR5LCB0aGUgPGNvZGU+YmxlbmRNb2RlPC9jb2RlPiBwcm9wZXJ0eSBpc1xuXHQgKiBzZXQgdG8gPGNvZGU+QmxlbmRNb2RlLk5PUk1BTDwvY29kZT4gaW5zdGVhZC4gSWYgdGhlXG5cdCAqIDxjb2RlPmJsZW5kU2hhZGVyPC9jb2RlPiBwcm9wZXJ0eSBpcyBzZXQod2hpY2ggc2V0cyB0aGVcblx0ICogPGNvZGU+YmxlbmRNb2RlPC9jb2RlPiBwcm9wZXJ0eSB0byA8Y29kZT5CbGVuZE1vZGUuU0hBREVSPC9jb2RlPiksIHRoZW5cblx0ICogbGF0ZXIgdGhlIHZhbHVlIG9mIHRoZSA8Y29kZT5ibGVuZE1vZGU8L2NvZGU+IHByb3BlcnR5IGlzIGNoYW5nZWQsIHRoZVxuXHQgKiBibGVuZCBtb2RlIGNhbiBiZSByZXNldCB0byB1c2UgdGhlIGJsZW5kIHNoYWRlciBzaW1wbHkgYnkgc2V0dGluZyB0aGVcblx0ICogPGNvZGU+YmxlbmRNb2RlPC9jb2RlPiBwcm9wZXJ0eSB0byA8Y29kZT5CbGVuZE1vZGUuU0hBREVSPC9jb2RlPi4gVGhlXG5cdCAqIDxjb2RlPmJsZW5kU2hhZGVyPC9jb2RlPiBwcm9wZXJ0eSBkb2VzIG5vdCBuZWVkIHRvIGJlIHNldCBhZ2FpbiBleGNlcHQgdG9cblx0ICogY2hhbmdlIHRoZSBzaGFkZXIgdGhhdCdzIHVzZWQgdG8gZGVmaW5lIHRoZSBibGVuZCBtb2RlLjwvcD5cblx0ICpcblx0ICogPHA+Tm90IHN1cHBvcnRlZCB1bmRlciBHUFUgcmVuZGVyaW5nLjwvcD5cblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgU0hBREVSOnN0cmluZyA9IFwic2hhZGVyXCI7XG5cblx0LyoqXG5cdCAqIFN1YnRyYWN0cyB0aGUgdmFsdWVzIG9mIHRoZSBjb25zdGl0dWVudCBjb2xvcnMgaW4gdGhlIGRpc3BsYXkgb2JqZWN0IGZyb21cblx0ICogdGhlIHZhbHVlcyBvZiB0aGUgYmFja2dyb3VuZCBjb2xvciwgYXBwbHlpbmcgYSBmbG9vciBvZiAwLiBUaGlzIHNldHRpbmcgaXNcblx0ICogY29tbW9ubHkgdXNlZCBmb3IgYW5pbWF0aW5nIGEgZGFya2VuaW5nIGRpc3NvbHZlIGJldHdlZW4gdHdvIG9iamVjdHMuXG5cdCAqXG5cdCAqIDxwPkZvciBleGFtcGxlLCBpZiB0aGUgZGlzcGxheSBvYmplY3QgaGFzIGEgcGl4ZWwgd2l0aCBhbiBSR0IgdmFsdWUgb2Zcblx0ICogMHhBQTIyMzMsIGFuZCB0aGUgYmFja2dyb3VuZCBwaXhlbCBoYXMgYW4gUkdCIHZhbHVlIG9mIDB4RERBNjAwLCB0aGVcblx0ICogcmVzdWx0aW5nIFJHQiB2YWx1ZSBmb3IgdGhlIGRpc3BsYXllZCBwaXhlbCBpcyAweDMzODQwMChiZWNhdXNlIDB4REQgLVxuXHQgKiAweEFBID0gMHgzMywgMHhBNiAtIDB4MjIgPSAweDg0LCBhbmQgMHgwMCAtIDB4MzMgPCAweDAwKS48L3A+XG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIFNVQlRSQUNUOnN0cmluZyA9IFwic3VidHJhY3RcIjtcbn1cblxuZXhwb3J0ID0gQmxlbmRNb2RlOyJdfQ==