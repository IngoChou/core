var Matrix3D = require("awayjs-core/lib/core/geom/Matrix3D");

var Vector3D = require("awayjs-core/lib/core/geom/Vector3D");

/**
* away.geom.Matrix3DUtils provides additional Matrix3D functions.
*/
var Matrix3DUtils = (function () {
    function Matrix3DUtils() {
    }
    /**
    * Fills the 3d matrix object with values representing the transformation made by the given quaternion.
    *
    * @param    quarternion    The quarterion object to convert.
    */
    Matrix3DUtils.quaternion2matrix = function (quarternion, m) {
        if (typeof m === "undefined") { m = null; }
        var x = quarternion.x;
        var y = quarternion.y;
        var z = quarternion.z;
        var w = quarternion.w;

        var xx = x * x;
        var xy = x * y;
        var xz = x * z;
        var xw = x * w;

        var yy = y * y;
        var yz = y * z;
        var yw = y * w;

        var zz = z * z;
        var zw = z * w;

        var raw = Matrix3DUtils.RAW_DATA_CONTAINER;
        raw[0] = 1 - 2 * (yy + zz);
        raw[1] = 2 * (xy + zw);
        raw[2] = 2 * (xz - yw);
        raw[4] = 2 * (xy - zw);
        raw[5] = 1 - 2 * (xx + zz);
        raw[6] = 2 * (yz + xw);
        raw[8] = 2 * (xz + yw);
        raw[9] = 2 * (yz - xw);
        raw[10] = 1 - 2 * (xx + yy);
        raw[3] = raw[7] = raw[11] = raw[12] = raw[13] = raw[14] = 0;
        raw[15] = 1;

        if (m) {
            m.copyRawDataFrom(raw);
            return m;
        } else
            return new Matrix3D(raw);
    };

    /**
    * Returns a normalised <code>Vector3D</code> object representing the forward vector of the given matrix.
    * @param    m        The Matrix3D object to use to get the forward vector
    * @param    v        [optional] A vector holder to prevent make new Vector3D instance if already exists. Default is null.
    * @return            The forward vector
    */
    Matrix3DUtils.getForward = function (m, v) {
        if (typeof v === "undefined") { v = null; }
        //v ||= new Vector3D(0.0, 0.0, 0.0);
        if (v === null) {
            v = new Vector3D(0.0, 0.0, 0.0);
        }

        m.copyColumnTo(2, v);
        v.normalize();

        return v;
    };

    /**
    * Returns a normalised <code>Vector3D</code> object representing the up vector of the given matrix.
    * @param    m        The Matrix3D object to use to get the up vector
    * @param    v        [optional] A vector holder to prevent make new Vector3D instance if already exists. Default is null.
    * @return            The up vector
    */
    Matrix3DUtils.getUp = function (m, v) {
        //v ||= new Vector3D(0.0, 0.0, 0.0);
        if (typeof v === "undefined") { v = null; }
        if (v === null) {
            v = new Vector3D(0.0, 0.0, 0.0);
        }

        m.copyColumnTo(1, v);
        v.normalize();

        return v;
    };

    /**
    * Returns a normalised <code>Vector3D</code> object representing the right vector of the given matrix.
    * @param    m        The Matrix3D object to use to get the right vector
    * @param    v        [optional] A vector holder to prevent make new Vector3D instance if already exists. Default is null.
    * @return            The right vector
    */
    Matrix3DUtils.getRight = function (m, v) {
        if (typeof v === "undefined") { v = null; }
        //v ||= new Vector3D(0.0, 0.0, 0.0);
        if (v === null) {
            v = new Vector3D(0.0, 0.0, 0.0);
        }

        m.copyColumnTo(0, v);
        v.normalize();

        return v;
    };

    /**
    * Returns a boolean value representing whether there is any significant difference between the two given 3d matrices.
    */
    Matrix3DUtils.compare = function (m1, m2) {
        var r1 = Matrix3DUtils.RAW_DATA_CONTAINER;
        var r2 = m2.rawData;
        m1.copyRawDataTo(r1);

        for (var i = 0; i < 16; ++i) {
            if (r1[i] != r2[i])
                return false;
        }

        return true;
    };

    Matrix3DUtils.lookAt = function (matrix, pos, dir, up) {
        var dirN;
        var upN;
        var lftN;
        var raw = Matrix3DUtils.RAW_DATA_CONTAINER;

        lftN = dir.crossProduct(up);
        lftN.normalize();

        upN = lftN.crossProduct(dir);
        upN.normalize();
        dirN = dir.clone();
        dirN.normalize();

        raw[0] = lftN.x;
        raw[1] = upN.x;
        raw[2] = -dirN.x;
        raw[3] = 0.0;

        raw[4] = lftN.y;
        raw[5] = upN.y;
        raw[6] = -dirN.y;
        raw[7] = 0.0;

        raw[8] = lftN.z;
        raw[9] = upN.z;
        raw[10] = -dirN.z;
        raw[11] = 0.0;

        raw[12] = -lftN.dotProduct(pos);
        raw[13] = -upN.dotProduct(pos);
        raw[14] = dirN.dotProduct(pos);
        raw[15] = 1.0;

        matrix.copyRawDataFrom(raw);
    };

    Matrix3DUtils.reflection = function (plane, target) {
        if (typeof target === "undefined") { target = null; }
        if (target === null)
            target = new Matrix3D();

        var a = plane.a, b = plane.b, c = plane.c, d = plane.d;
        var rawData = Matrix3DUtils.RAW_DATA_CONTAINER;
        var ab2 = -2 * a * b;
        var ac2 = -2 * a * c;
        var bc2 = -2 * b * c;

        // reflection matrix
        rawData[0] = 1 - 2 * a * a;
        rawData[4] = ab2;
        rawData[8] = ac2;
        rawData[12] = -2 * a * d;
        rawData[1] = ab2;
        rawData[5] = 1 - 2 * b * b;
        rawData[9] = bc2;
        rawData[13] = -2 * b * d;
        rawData[2] = ac2;
        rawData[6] = bc2;
        rawData[10] = 1 - 2 * c * c;
        rawData[14] = -2 * c * d;
        rawData[3] = 0;
        rawData[7] = 0;
        rawData[11] = 0;
        rawData[15] = 1;
        target.copyRawDataFrom(rawData);

        return target;
    };

    Matrix3DUtils.transformVector = function (matrix, vector, result) {
        if (typeof result === "undefined") { result = null; }
        if (!result)
            result = new Vector3D();

        var raw = Matrix3DUtils.RAW_DATA_CONTAINER;
        matrix.copyRawDataTo(raw);
        var a = raw[0];
        var e = raw[1];
        var i = raw[2];
        var m = raw[3];
        var b = raw[4];
        var f = raw[5];
        var j = raw[6];
        var n = raw[7];
        var c = raw[8];
        var g = raw[9];
        var k = raw[10];
        var o = raw[11];
        var d = raw[12];
        var h = raw[13];
        var l = raw[14];
        var p = raw[15];

        var x = vector.x;
        var y = vector.y;
        var z = vector.z;
        result.x = a * x + b * y + c * z + d;
        result.y = e * x + f * y + g * z + h;
        result.z = i * x + j * y + k * z + l;
        result.w = m * x + n * y + o * z + p;
        return result;
    };

    Matrix3DUtils.deltaTransformVector = function (matrix, vector, result) {
        if (typeof result === "undefined") { result = null; }
        if (!result)
            result = new Vector3D();

        var raw = Matrix3DUtils.RAW_DATA_CONTAINER;
        matrix.copyRawDataTo(raw);
        var a = raw[0];
        var e = raw[1];
        var i = raw[2];
        var m = raw[3];
        var b = raw[4];
        var f = raw[5];
        var j = raw[6];
        var n = raw[7];
        var c = raw[8];
        var g = raw[9];
        var k = raw[10];
        var o = raw[11];
        var x = vector.x;
        var y = vector.y;
        var z = vector.z;
        result.x = a * x + b * y + c * z;
        result.y = e * x + f * y + g * z;
        result.z = i * x + j * y + k * z;
        result.w = m * x + n * y + o * z;
        return result;
    };

    Matrix3DUtils.getTranslation = function (transform, result) {
        if (typeof result === "undefined") { result = null; }
        if (!result)
            result = new Vector3D();

        transform.copyColumnTo(3, result);
        return result;
    };

    Matrix3DUtils.deltaTransformVectors = function (matrix, vin, vout) {
        var raw = Matrix3DUtils.RAW_DATA_CONTAINER;
        matrix.copyRawDataTo(raw);
        var a = raw[0];
        var e = raw[1];
        var i = raw[2];
        var m = raw[3];
        var b = raw[4];
        var f = raw[5];
        var j = raw[6];
        var n = raw[7];
        var c = raw[8];
        var g = raw[9];
        var k = raw[10];
        var o = raw[11];
        var outIndex = 0;
        var length = vin.length;
        for (var index = 0; index < length; index += 3) {
            var x = vin[index];
            var y = vin[index + 1];
            var z = vin[index + 2];
            vout[outIndex++] = a * x + b * y + c * z;
            vout[outIndex++] = e * x + f * y + g * z;
            vout[outIndex++] = i * x + j * y + k * z;
        }
    };
    Matrix3DUtils.RAW_DATA_CONTAINER = new Array(16);

    Matrix3DUtils.CALCULATION_MATRIX = new Matrix3D();
    return Matrix3DUtils;
})();

module.exports = Matrix3DUtils;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvZ2VvbS9NYXRyaXgzRFV0aWxzLnRzIl0sIm5hbWVzIjpbIk1hdHJpeDNEVXRpbHMiLCJNYXRyaXgzRFV0aWxzLmNvbnN0cnVjdG9yIiwiTWF0cml4M0RVdGlscy5xdWF0ZXJuaW9uMm1hdHJpeCIsIk1hdHJpeDNEVXRpbHMuZ2V0Rm9yd2FyZCIsIk1hdHJpeDNEVXRpbHMuZ2V0VXAiLCJNYXRyaXgzRFV0aWxzLmdldFJpZ2h0IiwiTWF0cml4M0RVdGlscy5jb21wYXJlIiwiTWF0cml4M0RVdGlscy5sb29rQXQiLCJNYXRyaXgzRFV0aWxzLnJlZmxlY3Rpb24iLCJNYXRyaXgzRFV0aWxzLnRyYW5zZm9ybVZlY3RvciIsIk1hdHJpeDNEVXRpbHMuZGVsdGFUcmFuc2Zvcm1WZWN0b3IiLCJNYXRyaXgzRFV0aWxzLmdldFRyYW5zbGF0aW9uIiwiTWF0cml4M0RVdGlscy5kZWx0YVRyYW5zZm9ybVZlY3RvcnMiXSwibWFwcGluZ3MiOiJBQUFBLDREQUNvRTs7QUFFcEUsNERBQW9FOztBQUdwRTs7RUFFRztBQUNIO0lBQUFBO0lBaVRBQyxDQUFDQTtBQUFBRCxJQWxTQUE7Ozs7TUFER0E7c0NBQ0hBLFVBQWdDQSxXQUFzQkEsRUFBRUEsQ0FBaUJBO1FBQWpCRSxnQ0FBQUEsQ0FBQ0EsR0FBWUEsSUFBSUE7QUFBQUEsUUFFeEVBLElBQUlBLENBQUNBLEdBQVVBLFdBQVdBLENBQUNBLENBQUNBO1FBQzVCQSxJQUFJQSxDQUFDQSxHQUFVQSxXQUFXQSxDQUFDQSxDQUFDQTtRQUM1QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsV0FBV0EsQ0FBQ0EsQ0FBQ0E7UUFDNUJBLElBQUlBLENBQUNBLEdBQVVBLFdBQVdBLENBQUNBLENBQUNBOztRQUU1QkEsSUFBSUEsRUFBRUEsR0FBVUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0E7UUFDbkJBLElBQUlBLEVBQUVBLEdBQVVBLENBQUNBLEdBQUNBLENBQUNBO1FBQ25CQSxJQUFJQSxFQUFFQSxHQUFVQSxDQUFDQSxHQUFDQSxDQUFDQTtRQUNuQkEsSUFBSUEsRUFBRUEsR0FBVUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0E7O1FBRW5CQSxJQUFJQSxFQUFFQSxHQUFVQSxDQUFDQSxHQUFDQSxDQUFDQTtRQUNuQkEsSUFBSUEsRUFBRUEsR0FBVUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0E7UUFDbkJBLElBQUlBLEVBQUVBLEdBQVVBLENBQUNBLEdBQUNBLENBQUNBOztRQUVuQkEsSUFBSUEsRUFBRUEsR0FBVUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0E7UUFDbkJBLElBQUlBLEVBQUVBLEdBQVVBLENBQUNBLEdBQUNBLENBQUNBOztRQUVuQkEsSUFBSUEsR0FBR0EsR0FBWUEsYUFBYUEsQ0FBQ0Esa0JBQWtCQTtRQUNuREEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDeEJBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUNBLENBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ3BCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNwQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDcEJBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUNBLENBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ3hCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNwQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDcEJBLEdBQUdBLENBQUNB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QUFDQSxDQUFDQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDckJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ3JCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDckJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7O1FBRXRCQSxJQUFJQSxDQUFDQSxHQUFVQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUN2QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDdkJBLElBQUlBLENBQUNBLEdBQVVBLE1BQU1BLENBQUNBLENBQUNBO1FBQ3ZCQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNwQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDcENBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBO1FBQ3BDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNwQ0EsT0FBT0EsTUFBTUE7SUFDZEEsQ0FBQ0E7O0lBRURULHFDQUFBQSxVQUFtQ0EsTUFBZUEsRUFBRUEsTUFBZUEsRUFBRUEsTUFBc0JBO1FBQXRCVSxxQ0FBQUEsTUFBTUEsR0FBWUEsSUFBSUE7QUFBQUEsUUFFMUZBLElBQUlBLENBQUNBLE1BQU1BO1lBQ1ZBLE1BQU1BLEdBQUdBLElBQUlBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBOztRQUV6QkEsSUFBSUEsR0FBR0EsR0FBaUJBLGFBQWFBLENBQUNBLGtCQUFrQkE7UUFDeERBLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBLEdBQUdBLENBQUNBO1FBQ3pCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDckJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ3JCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDckJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ3JCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDckJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ3JCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUN2QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDdkJBLElBQUlBLENBQUNBLEdBQVVBLE1BQU1BLENBQUNBLENBQUNBO1FBQ3ZCQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNoQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDaENBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBO1FBQ2hDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNoQ0EsT0FBT0EsTUFBTUE7SUFDZEEsQ0FBQ0E7O0lBRURWLCtCQUFBQSxVQUE2QkEsU0FBa0JBLEVBQUVBLE1BQXNCQTtRQUF0QlcscUNBQUFBLE1BQU1BLEdBQVlBLElBQUlBO0FBQUFBLFFBRXRFQSxJQUFHQSxDQUFDQSxNQUFNQTtZQUNUQSxNQUFNQSxHQUFHQSxJQUFJQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTs7UUFFekJBLFNBQVNBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLEVBQUVBLE1BQU1BLENBQUNBO1FBQ2pDQSxPQUFPQSxNQUFNQTtJQUNkQSxDQUFDQTs7SUFFRFgsc0NBQUFBLFVBQW9DQSxNQUFlQSxFQUFFQSxHQUFpQkEsRUFBRUEsSUFBa0JBO1FBRXpGWSxJQUFJQSxHQUFHQSxHQUFpQkEsYUFBYUEsQ0FBQ0Esa0JBQWtCQTtRQUN4REEsTUFBTUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDekJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ3JCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDckJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ3JCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDckJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ3JCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDckJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ3JCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7UUFDdEJBLElBQUlBLFFBQVFBLEdBQVVBLENBQUNBO1FBQ3ZCQSxJQUFJQSxNQUFNQSxHQUFVQSxHQUFHQSxDQUFDQSxNQUFNQTtRQUM5QkEsS0FBSUEsSUFBSUEsS0FBS0EsR0FBVUEsQ0FBQ0EsRUFBRUEsS0FBS0EsR0FBQ0EsTUFBTUEsRUFBRUEsS0FBS0EsSUFBRUEsQ0FBQ0EsQ0FBRUE7WUFDakRBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBO1lBQ3pCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxLQUFLQSxHQUFDQSxDQUFDQSxDQUFDQTtZQUMzQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsS0FBS0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDM0JBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBO1lBQ3hDQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQTtZQUN4Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0E7U0FDeENBO0lBQ0ZBLENBQUNBO0lBM1NEWixtQ0FBNENBLElBQUlBLEtBQUtBLENBQVNBLEVBQUVBLENBQUNBOztJQUdqRUEsbUNBQTRDQSxJQUFJQSxRQUFRQSxDQUFDQSxDQUFDQTtJQXlTM0RBLHFCQUFDQTtBQUFEQSxDQUFDQSxJQUFBOztBQUVELDhCQUF1QixDQUFBIiwiZmlsZSI6ImNvcmUvZ2VvbS9NYXRyaXgzRFV0aWxzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9yb2JiYXRlbWFuL1dlYnN0b3JtUHJvamVjdHMvYXdheWpzLWNvcmUvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFF1YXRlcm5pb25cdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2dlb20vUXVhdGVybmlvblwiKTtcbmltcG9ydCBNYXRyaXgzRFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9nZW9tL01hdHJpeDNEXCIpO1xuaW1wb3J0IFBsYW5lM0RcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2NvcmUvZ2VvbS9QbGFuZTNEXCIpO1xuaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2dlb20vVmVjdG9yM0RcIik7XG5cblxuLyoqXG4gKiBhd2F5Lmdlb20uTWF0cml4M0RVdGlscyBwcm92aWRlcyBhZGRpdGlvbmFsIE1hdHJpeDNEIGZ1bmN0aW9ucy5cbiAqL1xuY2xhc3MgTWF0cml4M0RVdGlsc1xue1xuXHQvKipcblx0ICogQSByZWZlcmVuY2UgdG8gYSBWZWN0b3IgdG8gYmUgdXNlZCBhcyBhIHRlbXBvcmFyeSByYXcgZGF0YSBjb250YWluZXIsIHRvIHByZXZlbnQgb2JqZWN0IGNyZWF0aW9uLlxuXHQgKi9cblx0cHVibGljIHN0YXRpYyBSQVdfREFUQV9DT05UQUlORVI6bnVtYmVyW10gPSBuZXcgQXJyYXk8bnVtYmVyPigxNik7XG5cdC8vcHVibGljIHN0YXRpYyBSQVdfREFUQV9DT05UQUlORVI6bnVtYmVyW10gPSBuZXcgQXJyYXk8bnVtYmVyPigxNik7XG5cblx0cHVibGljIHN0YXRpYyBDQUxDVUxBVElPTl9NQVRSSVg6TWF0cml4M0QgPSBuZXcgTWF0cml4M0QoKTtcblxuXHQvKipcblx0ICogRmlsbHMgdGhlIDNkIG1hdHJpeCBvYmplY3Qgd2l0aCB2YWx1ZXMgcmVwcmVzZW50aW5nIHRoZSB0cmFuc2Zvcm1hdGlvbiBtYWRlIGJ5IHRoZSBnaXZlbiBxdWF0ZXJuaW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0gICAgcXVhcnRlcm5pb24gICAgVGhlIHF1YXJ0ZXJpb24gb2JqZWN0IHRvIGNvbnZlcnQuXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIHF1YXRlcm5pb24ybWF0cml4KHF1YXJ0ZXJuaW9uOlF1YXRlcm5pb24sIG06TWF0cml4M0QgPSBudWxsKTpNYXRyaXgzRFxuXHR7XG5cdFx0dmFyIHg6bnVtYmVyID0gcXVhcnRlcm5pb24ueDtcblx0XHR2YXIgeTpudW1iZXIgPSBxdWFydGVybmlvbi55O1xuXHRcdHZhciB6Om51bWJlciA9IHF1YXJ0ZXJuaW9uLno7XG5cdFx0dmFyIHc6bnVtYmVyID0gcXVhcnRlcm5pb24udztcblxuXHRcdHZhciB4eDpudW1iZXIgPSB4Kng7XG5cdFx0dmFyIHh5Om51bWJlciA9IHgqeTtcblx0XHR2YXIgeHo6bnVtYmVyID0geCp6O1xuXHRcdHZhciB4dzpudW1iZXIgPSB4Knc7XG5cblx0XHR2YXIgeXk6bnVtYmVyID0geSp5O1xuXHRcdHZhciB5ejpudW1iZXIgPSB5Kno7XG5cdFx0dmFyIHl3Om51bWJlciA9IHkqdztcblxuXHRcdHZhciB6ejpudW1iZXIgPSB6Kno7XG5cdFx0dmFyIHp3Om51bWJlciA9IHoqdztcblxuXHRcdHZhciByYXc6bnVtYmVyW10gPSBNYXRyaXgzRFV0aWxzLlJBV19EQVRBX0NPTlRBSU5FUjtcblx0XHRyYXdbMF0gPSAxIC0gMiooeXkgKyB6eik7XG5cdFx0cmF3WzFdID0gMiooeHkgKyB6dyk7XG5cdFx0cmF3WzJdID0gMiooeHogLSB5dyk7XG5cdFx0cmF3WzRdID0gMiooeHkgLSB6dyk7XG5cdFx0cmF3WzVdID0gMSAtIDIqKHh4ICsgenopO1xuXHRcdHJhd1s2XSA9IDIqKHl6ICsgeHcpO1xuXHRcdHJhd1s4XSA9IDIqKHh6ICsgeXcpO1xuXHRcdHJhd1s5XSA9IDIqKHl6IC0geHcpO1xuXHRcdHJhd1sxMF0gPSAxIC0gMiooeHggKyB5eSk7XG5cdFx0cmF3WzNdID0gcmF3WzddID0gcmF3WzExXSA9IHJhd1sxMl0gPSByYXdbMTNdID0gcmF3WzE0XSA9IDA7XG5cdFx0cmF3WzE1XSA9IDE7XG5cblx0XHRpZiAobSkge1xuXHRcdFx0bS5jb3B5UmF3RGF0YUZyb20ocmF3KTtcblx0XHRcdHJldHVybiBtO1xuXHRcdH0gZWxzZVxuXHRcdFx0cmV0dXJuIG5ldyBNYXRyaXgzRChyYXcpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBub3JtYWxpc2VkIDxjb2RlPlZlY3RvcjNEPC9jb2RlPiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBmb3J3YXJkIHZlY3RvciBvZiB0aGUgZ2l2ZW4gbWF0cml4LlxuXHQgKiBAcGFyYW0gICAgbSAgICAgICAgVGhlIE1hdHJpeDNEIG9iamVjdCB0byB1c2UgdG8gZ2V0IHRoZSBmb3J3YXJkIHZlY3RvclxuXHQgKiBAcGFyYW0gICAgdiAgICAgICAgW29wdGlvbmFsXSBBIHZlY3RvciBob2xkZXIgdG8gcHJldmVudCBtYWtlIG5ldyBWZWN0b3IzRCBpbnN0YW5jZSBpZiBhbHJlYWR5IGV4aXN0cy4gRGVmYXVsdCBpcyBudWxsLlxuXHQgKiBAcmV0dXJuICAgICAgICAgICAgVGhlIGZvcndhcmQgdmVjdG9yXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIGdldEZvcndhcmQobTpNYXRyaXgzRCwgdjpWZWN0b3IzRCA9IG51bGwpOlZlY3RvcjNEXG5cdHtcblx0XHQvL3YgfHw9IG5ldyBWZWN0b3IzRCgwLjAsIDAuMCwgMC4wKTtcblx0XHRpZiAodiA9PT0gbnVsbCkge1xuXG5cdFx0XHR2ID0gbmV3IFZlY3RvcjNEKDAuMCwgMC4wLCAwLjApO1xuXG5cdFx0fVxuXG5cdFx0bS5jb3B5Q29sdW1uVG8oMiwgdik7XG5cdFx0di5ub3JtYWxpemUoKTtcblxuXHRcdHJldHVybiB2O1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBub3JtYWxpc2VkIDxjb2RlPlZlY3RvcjNEPC9jb2RlPiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSB1cCB2ZWN0b3Igb2YgdGhlIGdpdmVuIG1hdHJpeC5cblx0ICogQHBhcmFtICAgIG0gICAgICAgIFRoZSBNYXRyaXgzRCBvYmplY3QgdG8gdXNlIHRvIGdldCB0aGUgdXAgdmVjdG9yXG5cdCAqIEBwYXJhbSAgICB2ICAgICAgICBbb3B0aW9uYWxdIEEgdmVjdG9yIGhvbGRlciB0byBwcmV2ZW50IG1ha2UgbmV3IFZlY3RvcjNEIGluc3RhbmNlIGlmIGFscmVhZHkgZXhpc3RzLiBEZWZhdWx0IGlzIG51bGwuXG5cdCAqIEByZXR1cm4gICAgICAgICAgICBUaGUgdXAgdmVjdG9yXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIGdldFVwKG06TWF0cml4M0QsIHY6VmVjdG9yM0QgPSBudWxsKTpWZWN0b3IzRFxuXHR7XG5cdFx0Ly92IHx8PSBuZXcgVmVjdG9yM0QoMC4wLCAwLjAsIDAuMCk7XG5cblx0XHRpZiAodiA9PT0gbnVsbCkge1xuXG5cdFx0XHR2ID0gbmV3IFZlY3RvcjNEKDAuMCwgMC4wLCAwLjApO1xuXG5cdFx0fVxuXG5cdFx0bS5jb3B5Q29sdW1uVG8oMSwgdik7XG5cdFx0di5ub3JtYWxpemUoKTtcblxuXHRcdHJldHVybiB2O1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBub3JtYWxpc2VkIDxjb2RlPlZlY3RvcjNEPC9jb2RlPiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSByaWdodCB2ZWN0b3Igb2YgdGhlIGdpdmVuIG1hdHJpeC5cblx0ICogQHBhcmFtICAgIG0gICAgICAgIFRoZSBNYXRyaXgzRCBvYmplY3QgdG8gdXNlIHRvIGdldCB0aGUgcmlnaHQgdmVjdG9yXG5cdCAqIEBwYXJhbSAgICB2ICAgICAgICBbb3B0aW9uYWxdIEEgdmVjdG9yIGhvbGRlciB0byBwcmV2ZW50IG1ha2UgbmV3IFZlY3RvcjNEIGluc3RhbmNlIGlmIGFscmVhZHkgZXhpc3RzLiBEZWZhdWx0IGlzIG51bGwuXG5cdCAqIEByZXR1cm4gICAgICAgICAgICBUaGUgcmlnaHQgdmVjdG9yXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIGdldFJpZ2h0KG06TWF0cml4M0QsIHY6VmVjdG9yM0QgPSBudWxsKTpWZWN0b3IzRFxuXHR7XG5cdFx0Ly92IHx8PSBuZXcgVmVjdG9yM0QoMC4wLCAwLjAsIDAuMCk7XG5cdFx0aWYgKHYgPT09IG51bGwpIHtcblxuXHRcdFx0diA9IG5ldyBWZWN0b3IzRCgwLjAsIDAuMCwgMC4wKTtcblxuXHRcdH1cblxuXHRcdG0uY29weUNvbHVtblRvKDAsIHYpO1xuXHRcdHYubm9ybWFsaXplKCk7XG5cblx0XHRyZXR1cm4gdjtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgYm9vbGVhbiB2YWx1ZSByZXByZXNlbnRpbmcgd2hldGhlciB0aGVyZSBpcyBhbnkgc2lnbmlmaWNhbnQgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSB0d28gZ2l2ZW4gM2QgbWF0cmljZXMuXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIGNvbXBhcmUobTE6TWF0cml4M0QsIG0yOk1hdHJpeDNEKTpib29sZWFuXG5cdHtcblx0XHR2YXIgcjE6bnVtYmVyW10gPSBNYXRyaXgzRFV0aWxzLlJBV19EQVRBX0NPTlRBSU5FUjtcblx0XHR2YXIgcjI6bnVtYmVyW10gPSBtMi5yYXdEYXRhO1xuXHRcdG0xLmNvcHlSYXdEYXRhVG8ocjEpO1xuXG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgPSAwOyBpIDwgMTY7ICsraSkge1xuXHRcdFx0aWYgKHIxW2ldICE9IHIyW2ldKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGxvb2tBdChtYXRyaXg6TWF0cml4M0QsIHBvczpWZWN0b3IzRCwgZGlyOlZlY3RvcjNELCB1cDpWZWN0b3IzRClcblx0e1xuXHRcdHZhciBkaXJOOlZlY3RvcjNEO1xuXHRcdHZhciB1cE46VmVjdG9yM0Q7XG5cdFx0dmFyIGxmdE46VmVjdG9yM0Q7XG5cdFx0dmFyIHJhdzpudW1iZXJbXSA9IE1hdHJpeDNEVXRpbHMuUkFXX0RBVEFfQ09OVEFJTkVSO1xuXG5cdFx0bGZ0TiA9IGRpci5jcm9zc1Byb2R1Y3QodXApO1xuXHRcdGxmdE4ubm9ybWFsaXplKCk7XG5cblx0XHR1cE4gPSBsZnROLmNyb3NzUHJvZHVjdChkaXIpO1xuXHRcdHVwTi5ub3JtYWxpemUoKTtcblx0XHRkaXJOID0gZGlyLmNsb25lKCk7XG5cdFx0ZGlyTi5ub3JtYWxpemUoKTtcblxuXHRcdHJhd1swXSA9IGxmdE4ueDtcblx0XHRyYXdbMV0gPSB1cE4ueDtcblx0XHRyYXdbMl0gPSAtZGlyTi54O1xuXHRcdHJhd1szXSA9IDAuMDtcblxuXHRcdHJhd1s0XSA9IGxmdE4ueTtcblx0XHRyYXdbNV0gPSB1cE4ueTtcblx0XHRyYXdbNl0gPSAtZGlyTi55O1xuXHRcdHJhd1s3XSA9IDAuMDtcblxuXHRcdHJhd1s4XSA9IGxmdE4uejtcblx0XHRyYXdbOV0gPSB1cE4uejtcblx0XHRyYXdbMTBdID0gLWRpck4uejtcblx0XHRyYXdbMTFdID0gMC4wO1xuXG5cdFx0cmF3WzEyXSA9IC1sZnROLmRvdFByb2R1Y3QocG9zKTtcblx0XHRyYXdbMTNdID0gLXVwTi5kb3RQcm9kdWN0KHBvcyk7XG5cdFx0cmF3WzE0XSA9IGRpck4uZG90UHJvZHVjdChwb3MpO1xuXHRcdHJhd1sxNV0gPSAxLjA7XG5cblx0XHRtYXRyaXguY29weVJhd0RhdGFGcm9tKHJhdyk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIHJlZmxlY3Rpb24ocGxhbmU6UGxhbmUzRCwgdGFyZ2V0Ok1hdHJpeDNEID0gbnVsbCk6TWF0cml4M0Rcblx0e1xuXHRcdGlmICh0YXJnZXQgPT09IG51bGwpXG5cdFx0XHR0YXJnZXQgPSBuZXcgTWF0cml4M0QoKTtcblxuXHRcdHZhciBhOm51bWJlciA9IHBsYW5lLmEsIGI6bnVtYmVyID0gcGxhbmUuYiwgYzpudW1iZXIgPSBwbGFuZS5jLCBkOm51bWJlciA9IHBsYW5lLmQ7XG5cdFx0dmFyIHJhd0RhdGE6bnVtYmVyW10gPSBNYXRyaXgzRFV0aWxzLlJBV19EQVRBX0NPTlRBSU5FUjtcblx0XHR2YXIgYWIyOm51bWJlciA9IC0yKmEqYjtcblx0XHR2YXIgYWMyOm51bWJlciA9IC0yKmEqYztcblx0XHR2YXIgYmMyOm51bWJlciA9IC0yKmIqYztcblx0XHQvLyByZWZsZWN0aW9uIG1hdHJpeFxuXHRcdHJhd0RhdGFbMF0gPSAxIC0gMiphKmE7XG5cdFx0cmF3RGF0YVs0XSA9IGFiMjtcblx0XHRyYXdEYXRhWzhdID0gYWMyO1xuXHRcdHJhd0RhdGFbMTJdID0gLTIqYSpkO1xuXHRcdHJhd0RhdGFbMV0gPSBhYjI7XG5cdFx0cmF3RGF0YVs1XSA9IDEgLSAyKmIqYjtcblx0XHRyYXdEYXRhWzldID0gYmMyO1xuXHRcdHJhd0RhdGFbMTNdID0gLTIqYipkO1xuXHRcdHJhd0RhdGFbMl0gPSBhYzI7XG5cdFx0cmF3RGF0YVs2XSA9IGJjMjtcblx0XHRyYXdEYXRhWzEwXSA9IDEgLSAyKmMqYztcblx0XHRyYXdEYXRhWzE0XSA9IC0yKmMqZDtcblx0XHRyYXdEYXRhWzNdID0gMDtcblx0XHRyYXdEYXRhWzddID0gMDtcblx0XHRyYXdEYXRhWzExXSA9IDA7XG5cdFx0cmF3RGF0YVsxNV0gPSAxO1xuXHRcdHRhcmdldC5jb3B5UmF3RGF0YUZyb20ocmF3RGF0YSk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXHR9XG5cblxuXHRwdWJsaWMgc3RhdGljIHRyYW5zZm9ybVZlY3RvcihtYXRyaXg6TWF0cml4M0QsIHZlY3RvcjpWZWN0b3IzRCwgcmVzdWx0OlZlY3RvcjNEID0gbnVsbCk6VmVjdG9yM0Rcblx0e1xuXHRcdGlmICghcmVzdWx0KVxuXHRcdFx0cmVzdWx0ID0gbmV3IFZlY3RvcjNEKCk7XG5cblx0XHR2YXIgcmF3OkFycmF5PG51bWJlcj4gPSBNYXRyaXgzRFV0aWxzLlJBV19EQVRBX0NPTlRBSU5FUjtcblx0XHRtYXRyaXguY29weVJhd0RhdGFUbyhyYXcpO1xuXHRcdHZhciBhOm51bWJlciA9IHJhd1swXTtcblx0XHR2YXIgZTpudW1iZXIgPSByYXdbMV07XG5cdFx0dmFyIGk6bnVtYmVyID0gcmF3WzJdO1xuXHRcdHZhciBtOm51bWJlciA9IHJhd1szXTtcblx0XHR2YXIgYjpudW1iZXIgPSByYXdbNF07XG5cdFx0dmFyIGY6bnVtYmVyID0gcmF3WzVdO1xuXHRcdHZhciBqOm51bWJlciA9IHJhd1s2XTtcblx0XHR2YXIgbjpudW1iZXIgPSByYXdbN107XG5cdFx0dmFyIGM6bnVtYmVyID0gcmF3WzhdO1xuXHRcdHZhciBnOm51bWJlciA9IHJhd1s5XTtcblx0XHR2YXIgazpudW1iZXIgPSByYXdbMTBdO1xuXHRcdHZhciBvOm51bWJlciA9IHJhd1sxMV07XG5cdFx0dmFyIGQ6bnVtYmVyID0gcmF3WzEyXTtcblx0XHR2YXIgaDpudW1iZXIgPSByYXdbMTNdO1xuXHRcdHZhciBsOm51bWJlciA9IHJhd1sxNF07XG5cdFx0dmFyIHA6bnVtYmVyID0gcmF3WzE1XTtcblxuXHRcdHZhciB4Om51bWJlciA9IHZlY3Rvci54O1xuXHRcdHZhciB5Om51bWJlciA9IHZlY3Rvci55O1xuXHRcdHZhciB6Om51bWJlciA9IHZlY3Rvci56O1xuXHRcdHJlc3VsdC54ID0gYSAqIHggKyBiICogeSArIGMgKiB6ICsgZDtcblx0XHRyZXN1bHQueSA9IGUgKiB4ICsgZiAqIHkgKyBnICogeiArIGg7XG5cdFx0cmVzdWx0LnogPSBpICogeCArIGogKiB5ICsgayAqIHogKyBsO1xuXHRcdHJlc3VsdC53ID0gbSAqIHggKyBuICogeSArIG8gKiB6ICsgcDtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBkZWx0YVRyYW5zZm9ybVZlY3RvcihtYXRyaXg6TWF0cml4M0QsIHZlY3RvcjpWZWN0b3IzRCwgcmVzdWx0OlZlY3RvcjNEID0gbnVsbCk6VmVjdG9yM0Rcblx0e1xuXHRcdGlmICghcmVzdWx0KVxuXHRcdFx0cmVzdWx0ID0gbmV3IFZlY3RvcjNEKCk7XG5cblx0XHR2YXIgcmF3OkFycmF5PG51bWJlcj4gPSBNYXRyaXgzRFV0aWxzLlJBV19EQVRBX0NPTlRBSU5FUjtcblx0XHRtYXRyaXguY29weVJhd0RhdGFUbyhyYXcpO1xuXHRcdHZhciBhOm51bWJlciA9IHJhd1swXTtcblx0XHR2YXIgZTpudW1iZXIgPSByYXdbMV07XG5cdFx0dmFyIGk6bnVtYmVyID0gcmF3WzJdO1xuXHRcdHZhciBtOm51bWJlciA9IHJhd1szXTtcblx0XHR2YXIgYjpudW1iZXIgPSByYXdbNF07XG5cdFx0dmFyIGY6bnVtYmVyID0gcmF3WzVdO1xuXHRcdHZhciBqOm51bWJlciA9IHJhd1s2XTtcblx0XHR2YXIgbjpudW1iZXIgPSByYXdbN107XG5cdFx0dmFyIGM6bnVtYmVyID0gcmF3WzhdO1xuXHRcdHZhciBnOm51bWJlciA9IHJhd1s5XTtcblx0XHR2YXIgazpudW1iZXIgPSByYXdbMTBdO1xuXHRcdHZhciBvOm51bWJlciA9IHJhd1sxMV07XG5cdFx0dmFyIHg6bnVtYmVyID0gdmVjdG9yLng7XG5cdFx0dmFyIHk6bnVtYmVyID0gdmVjdG9yLnk7XG5cdFx0dmFyIHo6bnVtYmVyID0gdmVjdG9yLno7XG5cdFx0cmVzdWx0LnggPSBhICogeCArIGIgKiB5ICsgYyAqIHo7XG5cdFx0cmVzdWx0LnkgPSBlICogeCArIGYgKiB5ICsgZyAqIHo7XG5cdFx0cmVzdWx0LnogPSBpICogeCArIGogKiB5ICsgayAqIHo7XG5cdFx0cmVzdWx0LncgPSBtICogeCArIG4gKiB5ICsgbyAqIHo7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgZ2V0VHJhbnNsYXRpb24odHJhbnNmb3JtOk1hdHJpeDNELCByZXN1bHQ6VmVjdG9yM0QgPSBudWxsKTpWZWN0b3IzRFxuXHR7XG5cdFx0aWYoIXJlc3VsdClcblx0XHRcdHJlc3VsdCA9IG5ldyBWZWN0b3IzRCgpO1xuXG5cdFx0dHJhbnNmb3JtLmNvcHlDb2x1bW5UbygzLCByZXN1bHQpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGRlbHRhVHJhbnNmb3JtVmVjdG9ycyhtYXRyaXg6TWF0cml4M0QsIHZpbjpBcnJheTxudW1iZXI+LCB2b3V0OkFycmF5PG51bWJlcj4pXG5cdHtcblx0XHR2YXIgcmF3OkFycmF5PG51bWJlcj4gPSBNYXRyaXgzRFV0aWxzLlJBV19EQVRBX0NPTlRBSU5FUjtcblx0XHRtYXRyaXguY29weVJhd0RhdGFUbyhyYXcpO1xuXHRcdHZhciBhOm51bWJlciA9IHJhd1swXTtcblx0XHR2YXIgZTpudW1iZXIgPSByYXdbMV07XG5cdFx0dmFyIGk6bnVtYmVyID0gcmF3WzJdO1xuXHRcdHZhciBtOm51bWJlciA9IHJhd1szXTtcblx0XHR2YXIgYjpudW1iZXIgPSByYXdbNF07XG5cdFx0dmFyIGY6bnVtYmVyID0gcmF3WzVdO1xuXHRcdHZhciBqOm51bWJlciA9IHJhd1s2XTtcblx0XHR2YXIgbjpudW1iZXIgPSByYXdbN107XG5cdFx0dmFyIGM6bnVtYmVyID0gcmF3WzhdO1xuXHRcdHZhciBnOm51bWJlciA9IHJhd1s5XTtcblx0XHR2YXIgazpudW1iZXIgPSByYXdbMTBdO1xuXHRcdHZhciBvOm51bWJlciA9IHJhd1sxMV07XG5cdFx0dmFyIG91dEluZGV4Om51bWJlciA9IDA7XG5cdFx0dmFyIGxlbmd0aDpudW1iZXIgPSB2aW4ubGVuZ3RoO1xuXHRcdGZvcih2YXIgaW5kZXg6bnVtYmVyID0gMDsgaW5kZXg8bGVuZ3RoOyBpbmRleCs9Mykge1xuXHRcdFx0dmFyIHg6bnVtYmVyID0gdmluW2luZGV4XTtcblx0XHRcdHZhciB5Om51bWJlciA9IHZpbltpbmRleCsxXTtcblx0XHRcdHZhciB6Om51bWJlciA9IHZpbltpbmRleCsyXTtcblx0XHRcdHZvdXRbb3V0SW5kZXgrK10gPSBhICogeCArIGIgKiB5ICsgYyAqIHo7XG5cdFx0XHR2b3V0W291dEluZGV4KytdID0gZSAqIHggKyBmICogeSArIGcgKiB6O1xuXHRcdFx0dm91dFtvdXRJbmRleCsrXSA9IGkgKiB4ICsgaiAqIHkgKyBrICogejtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0ID0gTWF0cml4M0RVdGlsczsiXX0=