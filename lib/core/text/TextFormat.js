/**
* The TextFormat class represents character formatting information. Use the
* TextFormat class to create specific text formatting for text fields. You
* can apply text formatting to both static and dynamic text fields. The
* properties of the TextFormat class apply to device and embedded fonts.
* However, for embedded fonts, bold and italic text actually require specific
* fonts. If you want to display bold or italic text with an embedded font,
* you need to embed the bold and italic variations of that font.
*
* <p> You must use the constructor <code>new TextFormat()</code> to create a
* TextFormat object before setting its properties. When you apply a
* TextFormat object to a text field using the
* <code>TextField.defaultTextFormat</code> property or the
* <code>TextField.setTextFormat()</code> method, only its defined properties
* are applied. Use the <code>TextField.defaultTextFormat</code> property to
* apply formatting BEFORE you add text to the <code>TextField</code>, and the
* <code>setTextFormat()</code> method to add formatting AFTER you add text to
* the <code>TextField</code>. The TextFormat properties are <code>null</code>
* by default because if you don't provide values for the properties, Flash
* Player uses its own default formatting. The default formatting that Flash
* Player uses for each property(if property's value is <code>null</code>) is
* as follows:</p>
*
* <p>The default formatting for each property is also described in each
* property description.</p>
*/
var TextFormat = (function () {
    /**
    * Creates a TextFormat object with the specified properties. You can then
    * change the properties of the TextFormat object to change the formatting of
    * text fields.
    *
    * <p>Any parameter may be set to <code>null</code> to indicate that it is
    * not defined. All of the parameters are optional; any omitted parameters
    * are treated as <code>null</code>.</p>
    *
    * @param font        The name of a font for text as a string.
    * @param size        An integer that indicates the size in pixels.
    * @param color       The color of text using this text format. A number
    *                    containing three 8-bit RGB components; for example,
    *                    0xFF0000 is red, and 0x00FF00 is green.
    * @param bold        A Boolean value that indicates whether the text is
    *                    boldface.
    * @param italic      A Boolean value that indicates whether the text is
    *                    italicized.
    * @param underline   A Boolean value that indicates whether the text is
    *                    underlined.
    * @param url         The URL to which the text in this text format
    *                    hyperlinks. If <code>url</code> is an empty string, the
    *                    text does not have a hyperlink.
    * @param target      The target window where the hyperlink is displayed. If
    *                    the target window is an empty string, the text is
    *                    displayed in the default target window
    *                    <code>_self</code>. If the <code>url</code> parameter
    *                    is set to an empty string or to the value
    *                    <code>null</code>, you can get or set this property,
    *                    but the property will have no effect.
    * @param align       The alignment of the paragraph, as a TextFormatAlign
    *                    value.
    * @param leftMargin  Indicates the left margin of the paragraph, in pixels.
    * @param rightMargin Indicates the right margin of the paragraph, in pixels.
    * @param indent      An integer that indicates the indentation from the left
    *                    margin to the first character in the paragraph.
    * @param leading     A number that indicates the amount of leading vertical
    *                    space between lines.
    */
    function TextFormat(font, size, color, bold, italic, underline, url, target, align, leftMargin, rightMargin, indent, leading) {
        if (typeof font === "undefined") { font = "Times New Roman"; }
        if (typeof size === "undefined") { size = 12; }
        if (typeof color === "undefined") { color = 0x000000; }
        if (typeof bold === "undefined") { bold = false; }
        if (typeof italic === "undefined") { italic = false; }
        if (typeof underline === "undefined") { underline = false; }
        if (typeof url === "undefined") { url = ""; }
        if (typeof target === "undefined") { target = ""; }
        if (typeof align === "undefined") { align = "left"; }
        if (typeof leftMargin === "undefined") { leftMargin = 0; }
        if (typeof rightMargin === "undefined") { rightMargin = 0; }
        if (typeof indent === "undefined") { indent = 0; }
        if (typeof leading === "undefined") { leading = 0; }
        /**
        * Specifies custom tab stops as an array of non-negative integers. Each tab
        * stop is specified in pixels. If custom tab stops are not specified
        * (<code>null</code>), the default tab stop is 4(average character width).
        */
        this.tabStops = new Array();
        this.font = font;
        this.size = size;
        this.bold = bold;
        this.italic = italic;
        this.underline = underline;
        this.url = url;
        this.target = target;
        this.align = align;
        this.leftMargin = leftMargin;
        this.rightMargin = rightMargin;
        this.indent = indent;
        this.leading = leading;
    }
    return TextFormat;
})();

module.exports = TextFormat;

//# sourceMappingURL=data:application/json;base64,