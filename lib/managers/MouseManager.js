var Vector3D = require("awayjs-core/lib/core/geom/Vector3D");

var AwayMouseEvent = require("awayjs-core/lib/events/MouseEvent");

/**
* MouseManager enforces a singleton pattern and is not intended to be instanced.
* it provides a manager class for detecting mouse hits on scene objects and sending out mouse events.
*/
var MouseManager = (function () {
    /**
    * Creates a new <code>MouseManager</code> object.
    */
    function MouseManager() {
        var _this = this;
        this._viewLookup = new Array();
        this._nullVector = new Vector3D();
        this._queuedEvents = new Array();
        this._mouseUp = new AwayMouseEvent(AwayMouseEvent.MOUSE_UP);
        this._mouseClick = new AwayMouseEvent(AwayMouseEvent.CLICK);
        this._mouseOut = new AwayMouseEvent(AwayMouseEvent.MOUSE_OUT);
        this._mouseDown = new AwayMouseEvent(AwayMouseEvent.MOUSE_DOWN);
        this._mouseMove = new AwayMouseEvent(AwayMouseEvent.MOUSE_MOVE);
        this._mouseOver = new AwayMouseEvent(AwayMouseEvent.MOUSE_OVER);
        this._mouseWheel = new AwayMouseEvent(AwayMouseEvent.MOUSE_WHEEL);
        this._mouseDoubleClick = new AwayMouseEvent(AwayMouseEvent.DOUBLE_CLICK);
        this.onClickDelegate = function (event) {
            return _this.onClick(event);
        };
        this.onDoubleClickDelegate = function (event) {
            return _this.onDoubleClick(event);
        };
        this.onMouseDownDelegate = function (event) {
            return _this.onMouseDown(event);
        };
        this.onMouseMoveDelegate = function (event) {
            return _this.onMouseMove(event);
        };
        this.onMouseUpDelegate = function (event) {
            return _this.onMouseUp(event);
        };
        this.onMouseWheelDelegate = function (event) {
            return _this.onMouseWheel(event);
        };
        this.onMouseOverDelegate = function (event) {
            return _this.onMouseOver(event);
        };
        this.onMouseOutDelegate = function (event) {
            return _this.onMouseOut(event);
        };
    }
    MouseManager.getInstance = function () {
        if (this._instance)
            return this._instance;

        return (this._instance = new MouseManager());
    };

    MouseManager.prototype.fireMouseEvents = function (forceMouseMove) {
        // If colliding object has changed, queue over/out events.
        if (this._iCollidingObject != this._previousCollidingObject) {
            if (this._previousCollidingObject)
                this.queueDispatch(this._mouseOut, this._mouseMoveEvent, this._previousCollidingObject);

            if (this._iCollidingObject)
                this.queueDispatch(this._mouseOver, this._mouseMoveEvent);
        }

        // Fire mouse move events here if forceMouseMove is on.
        if (forceMouseMove && this._iCollidingObject)
            this.queueDispatch(this._mouseMove, this._mouseMoveEvent);

        var event;
        var dispatcher;

        // Dispatch all queued events.
        var len = this._queuedEvents.length;
        for (var i = 0; i < len; ++i) {
            // Only dispatch from first implicitly enabled object ( one that is not a child of a mouseChildren = false hierarchy ).
            event = this._queuedEvents[i];
            dispatcher = event.object;

            while (dispatcher && !dispatcher._iIsMouseEnabled())
                dispatcher = dispatcher.parent;

            if (dispatcher)
                dispatcher.dispatchEvent(event);
        }

        this._queuedEvents.length = 0;

        this._previousCollidingObject = this._iCollidingObject;

        this._iUpdateDirty = false;
    };

    //		public addViewLayer(view:View)
    //		{
    //			var stg:Stage = view.stage;
    //
    //			// Add instance to mouse3dmanager to fire mouse events for multiple views
    //			if (!view.stageGL.mouse3DManager)
    //				view.stageGL.mouse3DManager = this;
    //
    //			if (!hasKey(view))
    //				_view3Ds[view] = 0;
    //
    //			_childDepth = 0;
    //			traverseDisplayObjects(stg);
    //			_viewCount = _childDepth;
    //		}
    MouseManager.prototype.registerView = function (view) {
        view.htmlElement.addEventListener("click", this.onClickDelegate);
        view.htmlElement.addEventListener("dblclick", this.onDoubleClickDelegate);
        view.htmlElement.addEventListener("mousedown", this.onMouseDownDelegate);
        view.htmlElement.addEventListener("mousemove", this.onMouseMoveDelegate);
        view.htmlElement.addEventListener("mouseup", this.onMouseUpDelegate);
        view.htmlElement.addEventListener("mousewheel", this.onMouseWheelDelegate);
        view.htmlElement.addEventListener("mouseover", this.onMouseOverDelegate);
        view.htmlElement.addEventListener("mouseout", this.onMouseOutDelegate);

        this._viewLookup.push(view);
    };

    MouseManager.prototype.unregisterView = function (view) {
        view.htmlElement.removeEventListener("click", this.onClickDelegate);
        view.htmlElement.removeEventListener("dblclick", this.onDoubleClickDelegate);
        view.htmlElement.removeEventListener("mousedown", this.onMouseDownDelegate);
        view.htmlElement.removeEventListener("mousemove", this.onMouseMoveDelegate);
        view.htmlElement.removeEventListener("mouseup", this.onMouseUpDelegate);
        view.htmlElement.removeEventListener("mousewheel", this.onMouseWheelDelegate);
        view.htmlElement.removeEventListener("mouseover", this.onMouseOverDelegate);
        view.htmlElement.removeEventListener("mouseout", this.onMouseOutDelegate);

        this._viewLookup.slice(this._viewLookup.indexOf(view), 1);
    };

    // ---------------------------------------------------------------------
    // Private.
    // ---------------------------------------------------------------------
    MouseManager.prototype.queueDispatch = function (event, sourceEvent, collider) {
        if (typeof collider === "undefined") { collider = null; }
        // 2D properties.
        if (sourceEvent) {
            event.ctrlKey = sourceEvent.ctrlKey;
            event.altKey = sourceEvent.altKey;
            event.shiftKey = sourceEvent.shiftKey;
            event.screenX = sourceEvent.clientX;
            event.screenY = sourceEvent.clientY;
        }

        if (collider == null)
            collider = this._iCollidingObject;

        // 3D properties.
        if (collider) {
            // Object.
            event.object = collider.displayObject;
            event.materialOwner = collider.materialOwner;

            // UV.
            event.uv = collider.uv;

            // Position.
            event.localPosition = collider.localPosition ? collider.localPosition.clone() : null;

            // Normal.
            event.localNormal = collider.localNormal ? collider.localNormal.clone() : null;

            // Face index.
            event.index = collider.index;
        } else {
            // Set all to null.
            event.uv = null;
            event.object = null;
            event.localPosition = this._nullVector;
            event.localNormal = this._nullVector;
            event.index = 0;
            event.subGeometryIndex = 0;
        }

        // Store event to be dispatched later.
        this._queuedEvents.push(event);
    };

    // ---------------------------------------------------------------------
    // Listeners.
    // ---------------------------------------------------------------------
    MouseManager.prototype.onMouseMove = function (event) {
        this.updateColliders(event);

        if (this._iCollidingObject)
            this.queueDispatch(this._mouseMove, this._mouseMoveEvent = event);
    };

    MouseManager.prototype.onMouseOut = function (event) {
        this._iActiveDiv = null;

        this.updateColliders(event);

        if (this._iCollidingObject)
            this.queueDispatch(this._mouseOut, event);
    };

    MouseManager.prototype.onMouseOver = function (event) {
        this._iActiveDiv = event.target;

        this.updateColliders(event);

        if (this._iCollidingObject)
            this.queueDispatch(this._mouseOver, event);
    };

    MouseManager.prototype.onClick = function (event) {
        this.updateColliders(event);

        if (this._iCollidingObject)
            this.queueDispatch(this._mouseClick, event);
    };

    MouseManager.prototype.onDoubleClick = function (event) {
        this.updateColliders(event);

        if (this._iCollidingObject)
            this.queueDispatch(this._mouseDoubleClick, event);
    };

    MouseManager.prototype.onMouseDown = function (event) {
        this._iActiveDiv = event.target;

        this.updateColliders(event);

        if (this._iCollidingObject)
            this.queueDispatch(this._mouseDown, event);
    };

    MouseManager.prototype.onMouseUp = function (event) {
        this.updateColliders(event);

        if (this._iCollidingObject)
            this.queueDispatch(this._mouseUp, event);
    };

    MouseManager.prototype.onMouseWheel = function (event) {
        this.updateColliders(event);

        if (this._iCollidingObject)
            this.queueDispatch(this._mouseWheel, event);
    };

    MouseManager.prototype.updateColliders = function (event) {
        if (this._iUpdateDirty)
            return;

        var view;
        var bounds;
        var mouseX = event.clientX;
        var mouseY = event.clientY;
        var len = this._viewLookup.length;
        for (var i = 0; i < len; i++) {
            view = this._viewLookup[i];
            bounds = view.htmlElement.getBoundingClientRect();
            if (mouseX < bounds.left || mouseX > bounds.right || mouseY < bounds.top || mouseY > bounds.bottom) {
                view._pMouseX = null;
                view._pMouseY = null;
            } else {
                view._pMouseX = mouseX + bounds.left;
                view._pMouseY = mouseY + bounds.top;
                view.updateCollider();

                if (view.layeredView && this._iCollidingObject)
                    break;
            }
        }

        this._iUpdateDirty = true;
    };
    return MouseManager;
})();

module.exports = MouseManager;

//# sourceMappingURL=data:application/json;base64,