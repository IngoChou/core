var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var NullBounds = require("awayjs-core/lib/bounds/NullBounds");
var DisplayObjectContainer = require("awayjs-core/lib/containers/DisplayObjectContainer");
var Matrix3D = require("awayjs-core/lib/core/geom/Matrix3D");
var Plane3D = require("awayjs-core/lib/core/geom/Plane3D");

var AssetType = require("awayjs-core/lib/core/library/AssetType");
var CameraNode = require("awayjs-core/lib/core/partition/CameraNode");

var CameraEvent = require("awayjs-core/lib/events/CameraEvent");
var ProjectionEvent = require("awayjs-core/lib/events/ProjectionEvent");

var PerspectiveProjection = require("awayjs-core/lib/projections/PerspectiveProjection");

var Camera = (function (_super) {
    __extends(Camera, _super);
    function Camera(projection) {
        if (typeof projection === "undefined") { projection = null; }
        var _this = this;
        _super.call(this);
        this._viewProjection = new Matrix3D();
        this._viewProjectionDirty = true;
        this._frustumPlanesDirty = true;

        this._pIsEntity = true;

        this._onProjectionMatrixChangedDelegate = function (event) {
            return _this.onProjectionMatrixChanged(event);
        };

        this._projection = projection || new PerspectiveProjection();
        this._projection.addEventListener(ProjectionEvent.MATRIX_CHANGED, this._onProjectionMatrixChangedDelegate);

        this._frustumPlanes = [];

        for (var i = 0; i < 6; ++i)
            this._frustumPlanes[i] = new Plane3D();

        this.z = -1000;
    }
    Camera.prototype.pCreateDefaultBoundingVolume = function () {
        return new NullBounds();
    };

    /**
    * @protected
    */
    Camera.prototype.pCreateEntityPartitionNode = function () {
        return new CameraNode(this);
    };

    Object.defineProperty(Camera.prototype, "assetType", {
        //@override
        get: function () {
            return AssetType.CAMERA;
        },
        enumerable: true,
        configurable: true
    });

    Camera.prototype.onProjectionMatrixChanged = function (event) {
        this._viewProjectionDirty = true;
        this._frustumPlanesDirty = true;
        this.dispatchEvent(event);
    };

    Object.defineProperty(Camera.prototype, "frustumPlanes", {
        get: function () {
            if (this._frustumPlanesDirty)
                this.updateFrustum();

            return this._frustumPlanes;
        },
        enumerable: true,
        configurable: true
    });

    Camera.prototype.updateFrustum = function () {
        var a, b, c;

        //var d : Number;
        var c11, c12, c13, c14;
        var c21, c22, c23, c24;
        var c31, c32, c33, c34;
        var c41, c42, c43, c44;
        var p;
        var raw = new Array(16);
        ;
        var invLen;
        this.viewProjection.copyRawDataTo(raw);

        c11 = raw[0];
        c12 = raw[4];
        c13 = raw[8];
        c14 = raw[12];
        c21 = raw[1];
        c22 = raw[5];
        c23 = raw[9];
        c24 = raw[13];
        c31 = raw[2];
        c32 = raw[6];
        c33 = raw[10];
        c34 = raw[14];
        c41 = raw[3];
        c42 = raw[7];
        c43 = raw[11];
        c44 = raw[15];

        // left plane
        p = this._frustumPlanes[0];
        a = c41 + c11;
        b = c42 + c12;
        c = c43 + c13;
        invLen = 1 / Math.sqrt(a * a + b * b + c * c);
        p.a = a * invLen;
        p.b = b * invLen;
        p.c = c * invLen;
        p.d = -(c44 + c14) * invLen;

        // right plane
        p = this._frustumPlanes[1];
        a = c41 - c11;
        b = c42 - c12;
        c = c43 - c13;
        invLen = 1 / Math.sqrt(a * a + b * b + c * c);
        p.a = a * invLen;
        p.b = b * invLen;
        p.c = c * invLen;
        p.d = (c14 - c44) * invLen;

        // bottom
        p = this._frustumPlanes[2];
        a = c41 + c21;
        b = c42 + c22;
        c = c43 + c23;
        invLen = 1 / Math.sqrt(a * a + b * b + c * c);
        p.a = a * invLen;
        p.b = b * invLen;
        p.c = c * invLen;
        p.d = -(c44 + c24) * invLen;

        // top
        p = this._frustumPlanes[3];
        a = c41 - c21;
        b = c42 - c22;
        c = c43 - c23;
        invLen = 1 / Math.sqrt(a * a + b * b + c * c);
        p.a = a * invLen;
        p.b = b * invLen;
        p.c = c * invLen;
        p.d = (c24 - c44) * invLen;

        // near
        p = this._frustumPlanes[4];
        a = c31;
        b = c32;
        c = c33;
        invLen = 1 / Math.sqrt(a * a + b * b + c * c);
        p.a = a * invLen;
        p.b = b * invLen;
        p.c = c * invLen;
        p.d = -c34 * invLen;

        // far
        p = this._frustumPlanes[5];
        a = c41 - c31;
        b = c42 - c32;
        c = c43 - c33;
        invLen = 1 / Math.sqrt(a * a + b * b + c * c);
        p.a = a * invLen;
        p.b = b * invLen;
        p.c = c * invLen;
        p.d = (c34 - c44) * invLen;

        this._frustumPlanesDirty = false;
    };

    /**
    * @protected
    */
    Camera.prototype.pInvalidateSceneTransform = function () {
        _super.prototype.pInvalidateSceneTransform.call(this);

        this._viewProjectionDirty = true;
        this._frustumPlanesDirty = true;
    };

    /**
    * @protected
    */
    Camera.prototype.pUpdateBounds = function () {
        this._pBoundsInvalid = false;
        this._pBounds.nullify();
    };

    Object.defineProperty(Camera.prototype, "projection", {
        /**
        *
        */
        get: function () {
            return this._projection;
        },
        set: function (value) {
            if (this._projection == value)
                return;

            if (!value)
                throw new Error("Projection cannot be null!");

            this._projection.removeEventListener(ProjectionEvent.MATRIX_CHANGED, this._onProjectionMatrixChangedDelegate);
            this._projection = value;
            this._projection.addEventListener(ProjectionEvent.MATRIX_CHANGED, this._onProjectionMatrixChangedDelegate);
            this.dispatchEvent(new CameraEvent(CameraEvent.PROJECTION_CHANGED, this));
        },
        enumerable: true,
        configurable: true
    });


    Object.defineProperty(Camera.prototype, "viewProjection", {
        /**
        *
        */
        get: function () {
            if (this._viewProjectionDirty) {
                this._viewProjection.copyFrom(this.inverseSceneTransform);
                this._viewProjection.append(this._projection.matrix);
                this._viewProjectionDirty = false;
            }

            return this._viewProjection;
        },
        enumerable: true,
        configurable: true
    });

    /**
    * Calculates the ray in scene space from the camera to the given normalized coordinates in screen space.
    *
    * @param nX The normalised x coordinate in screen space, -1 corresponds to the left edge of the viewport, 1 to the right.
    * @param nY The normalised y coordinate in screen space, -1 corresponds to the top edge of the viewport, 1 to the bottom.
    * @param sZ The z coordinate in screen space, representing the distance into the screen.
    * @return The ray from the camera to the scene space position of the given screen coordinates.
    */
    Camera.prototype.getRay = function (nX, nY, sZ) {
        return this.sceneTransform.deltaTransformVector(this._projection.unproject(nX, nY, sZ));
    };

    /**
    * Calculates the normalised position in screen space of the given scene position.
    *
    * @param point3d the position vector of the scene coordinates to be projected.
    * @return The normalised screen position of the given scene coordinates.
    */
    Camera.prototype.project = function (point3d) {
        return this._projection.project(this.inverseSceneTransform.transformVector(point3d));
    };

    /**
    * Calculates the scene position of the given normalized coordinates in screen space.
    *
    * @param nX The normalised x coordinate in screen space, minus the originX offset of the projection property.
    * @param nY The normalised y coordinate in screen space, minus the originY offset of the projection property.
    * @param sZ The z coordinate in screen space, representing the distance into the screen.
    * @return The scene position of the given screen coordinates.
    */
    Camera.prototype.unproject = function (nX, nY, sZ) {
        return this.sceneTransform.transformVector(this._projection.unproject(nX, nY, sZ));
    };

    Camera.prototype._iCollectRenderables = function (renderer) {
        // Since this getter is invoked every iteration of the render loop, and
        // the prefab construct could affect the sub-meshes, the prefab is
        // validated here to give it a chance to rebuild.
        if (this._iSourcePrefab)
            this._iSourcePrefab._iValidate();

        this._iCollectRenderable(renderer);
    };

    Camera.prototype._iCollectRenderable = function (renderer) {
        //nothing to do here
    };
    return Camera;
})(DisplayObjectContainer);

module.exports = Camera;

//# sourceMappingURL=data:application/json;base64,