var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var NullBounds = require("awayjs-core/lib/bounds/NullBounds");
var LightBase = require("awayjs-core/lib/core/base/LightBase");
var Matrix3D = require("awayjs-core/lib/core/geom/Matrix3D");
var Vector3D = require("awayjs-core/lib/core/geom/Vector3D");
var DirectionalLightNode = require("awayjs-core/lib/core/partition/DirectionalLightNode");

var DirectionalShadowMapper = require("awayjs-core/lib/materials/shadowmappers/DirectionalShadowMapper");

var DirectionalLight = (function (_super) {
    __extends(DirectionalLight, _super);
    function DirectionalLight(xDir, yDir, zDir) {
        if (typeof xDir === "undefined") { xDir = 0; }
        if (typeof yDir === "undefined") { yDir = -1; }
        if (typeof zDir === "undefined") { zDir = 1; }
        _super.call(this);

        this._pIsEntity = true;

        this.direction = new Vector3D(xDir, yDir, zDir);

        this._sceneDirection = new Vector3D();
    }
    Object.defineProperty(DirectionalLight.prototype, "sceneDirection", {
        get: function () {
            if (this._pSceneTransformDirty)
                this.pUpdateSceneTransform();

            return this._sceneDirection;
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(DirectionalLight.prototype, "direction", {
        get: function () {
            return this._direction;
        },
        set: function (value) {
            this._direction = value;

            if (!this._tmpLookAt)
                this._tmpLookAt = new Vector3D();

            this._tmpLookAt.x = this.x + this._direction.x;
            this._tmpLookAt.y = this.y + this._direction.y;
            this._tmpLookAt.z = this.z + this._direction.z;

            this.lookAt(this._tmpLookAt);
        },
        enumerable: true,
        configurable: true
    });


    /**
    *
    * @returns {away.bounds.NullBounds}
    */
    DirectionalLight.prototype.pCreateDefaultBoundingVolume = function () {
        //directional lights are to be considered global, hence always in view
        return new NullBounds();
    };

    /**
    *
    */
    DirectionalLight.prototype.pUpdateBounds = function () {
    };

    //@override
    DirectionalLight.prototype.pUpdateSceneTransform = function () {
        _super.prototype.pUpdateSceneTransform.call(this);
        this.sceneTransform.copyColumnTo(2, this._sceneDirection);
        this._sceneDirection.normalize();
    };

    //@override
    DirectionalLight.prototype.pCreateShadowMapper = function () {
        return new DirectionalShadowMapper();
    };

    /**
    * @protected
    */
    DirectionalLight.prototype.pCreateEntityPartitionNode = function () {
        return new DirectionalLightNode(this);
    };

    //override
    DirectionalLight.prototype.iGetObjectProjectionMatrix = function (entity, camera, target) {
        if (typeof target === "undefined") { target = null; }
        var raw = new Array();
        var bounds = entity.bounds;
        var m = new Matrix3D();

        m.copyFrom(entity.getRenderSceneTransform(camera));
        m.append(this.inverseSceneTransform);

        if (!this._projAABBPoints)
            this._projAABBPoints = [];

        m.transformVectors(bounds.aabbPoints, this._projAABBPoints);

        var xMin = Infinity, xMax = -Infinity;
        var yMin = Infinity, yMax = -Infinity;
        var zMin = Infinity, zMax = -Infinity;
        var d;
        for (var i = 0; i < 24;) {
            d = this._projAABBPoints[i++];

            if (d < xMin)
                xMin = d;

            if (d > xMax)
                xMax = d;

            d = this._projAABBPoints[i++];

            if (d < yMin)
                yMin = d;

            if (d > yMax)
                yMax = d;

            d = this._projAABBPoints[i++];

            if (d < zMin)
                zMin = d;

            if (d > zMax)
                zMax = d;
        }

        var invXRange = 1 / (xMax - xMin);
        var invYRange = 1 / (yMax - yMin);
        var invZRange = 1 / (zMax - zMin);
        raw[0] = 2 * invXRange;
        raw[5] = 2 * invYRange;
        raw[10] = invZRange;
        raw[12] = -(xMax + xMin) * invXRange;
        raw[13] = -(yMax + yMin) * invYRange;
        raw[14] = -zMin * invZRange;
        raw[1] = raw[2] = raw[3] = raw[4] = raw[6] = raw[7] = raw[8] = raw[9] = raw[11] = 0;
        raw[15] = 1;

        if (!target)
            target = new Matrix3D();

        target.copyRawDataFrom(raw);
        target.prepend(m);

        return target;
    };

    DirectionalLight.prototype._iCollectRenderables = function (renderer) {
        //nothing to do here
    };
    return DirectionalLight;
})(LightBase);

module.exports = DirectionalLight;

//# sourceMappingURL=data:application/json;base64,