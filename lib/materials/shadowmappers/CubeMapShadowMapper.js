var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Camera = require("awayjs-core/lib/entities/Camera");

var PartialImplementationError = require("awayjs-core/lib/errors/PartialImplementationError");
var ShadowMapperBase = require("awayjs-core/lib/materials/shadowmappers/ShadowMapperBase");

var CubeMapShadowMapper = (function (_super) {
    __extends(CubeMapShadowMapper, _super);
    function CubeMapShadowMapper() {
        _super.call(this);

        this._pDepthMapSize = 512;
        this._needsRender = new Array();
        this.initCameras();
    }
    CubeMapShadowMapper.prototype.initCameras = function () {
        this._depthCameras = new Array();
        this._projections = new Array();

        // posX, negX, posY, negY, posZ, negZ
        this.addCamera(0, 90, 0);
        this.addCamera(0, -90, 0);
        this.addCamera(-90, 0, 0);
        this.addCamera(90, 0, 0);
        this.addCamera(0, 0, 0);
        this.addCamera(0, 180, 0);
    };

    CubeMapShadowMapper.prototype.addCamera = function (rotationX, rotationY, rotationZ) {
        var cam = new Camera();
        cam.rotationX = rotationX;
        cam.rotationY = rotationY;
        cam.rotationZ = rotationZ;
        cam.projection.near = .01;

        var projection = cam.projection;
        projection.fieldOfView = 90;
        this._projections.push(projection);
        cam.projection._iAspectRatio = 1;
        this._depthCameras.push(cam);
    };

    //@override
    CubeMapShadowMapper.prototype.pCreateDepthTexture = function () {
        throw new PartialImplementationError();
        /*
        return new RenderCubeTexture( this._depthMapSize );
        */
    };

    //@override
    CubeMapShadowMapper.prototype.pUpdateDepthProjection = function (viewCamera) {
        var light = (this._pLight);
        var maxDistance = light._pFallOff;
        var pos = this._pLight.scenePosition;

        for (var i = 0; i < 6; ++i) {
            this._projections[i].far = maxDistance;
            this._depthCameras[i].transform.position = pos;
            this._needsRender[i] = true;
        }
    };

    //@override
    CubeMapShadowMapper.prototype.pDrawDepthMap = function (target, scene, renderer) {
        for (var i = 0; i < 6; ++i) {
            if (this._needsRender[i]) {
                this._pCasterCollector.camera = this._depthCameras[i];
                this._pCasterCollector.clear();
                scene.traversePartitions(this._pCasterCollector);
                renderer._iRender(this._pCasterCollector, target, null, i);
            }
        }
    };
    return CubeMapShadowMapper;
})(ShadowMapperBase);

module.exports = CubeMapShadowMapper;

//# sourceMappingURL=data:application/json;base64,