var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var SubGeometryBase = require("awayjs-core/lib/data/SubGeometryBase");
var TriangleSubGeometry = require("awayjs-core/lib/data/TriangleSubGeometry");
var SubGeometryEvent = require("awayjs-core/lib/events/SubGeometryEvent");
/**
 * @class LineSubGeometry
 */
var LineSubGeometry = (function (_super) {
    __extends(LineSubGeometry, _super);
    /**
     *
     */
    function LineSubGeometry() {
        _super.call(this, true);
        this._positionsDirty = true;
        this._boundingPositionDirty = true;
        this._thicknessDirty = true;
        this._colorsDirty = true;
    }
    Object.defineProperty(LineSubGeometry.prototype, "assetType", {
        /**
         *
         * @returns {string}
         */
        get: function () {
            return LineSubGeometry.assetType;
        },
        enumerable: true,
        configurable: true
    });
    LineSubGeometry.prototype._pUpdateStrideOffset = function () {
        this._pOffset[LineSubGeometry.VERTEX_DATA] = 0;
        var stride = 0;
        this._pOffset[LineSubGeometry.START_POSITION_DATA] = stride;
        stride += 3;
        this._pOffset[LineSubGeometry.END_POSITION_DATA] = stride;
        stride += 3;
        this._pOffset[LineSubGeometry.THICKNESS_DATA] = stride;
        stride += 1;
        this._pOffset[LineSubGeometry.COLOR_DATA] = stride;
        stride += 4;
        this._pStride[LineSubGeometry.VERTEX_DATA] = stride;
        this._pStride[LineSubGeometry.START_POSITION_DATA] = stride;
        this._pStride[LineSubGeometry.END_POSITION_DATA] = stride;
        this._pStride[LineSubGeometry.THICKNESS_DATA] = stride;
        this._pStride[LineSubGeometry.COLOR_DATA] = stride;
        var len = this._pNumVertices * stride;
        if (this._pVertices == null)
            this._pVertices = new Array(len);
        else if (this._pVertices.length != len)
            this._pVertices.length = len;
        this._pStrideOffsetDirty = false;
    };
    Object.defineProperty(LineSubGeometry.prototype, "vertices", {
        /**
         *
         */
        get: function () {
            if (this._positionsDirty)
                this.updatePositions(this._startPositions, this._endPositions);
            if (this._thicknessDirty)
                this.updateThickness(this._thickness);
            if (this._colorsDirty)
                this.updateColors(this._startColors, this._endColors);
            return this._pVertices;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSubGeometry.prototype, "startPositions", {
        /**
         *
         */
        get: function () {
            if (this._positionsDirty)
                this.updatePositions(this._startPositions, this._endPositions);
            return this._startPositions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSubGeometry.prototype, "endPositions", {
        /**
         *
         */
        get: function () {
            if (this._positionsDirty)
                this.updatePositions(this._startPositions, this._endPositions);
            return this._endPositions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSubGeometry.prototype, "thickness", {
        /**
         *
         */
        get: function () {
            if (this._thicknessDirty)
                this.updateThickness(this._thickness);
            return this._thickness;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSubGeometry.prototype, "startColors", {
        /**
         *
         */
        get: function () {
            if (this._colorsDirty)
                this.updateColors(this._startColors, this._endColors);
            return this._startColors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSubGeometry.prototype, "endColors", {
        /**
         *
         */
        get: function () {
            if (this._colorsDirty)
                this.updateColors(this._startColors, this._endColors);
            return this._endColors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSubGeometry.prototype, "numSegments", {
        /**
         * The total amount of segments in the TriangleSubGeometry.
         */
        get: function () {
            return this._numSegments;
        },
        enumerable: true,
        configurable: true
    });
    LineSubGeometry.prototype.getBoundingPositions = function () {
        if (this._boundingPositionDirty)
            this._boundingPositions = this.startPositions.concat(this.endPositions);
        return this._boundingPositions;
    };
    /**
     *
     */
    LineSubGeometry.prototype.updatePositions = function (startValues, endValues) {
        var i;
        var j;
        var values;
        var index;
        var stride;
        var positions;
        var indices;
        this._startPositions = startValues;
        if (this._startPositions == null)
            this._startPositions = new Array();
        this._endPositions = endValues;
        if (this._endPositions == null)
            this._endPositions = new Array();
        this._boundingPositionDirty = true;
        this._numSegments = this._startPositions.length / 3;
        this._pNumVertices = this._numSegments * 4;
        var lenV = this._pNumVertices * this.getStride(LineSubGeometry.VERTEX_DATA);
        if (this._pVertices == null)
            this._pVertices = new Array(lenV);
        else if (this._pVertices.length != lenV)
            this._pVertices.length = lenV;
        i = 0;
        j = 0;
        index = this.getOffset(LineSubGeometry.START_POSITION_DATA);
        stride = this.getStride(LineSubGeometry.START_POSITION_DATA);
        positions = this._pVertices;
        indices = new Array();
        while (i < startValues.length) {
            values = (index / stride & 1) ? endValues : startValues;
            positions[index] = values[i];
            positions[index + 1] = values[i + 1];
            positions[index + 2] = values[i + 2];
            values = (index / stride & 1) ? startValues : endValues;
            positions[index + 3] = values[i];
            positions[index + 4] = values[i + 1];
            positions[index + 5] = values[i + 2];
            if (++j == 4) {
                var o = index / stride - 3;
                indices.push(o, o + 1, o + 2, o + 3, o + 2, o + 1);
                j = 0;
                i += 3;
            }
            index += stride;
        }
        this.updateIndices(indices);
        this.pInvalidateBounds();
        this.notifyPositionsUpdate();
        this._positionsDirty = false;
    };
    /**
     * Updates the thickness.
     */
    LineSubGeometry.prototype.updateThickness = function (values) {
        var i;
        var j;
        var index;
        var offset;
        var stride;
        var thickness;
        this._thickness = values;
        if (values != null) {
            i = 0;
            j = 0;
            offset = this.getOffset(LineSubGeometry.THICKNESS_DATA);
            stride = this.getStride(LineSubGeometry.THICKNESS_DATA);
            thickness = this._pVertices;
            index = offset;
            while (i < values.length) {
                thickness[index] = (Math.floor(0.5 * (index - offset) / stride + 0.5) & 1) ? -values[i] : values[i];
                if (++j == 4) {
                    j = 0;
                    i++;
                }
                index += stride;
            }
        }
        this.notifyThicknessUpdate();
        this._thicknessDirty = false;
    };
    /**
     *
     */
    LineSubGeometry.prototype.updateColors = function (startValues, endValues) {
        var i;
        var j;
        var values;
        var index;
        var offset;
        var stride;
        var colors;
        this._startColors = startValues;
        this._endColors = endValues;
        //default to white
        if (this._startColors == null) {
            this._startColors = new Array(this._numSegments * 4);
            i = 0;
            while (i < this._startColors.length)
                this._startColors[i++] = 1;
        }
        if (this._endColors == null) {
            this._endColors = new Array(this._numSegments * 4);
            i = 0;
            while (i < this._endColors.length)
                this._endColors[i++] = 1;
        }
        i = 0;
        j = 0;
        offset = this.getOffset(LineSubGeometry.COLOR_DATA);
        stride = this.getStride(LineSubGeometry.COLOR_DATA);
        colors = this._pVertices;
        index = offset;
        while (i < this._startColors.length) {
            values = ((index - offset) / stride & 1) ? this._endColors : this._startColors;
            colors[index] = values[i];
            colors[index + 1] = values[i + 1];
            colors[index + 2] = values[i + 2];
            colors[index + 3] = values[i + 3];
            if (++j == 4) {
                j = 0;
                i += 4;
            }
            index += stride;
        }
        this.notifyColorsUpdate();
        this._colorsDirty = false;
    };
    /**
     *
     */
    LineSubGeometry.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._startPositions = null;
        this._endPositions = null;
        this._thickness = null;
        this._startColors = null;
        this._endColors = null;
    };
    /**
     * @protected
     */
    LineSubGeometry.prototype.pInvalidateBounds = function () {
        if (this.parentGeometry)
            this.parentGeometry.iInvalidateBounds(this);
    };
    /**
     * Clones the current object
     * @return An exact duplicate of the current object.
     */
    LineSubGeometry.prototype.clone = function () {
        var clone = new LineSubGeometry();
        clone.updateIndices(this._pIndices.concat());
        clone.updatePositions(this._startPositions.concat(), this._endPositions.concat());
        clone.updateThickness(this._thickness.concat());
        clone.updatePositions(this._startPositions.concat(), this._endPositions.concat());
        return clone;
    };
    LineSubGeometry.prototype._pNotifyVerticesUpdate = function () {
        this._pStrideOffsetDirty = true;
        this.notifyPositionsUpdate();
        this.notifyThicknessUpdate();
        this.notifyColorsUpdate();
    };
    LineSubGeometry.prototype.notifyPositionsUpdate = function () {
        if (this._positionsDirty)
            return;
        this._positionsDirty = true;
        if (!this._positionsUpdated)
            this._positionsUpdated = new SubGeometryEvent(SubGeometryEvent.VERTICES_UPDATED, TriangleSubGeometry.POSITION_DATA);
        this.dispatchEvent(this._positionsUpdated);
    };
    LineSubGeometry.prototype.notifyThicknessUpdate = function () {
        if (this._thicknessDirty)
            return;
        this._thicknessDirty = true;
        if (!this._thicknessUpdated)
            this._thicknessUpdated = new SubGeometryEvent(SubGeometryEvent.VERTICES_UPDATED, LineSubGeometry.THICKNESS_DATA);
        this.dispatchEvent(this._thicknessUpdated);
    };
    LineSubGeometry.prototype.notifyColorsUpdate = function () {
        if (this._colorsDirty)
            return;
        this._colorsDirty = true;
        if (!this._colorUpdated)
            this._colorUpdated = new SubGeometryEvent(SubGeometryEvent.VERTICES_UPDATED, LineSubGeometry.COLOR_DATA);
        this.dispatchEvent(this._colorUpdated);
    };
    LineSubGeometry.assetType = "[asset LineSubGeometry]";
    LineSubGeometry.VERTEX_DATA = "vertices";
    LineSubGeometry.START_POSITION_DATA = "startPositions";
    LineSubGeometry.END_POSITION_DATA = "endPositions";
    LineSubGeometry.THICKNESS_DATA = "thickness";
    LineSubGeometry.COLOR_DATA = "colors";
    //TODO - move these to StageGL
    LineSubGeometry.POSITION_FORMAT = "float3";
    LineSubGeometry.COLOR_FORMAT = "float4";
    LineSubGeometry.THICKNESS_FORMAT = "float1";
    return LineSubGeometry;
})(SubGeometryBase);
module.exports = LineSubGeometry;

//# sourceMappingURL=data:application/json;base64,