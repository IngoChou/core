var Sphere = (function () {
    /**
     * Create a Sphere with ABCD coefficients
     */
    function Sphere(x, y, z, radius) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (z === void 0) { z = 0; }
        if (radius === void 0) { radius = 0; }
        this.x = x;
        this.y = y;
        this.z = z;
        this.radius = radius;
    }
    Sphere.prototype.rayIntersection = function (position, direction, targetNormal) {
        if (this.containsPoint(position))
            return 0;
        var px = position.x - this.x, py = position.y - this.y, pz = position.z - this.z;
        var vx = direction.x, vy = direction.y, vz = direction.z;
        var rayEntryDistance;
        var a = vx * vx + vy * vy + vz * vz;
        var b = 2 * (px * vx + py * vy + pz * vz);
        var c = px * px + py * py + pz * pz - this.radius * this.radius;
        var det = b * b - 4 * a * c;
        if (det >= 0) {
            var sqrtDet = Math.sqrt(det);
            rayEntryDistance = (-b - sqrtDet) / (2 * a);
            if (rayEntryDistance >= 0) {
                targetNormal.x = px + rayEntryDistance * vx;
                targetNormal.y = py + rayEntryDistance * vy;
                targetNormal.z = pz + rayEntryDistance * vz;
                targetNormal.normalize();
                return rayEntryDistance;
            }
        }
        // ray misses sphere
        return -1;
    };
    Sphere.prototype.containsPoint = function (position) {
        var px = position.x - this.x;
        var py = position.y - this.y;
        var pz = position.z - this.z;
        var distance = Math.sqrt(px * px + py * py + pz * pz);
        return distance <= this.radius;
    };
    Sphere.prototype.toString = function () {
        return "Sphere [x:" + this.x + ", y:" + this.y + ", z:" + this.z + ", radius:" + this.radius + "]";
    };
    return Sphere;
})();
module.exports = Sphere;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi9nZW9tL3NwaGVyZS50cyJdLCJuYW1lcyI6WyJTcGhlcmUiLCJTcGhlcmUuY29uc3RydWN0b3IiLCJTcGhlcmUucmF5SW50ZXJzZWN0aW9uIiwiU3BoZXJlLmNvbnRhaW5zUG9pbnQiLCJTcGhlcmUudG9TdHJpbmciXSwibWFwcGluZ3MiOiJBQUdBLElBQU0sTUFBTTtJQXNCWEE7O09BRUdBO0lBQ0hBLFNBekJLQSxNQUFNQSxDQXlCQ0EsQ0FBWUEsRUFBRUEsQ0FBWUEsRUFBRUEsQ0FBWUEsRUFBRUEsTUFBaUJBO1FBQTNEQyxpQkFBWUEsR0FBWkEsS0FBWUE7UUFBRUEsaUJBQVlBLEdBQVpBLEtBQVlBO1FBQUVBLGlCQUFZQSxHQUFaQSxLQUFZQTtRQUFFQSxzQkFBaUJBLEdBQWpCQSxVQUFpQkE7UUFFdEVBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ1hBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ1hBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ1hBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBO0lBRXRCQSxDQUFDQTtJQUVNRCxnQ0FBZUEsR0FBdEJBLFVBQXVCQSxRQUFpQkEsRUFBRUEsU0FBa0JBLEVBQUVBLFlBQXFCQTtRQUVsRkUsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFDaENBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1FBRVZBLElBQUlBLEVBQUVBLEdBQVVBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEVBQUVBLEVBQUVBLEdBQVVBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEVBQUVBLEVBQUVBLEdBQVVBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RHQSxJQUFJQSxFQUFFQSxHQUFVQSxTQUFTQSxDQUFDQSxDQUFDQSxFQUFFQSxFQUFFQSxHQUFVQSxTQUFTQSxDQUFDQSxDQUFDQSxFQUFFQSxFQUFFQSxHQUFVQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM5RUEsSUFBSUEsZ0JBQXVCQSxDQUFDQTtRQUU1QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsRUFBRUEsR0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBQ0EsRUFBRUEsQ0FBQ0E7UUFDckNBLElBQUlBLENBQUNBLEdBQVVBLENBQUNBLEdBQUNBLENBQUVBLEVBQUVBLEdBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUNBLEVBQUVBLENBQUVBLENBQUNBO1FBQzNDQSxJQUFJQSxDQUFDQSxHQUFVQSxFQUFFQSxHQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFDQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUMvREEsSUFBSUEsR0FBR0EsR0FBVUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFN0JBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2RBLElBQUlBLE9BQU9BLEdBQVVBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3BDQSxnQkFBZ0JBLEdBQUdBLENBQUVBLENBQUNBLENBQUNBLEdBQUdBLE9BQU9BLENBQUVBLEdBQUNBLENBQUVBLENBQUNBLEdBQUNBLENBQUNBLENBQUVBLENBQUNBO1lBQzVDQSxFQUFFQSxDQUFDQSxDQUFDQSxnQkFBZ0JBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUMzQkEsWUFBWUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsZ0JBQWdCQSxHQUFDQSxFQUFFQSxDQUFDQTtnQkFDMUNBLFlBQVlBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUdBLGdCQUFnQkEsR0FBQ0EsRUFBRUEsQ0FBQ0E7Z0JBQzFDQSxZQUFZQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFHQSxnQkFBZ0JBLEdBQUNBLEVBQUVBLENBQUNBO2dCQUMxQ0EsWUFBWUEsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0E7Z0JBRXpCQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLENBQUNBO1lBQ3pCQSxDQUFDQTtRQUNGQSxDQUFDQTtRQUVEQSxBQUNBQSxvQkFEb0JBO1FBQ3BCQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNYQSxDQUFDQTtJQUVNRiw4QkFBYUEsR0FBcEJBLFVBQXFCQSxRQUFpQkE7UUFFckNHLElBQUlBLEVBQUVBLEdBQVVBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1FBQ3BDQSxJQUFJQSxFQUFFQSxHQUFVQSxRQUFRQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNwQ0EsSUFBSUEsRUFBRUEsR0FBVUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDcENBLElBQUlBLFFBQVFBLEdBQVVBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLEdBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBQ3ZEQSxNQUFNQSxDQUFDQSxRQUFRQSxJQUFJQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtJQUNoQ0EsQ0FBQ0E7SUFFTUgseUJBQVFBLEdBQWZBO1FBRUNJLE1BQU1BLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLEdBQUdBLENBQUNBO0lBQ3BHQSxDQUFDQTtJQUNGSixhQUFDQTtBQUFEQSxDQTlFQSxBQThFQ0EsSUFBQTtBQUVELEFBQWdCLGlCQUFQLE1BQU0sQ0FBQyIsImZpbGUiOiJnZW9tL1NwaGVyZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGxhbmVDbGFzc2lmaWNhdGlvblx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vUGxhbmVDbGFzc2lmaWNhdGlvblwiKTtcbmltcG9ydCBWZWN0b3IzRFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vVmVjdG9yM0RcIik7XG5cbmNsYXNzIFNwaGVyZVxue1xuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyB4Om51bWJlcjtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyB5Om51bWJlcjtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyB6Om51bWJlcjtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyByYWRpdXM6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGUgYSBTcGhlcmUgd2l0aCBBQkNEIGNvZWZmaWNpZW50c1xuXHQgKi9cblx0Y29uc3RydWN0b3IoeDpudW1iZXIgPSAwLCB5Om51bWJlciA9IDAsIHo6bnVtYmVyID0gMCwgcmFkaXVzOm51bWJlciA9IDApXG5cdHtcblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblxuXHR9XG5cblx0cHVibGljIHJheUludGVyc2VjdGlvbihwb3NpdGlvbjpWZWN0b3IzRCwgZGlyZWN0aW9uOlZlY3RvcjNELCB0YXJnZXROb3JtYWw6VmVjdG9yM0QpOm51bWJlclxuXHR7XG5cdFx0aWYgKHRoaXMuY29udGFpbnNQb2ludChwb3NpdGlvbikpXG5cdFx0XHRyZXR1cm4gMDtcblxuXHRcdHZhciBweDpudW1iZXIgPSBwb3NpdGlvbi54IC0gdGhpcy54LCBweTpudW1iZXIgPSBwb3NpdGlvbi55IC0gdGhpcy55LCBwejpudW1iZXIgPSBwb3NpdGlvbi56IC0gdGhpcy56O1xuXHRcdHZhciB2eDpudW1iZXIgPSBkaXJlY3Rpb24ueCwgdnk6bnVtYmVyID0gZGlyZWN0aW9uLnksIHZ6Om51bWJlciA9IGRpcmVjdGlvbi56O1xuXHRcdHZhciByYXlFbnRyeURpc3RhbmNlOm51bWJlcjtcblxuXHRcdHZhciBhOm51bWJlciA9IHZ4KnZ4ICsgdnkqdnkgKyB2eip2ejtcblx0XHR2YXIgYjpudW1iZXIgPSAyKiggcHgqdnggKyBweSp2eSArIHB6KnZ6ICk7XG5cdFx0dmFyIGM6bnVtYmVyID0gcHgqcHggKyBweSpweSArIHB6KnB6IC0gdGhpcy5yYWRpdXMqdGhpcy5yYWRpdXM7XG5cdFx0dmFyIGRldDpudW1iZXIgPSBiKmIgLSA0KmEqYztcblxuXHRcdGlmIChkZXQgPj0gMCkgeyAvLyByYXkgZ29lcyB0aHJvdWdoIHNwaGVyZVxuXHRcdFx0dmFyIHNxcnREZXQ6bnVtYmVyID0gTWF0aC5zcXJ0KGRldCk7XG5cdFx0XHRyYXlFbnRyeURpc3RhbmNlID0gKCAtYiAtIHNxcnREZXQgKS8oIDIqYSApO1xuXHRcdFx0aWYgKHJheUVudHJ5RGlzdGFuY2UgPj0gMCkge1xuXHRcdFx0XHR0YXJnZXROb3JtYWwueCA9IHB4ICsgcmF5RW50cnlEaXN0YW5jZSp2eDtcblx0XHRcdFx0dGFyZ2V0Tm9ybWFsLnkgPSBweSArIHJheUVudHJ5RGlzdGFuY2Uqdnk7XG5cdFx0XHRcdHRhcmdldE5vcm1hbC56ID0gcHogKyByYXlFbnRyeURpc3RhbmNlKnZ6O1xuXHRcdFx0XHR0YXJnZXROb3JtYWwubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0cmV0dXJuIHJheUVudHJ5RGlzdGFuY2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gcmF5IG1pc3NlcyBzcGhlcmVcblx0XHRyZXR1cm4gLTE7XG5cdH1cblxuXHRwdWJsaWMgY29udGFpbnNQb2ludChwb3NpdGlvbjpWZWN0b3IzRCk6Ym9vbGVhblxuXHR7XG5cdFx0dmFyIHB4Om51bWJlciA9IHBvc2l0aW9uLnggLSB0aGlzLng7XG5cdFx0dmFyIHB5Om51bWJlciA9IHBvc2l0aW9uLnkgLSB0aGlzLnk7XG5cdFx0dmFyIHB6Om51bWJlciA9IHBvc2l0aW9uLnogLSB0aGlzLno7XG5cdFx0dmFyIGRpc3RhbmNlOm51bWJlciA9IE1hdGguc3FydChweCpweCArIHB5KnB5ICsgcHoqcHopO1xuXHRcdHJldHVybiBkaXN0YW5jZSA8PSB0aGlzLnJhZGl1cztcblx0fVxuXG5cdHB1YmxpYyB0b1N0cmluZygpOnN0cmluZ1xuXHR7XG5cdFx0cmV0dXJuIFwiU3BoZXJlIFt4OlwiICsgdGhpcy54ICsgXCIsIHk6XCIgKyB0aGlzLnkgKyBcIiwgejpcIiArIHRoaXMueiArIFwiLCByYWRpdXM6XCIgKyB0aGlzLnJhZGl1cyArIFwiXVwiO1xuXHR9XG59XG5cbmV4cG9ydCA9IFNwaGVyZTsiXX0=