var Sphere = (function () {
    /**
     * Create a Sphere with ABCD coefficients
     */
    function Sphere(x, y, z, radius) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (z === void 0) { z = 0; }
        if (radius === void 0) { radius = 0; }
        this.x = x;
        this.y = y;
        this.z = z;
        this.radius = radius;
    }
    Sphere.prototype.rayIntersection = function (position, direction, targetNormal) {
        if (this.containsPoint(position))
            return 0;
        var px = position.x - this.x, py = position.y - this.y, pz = position.z - this.z;
        var vx = direction.x, vy = direction.y, vz = direction.z;
        var rayEntryDistance;
        var a = vx * vx + vy * vy + vz * vz;
        var b = 2 * (px * vx + py * vy + pz * vz);
        var c = px * px + py * py + pz * pz - this.radius * this.radius;
        var det = b * b - 4 * a * c;
        if (det >= 0) {
            var sqrtDet = Math.sqrt(det);
            rayEntryDistance = (-b - sqrtDet) / (2 * a);
            if (rayEntryDistance >= 0) {
                targetNormal.x = px + rayEntryDistance * vx;
                targetNormal.y = py + rayEntryDistance * vy;
                targetNormal.z = pz + rayEntryDistance * vz;
                targetNormal.normalize();
                return rayEntryDistance;
            }
        }
        // ray misses sphere
        return -1;
    };
    Sphere.prototype.containsPoint = function (position) {
        var px = position.x - this.x;
        var py = position.y - this.y;
        var pz = position.z - this.z;
        var distance = Math.sqrt(px * px + py * py + pz * pz);
        return distance <= this.radius;
    };
    Sphere.prototype.toString = function () {
        return "Sphere [x:" + this.x + ", y:" + this.y + ", z:" + this.z + ", radius:" + this.radius + "]";
    };
    return Sphere;
})();
module.exports = Sphere;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi9nZW9tL1NwaGVyZS50cyJdLCJuYW1lcyI6WyJTcGhlcmUiLCJTcGhlcmUuY29uc3RydWN0b3IiLCJTcGhlcmUucmF5SW50ZXJzZWN0aW9uIiwiU3BoZXJlLmNvbnRhaW5zUG9pbnQiLCJTcGhlcmUudG9TdHJpbmciXSwibWFwcGluZ3MiOiJBQUdBLElBQU0sTUFBTTtJQXNCWEE7O09BRUdBO0lBQ0hBLFNBekJLQSxNQUFNQSxDQXlCQ0EsQ0FBWUEsRUFBRUEsQ0FBWUEsRUFBRUEsQ0FBWUEsRUFBRUEsTUFBaUJBO1FBQTNEQyxpQkFBWUEsR0FBWkEsS0FBWUE7UUFBRUEsaUJBQVlBLEdBQVpBLEtBQVlBO1FBQUVBLGlCQUFZQSxHQUFaQSxLQUFZQTtRQUFFQSxzQkFBaUJBLEdBQWpCQSxVQUFpQkE7UUFFdEVBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ1hBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ1hBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ1hBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBO0lBRXRCQSxDQUFDQTtJQUVNRCxnQ0FBZUEsR0FBdEJBLFVBQXVCQSxRQUFpQkEsRUFBRUEsU0FBa0JBLEVBQUVBLFlBQXFCQTtRQUVsRkUsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFDaENBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1FBRVZBLElBQUlBLEVBQUVBLEdBQVVBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEVBQUVBLEVBQUVBLEdBQVVBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEVBQUVBLEVBQUVBLEdBQVVBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RHQSxJQUFJQSxFQUFFQSxHQUFVQSxTQUFTQSxDQUFDQSxDQUFDQSxFQUFFQSxFQUFFQSxHQUFVQSxTQUFTQSxDQUFDQSxDQUFDQSxFQUFFQSxFQUFFQSxHQUFVQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM5RUEsSUFBSUEsZ0JBQXVCQSxDQUFDQTtRQUU1QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsRUFBRUEsR0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBQ0EsRUFBRUEsQ0FBQ0E7UUFDckNBLElBQUlBLENBQUNBLEdBQVVBLENBQUNBLEdBQUNBLENBQUVBLEVBQUVBLEdBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUNBLEVBQUVBLENBQUVBLENBQUNBO1FBQzNDQSxJQUFJQSxDQUFDQSxHQUFVQSxFQUFFQSxHQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFDQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUMvREEsSUFBSUEsR0FBR0EsR0FBVUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFN0JBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2RBLElBQUlBLE9BQU9BLEdBQVVBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3BDQSxnQkFBZ0JBLEdBQUdBLENBQUVBLENBQUNBLENBQUNBLEdBQUdBLE9BQU9BLENBQUVBLEdBQUNBLENBQUVBLENBQUNBLEdBQUNBLENBQUNBLENBQUVBLENBQUNBO1lBQzVDQSxFQUFFQSxDQUFDQSxDQUFDQSxnQkFBZ0JBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUMzQkEsWUFBWUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsZ0JBQWdCQSxHQUFDQSxFQUFFQSxDQUFDQTtnQkFDMUNBLFlBQVlBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUdBLGdCQUFnQkEsR0FBQ0EsRUFBRUEsQ0FBQ0E7Z0JBQzFDQSxZQUFZQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFHQSxnQkFBZ0JBLEdBQUNBLEVBQUVBLENBQUNBO2dCQUMxQ0EsWUFBWUEsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0E7Z0JBRXpCQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLENBQUNBO1lBQ3pCQSxDQUFDQTtRQUNGQSxDQUFDQTtRQUVEQSxBQUNBQSxvQkFEb0JBO1FBQ3BCQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNYQSxDQUFDQTtJQUVNRiw4QkFBYUEsR0FBcEJBLFVBQXFCQSxRQUFpQkE7UUFFckNHLElBQUlBLEVBQUVBLEdBQVVBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1FBQ3BDQSxJQUFJQSxFQUFFQSxHQUFVQSxRQUFRQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNwQ0EsSUFBSUEsRUFBRUEsR0FBVUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDcENBLElBQUlBLFFBQVFBLEdBQVVBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLEdBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBQ3ZEQSxNQUFNQSxDQUFDQSxRQUFRQSxJQUFJQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtJQUNoQ0EsQ0FBQ0E7SUFFTUgseUJBQVFBLEdBQWZBO1FBRUNJLE1BQU1BLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLEdBQUdBLENBQUNBO0lBQ3BHQSxDQUFDQTtJQUNGSixhQUFDQTtBQUFEQSxDQTlFQSxBQThFQ0EsSUFBQTtBQUVELEFBQWdCLGlCQUFQLE1BQU0sQ0FBQyIsImZpbGUiOiJnZW9tL1NwaGVyZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGxhbmVDbGFzc2lmaWNhdGlvblx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vUGxhbmVDbGFzc2lmaWNhdGlvblwiKTtcclxuaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9WZWN0b3IzRFwiKTtcclxuXHJcbmNsYXNzIFNwaGVyZVxyXG57XHJcblx0LyoqXHJcblx0ICpcclxuXHQgKi9cclxuXHRwdWJsaWMgeDpudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0cHVibGljIHk6bnVtYmVyO1xyXG5cclxuXHQvKipcclxuXHQgKlxyXG5cdCAqL1xyXG5cdHB1YmxpYyB6Om51bWJlcjtcclxuXHJcblx0LyoqXHJcblx0ICpcclxuXHQgKi9cclxuXHRwdWJsaWMgcmFkaXVzOm51bWJlcjtcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlIGEgU3BoZXJlIHdpdGggQUJDRCBjb2VmZmljaWVudHNcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcih4Om51bWJlciA9IDAsIHk6bnVtYmVyID0gMCwgejpudW1iZXIgPSAwLCByYWRpdXM6bnVtYmVyID0gMClcclxuXHR7XHJcblx0XHR0aGlzLnggPSB4O1xyXG5cdFx0dGhpcy55ID0geTtcclxuXHRcdHRoaXMueiA9IHo7XHJcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuXHJcblx0fVxyXG5cclxuXHRwdWJsaWMgcmF5SW50ZXJzZWN0aW9uKHBvc2l0aW9uOlZlY3RvcjNELCBkaXJlY3Rpb246VmVjdG9yM0QsIHRhcmdldE5vcm1hbDpWZWN0b3IzRCk6bnVtYmVyXHJcblx0e1xyXG5cdFx0aWYgKHRoaXMuY29udGFpbnNQb2ludChwb3NpdGlvbikpXHJcblx0XHRcdHJldHVybiAwO1xyXG5cclxuXHRcdHZhciBweDpudW1iZXIgPSBwb3NpdGlvbi54IC0gdGhpcy54LCBweTpudW1iZXIgPSBwb3NpdGlvbi55IC0gdGhpcy55LCBwejpudW1iZXIgPSBwb3NpdGlvbi56IC0gdGhpcy56O1xyXG5cdFx0dmFyIHZ4Om51bWJlciA9IGRpcmVjdGlvbi54LCB2eTpudW1iZXIgPSBkaXJlY3Rpb24ueSwgdno6bnVtYmVyID0gZGlyZWN0aW9uLno7XHJcblx0XHR2YXIgcmF5RW50cnlEaXN0YW5jZTpudW1iZXI7XHJcblxyXG5cdFx0dmFyIGE6bnVtYmVyID0gdngqdnggKyB2eSp2eSArIHZ6KnZ6O1xyXG5cdFx0dmFyIGI6bnVtYmVyID0gMiooIHB4KnZ4ICsgcHkqdnkgKyBweip2eiApO1xyXG5cdFx0dmFyIGM6bnVtYmVyID0gcHgqcHggKyBweSpweSArIHB6KnB6IC0gdGhpcy5yYWRpdXMqdGhpcy5yYWRpdXM7XHJcblx0XHR2YXIgZGV0Om51bWJlciA9IGIqYiAtIDQqYSpjO1xyXG5cclxuXHRcdGlmIChkZXQgPj0gMCkgeyAvLyByYXkgZ29lcyB0aHJvdWdoIHNwaGVyZVxyXG5cdFx0XHR2YXIgc3FydERldDpudW1iZXIgPSBNYXRoLnNxcnQoZGV0KTtcclxuXHRcdFx0cmF5RW50cnlEaXN0YW5jZSA9ICggLWIgLSBzcXJ0RGV0ICkvKCAyKmEgKTtcclxuXHRcdFx0aWYgKHJheUVudHJ5RGlzdGFuY2UgPj0gMCkge1xyXG5cdFx0XHRcdHRhcmdldE5vcm1hbC54ID0gcHggKyByYXlFbnRyeURpc3RhbmNlKnZ4O1xyXG5cdFx0XHRcdHRhcmdldE5vcm1hbC55ID0gcHkgKyByYXlFbnRyeURpc3RhbmNlKnZ5O1xyXG5cdFx0XHRcdHRhcmdldE5vcm1hbC56ID0gcHogKyByYXlFbnRyeURpc3RhbmNlKnZ6O1xyXG5cdFx0XHRcdHRhcmdldE5vcm1hbC5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHJheUVudHJ5RGlzdGFuY2U7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyByYXkgbWlzc2VzIHNwaGVyZVxyXG5cdFx0cmV0dXJuIC0xO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGNvbnRhaW5zUG9pbnQocG9zaXRpb246VmVjdG9yM0QpOmJvb2xlYW5cclxuXHR7XHJcblx0XHR2YXIgcHg6bnVtYmVyID0gcG9zaXRpb24ueCAtIHRoaXMueDtcclxuXHRcdHZhciBweTpudW1iZXIgPSBwb3NpdGlvbi55IC0gdGhpcy55O1xyXG5cdFx0dmFyIHB6Om51bWJlciA9IHBvc2l0aW9uLnogLSB0aGlzLno7XHJcblx0XHR2YXIgZGlzdGFuY2U6bnVtYmVyID0gTWF0aC5zcXJ0KHB4KnB4ICsgcHkqcHkgKyBweipweik7XHJcblx0XHRyZXR1cm4gZGlzdGFuY2UgPD0gdGhpcy5yYWRpdXM7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgdG9TdHJpbmcoKTpzdHJpbmdcclxuXHR7XHJcblx0XHRyZXR1cm4gXCJTcGhlcmUgW3g6XCIgKyB0aGlzLnggKyBcIiwgeTpcIiArIHRoaXMueSArIFwiLCB6OlwiICsgdGhpcy56ICsgXCIsIHJhZGl1czpcIiArIHRoaXMucmFkaXVzICsgXCJdXCI7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBTcGhlcmU7Il19