var Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
/**
 * away.geom.Matrix3DUtils provides additional Matrix3D functions.
 */
var Matrix3DUtils = (function () {
    function Matrix3DUtils() {
    }
    /**
     * Fills the 3d matrix object with values representing the transformation made by the given quaternion.
     *
     * @param    quarternion    The quarterion object to convert.
     */
    Matrix3DUtils.quaternion2matrix = function (quarternion, m) {
        if (m === void 0) { m = null; }
        var x = quarternion.x;
        var y = quarternion.y;
        var z = quarternion.z;
        var w = quarternion.w;
        var xx = x * x;
        var xy = x * y;
        var xz = x * z;
        var xw = x * w;
        var yy = y * y;
        var yz = y * z;
        var yw = y * w;
        var zz = z * z;
        var zw = z * w;
        var raw = Matrix3DUtils.RAW_DATA_CONTAINER;
        raw[0] = 1 - 2 * (yy + zz);
        raw[1] = 2 * (xy + zw);
        raw[2] = 2 * (xz - yw);
        raw[4] = 2 * (xy - zw);
        raw[5] = 1 - 2 * (xx + zz);
        raw[6] = 2 * (yz + xw);
        raw[8] = 2 * (xz + yw);
        raw[9] = 2 * (yz - xw);
        raw[10] = 1 - 2 * (xx + yy);
        raw[3] = raw[7] = raw[11] = raw[12] = raw[13] = raw[14] = 0;
        raw[15] = 1;
        if (m) {
            m.copyRawDataFrom(raw);
            return m;
        }
        else
            return new Matrix3D(raw);
    };
    /**
     * Returns a normalised <code>Vector3D</code> object representing the forward vector of the given matrix.
     * @param    m        The Matrix3D object to use to get the forward vector
     * @param    v        [optional] A vector holder to prevent make new Vector3D instance if already exists. Default is null.
     * @return            The forward vector
     */
    Matrix3DUtils.getForward = function (m, v) {
        if (v === void 0) { v = null; }
        //v ||= new Vector3D(0.0, 0.0, 0.0);
        if (v === null) {
            v = new Vector3D(0.0, 0.0, 0.0);
        }
        m.copyColumnTo(2, v);
        v.normalize();
        return v;
    };
    /**
     * Returns a normalised <code>Vector3D</code> object representing the up vector of the given matrix.
     * @param    m        The Matrix3D object to use to get the up vector
     * @param    v        [optional] A vector holder to prevent make new Vector3D instance if already exists. Default is null.
     * @return            The up vector
     */
    Matrix3DUtils.getUp = function (m, v) {
        //v ||= new Vector3D(0.0, 0.0, 0.0);
        if (v === void 0) { v = null; }
        if (v === null) {
            v = new Vector3D(0.0, 0.0, 0.0);
        }
        m.copyColumnTo(1, v);
        v.normalize();
        return v;
    };
    /**
     * Returns a normalised <code>Vector3D</code> object representing the right vector of the given matrix.
     * @param    m        The Matrix3D object to use to get the right vector
     * @param    v        [optional] A vector holder to prevent make new Vector3D instance if already exists. Default is null.
     * @return            The right vector
     */
    Matrix3DUtils.getRight = function (m, v) {
        if (v === void 0) { v = null; }
        //v ||= new Vector3D(0.0, 0.0, 0.0);
        if (v === null) {
            v = new Vector3D(0.0, 0.0, 0.0);
        }
        m.copyColumnTo(0, v);
        v.normalize();
        return v;
    };
    /**
     * Returns a boolean value representing whether there is any significant difference between the two given 3d matrices.
     */
    Matrix3DUtils.compare = function (m1, m2) {
        var r1 = Matrix3DUtils.RAW_DATA_CONTAINER;
        var r2 = m2.rawData;
        m1.copyRawDataTo(r1);
        for (var i = 0; i < 16; ++i) {
            if (r1[i] != r2[i])
                return false;
        }
        return true;
    };
    Matrix3DUtils.lookAt = function (matrix, pos, dir, up) {
        var dirN;
        var upN;
        var lftN;
        var raw = Matrix3DUtils.RAW_DATA_CONTAINER;
        lftN = dir.crossProduct(up);
        lftN.normalize();
        upN = lftN.crossProduct(dir);
        upN.normalize();
        dirN = dir.clone();
        dirN.normalize();
        raw[0] = lftN.x;
        raw[1] = upN.x;
        raw[2] = -dirN.x;
        raw[3] = 0.0;
        raw[4] = lftN.y;
        raw[5] = upN.y;
        raw[6] = -dirN.y;
        raw[7] = 0.0;
        raw[8] = lftN.z;
        raw[9] = upN.z;
        raw[10] = -dirN.z;
        raw[11] = 0.0;
        raw[12] = -lftN.dotProduct(pos);
        raw[13] = -upN.dotProduct(pos);
        raw[14] = dirN.dotProduct(pos);
        raw[15] = 1.0;
        matrix.copyRawDataFrom(raw);
    };
    Matrix3DUtils.reflection = function (plane, target) {
        if (target === void 0) { target = null; }
        if (target === null)
            target = new Matrix3D();
        var a = plane.a, b = plane.b, c = plane.c, d = plane.d;
        var rawData = Matrix3DUtils.RAW_DATA_CONTAINER;
        var ab2 = -2 * a * b;
        var ac2 = -2 * a * c;
        var bc2 = -2 * b * c;
        // reflection matrix
        rawData[0] = 1 - 2 * a * a;
        rawData[4] = ab2;
        rawData[8] = ac2;
        rawData[12] = -2 * a * d;
        rawData[1] = ab2;
        rawData[5] = 1 - 2 * b * b;
        rawData[9] = bc2;
        rawData[13] = -2 * b * d;
        rawData[2] = ac2;
        rawData[6] = bc2;
        rawData[10] = 1 - 2 * c * c;
        rawData[14] = -2 * c * d;
        rawData[3] = 0;
        rawData[7] = 0;
        rawData[11] = 0;
        rawData[15] = 1;
        target.copyRawDataFrom(rawData);
        return target;
    };
    Matrix3DUtils.transformVector = function (matrix, vector, result) {
        if (result === void 0) { result = null; }
        if (!result)
            result = new Vector3D();
        var raw = Matrix3DUtils.RAW_DATA_CONTAINER;
        matrix.copyRawDataTo(raw);
        var a = raw[0];
        var e = raw[1];
        var i = raw[2];
        var m = raw[3];
        var b = raw[4];
        var f = raw[5];
        var j = raw[6];
        var n = raw[7];
        var c = raw[8];
        var g = raw[9];
        var k = raw[10];
        var o = raw[11];
        var d = raw[12];
        var h = raw[13];
        var l = raw[14];
        var p = raw[15];
        var x = vector.x;
        var y = vector.y;
        var z = vector.z;
        result.x = a * x + b * y + c * z + d;
        result.y = e * x + f * y + g * z + h;
        result.z = i * x + j * y + k * z + l;
        result.w = m * x + n * y + o * z + p;
        return result;
    };
    Matrix3DUtils.deltaTransformVector = function (matrix, vector, result) {
        if (result === void 0) { result = null; }
        if (!result)
            result = new Vector3D();
        var raw = Matrix3DUtils.RAW_DATA_CONTAINER;
        matrix.copyRawDataTo(raw);
        var a = raw[0];
        var e = raw[1];
        var i = raw[2];
        var m = raw[3];
        var b = raw[4];
        var f = raw[5];
        var j = raw[6];
        var n = raw[7];
        var c = raw[8];
        var g = raw[9];
        var k = raw[10];
        var o = raw[11];
        var x = vector.x;
        var y = vector.y;
        var z = vector.z;
        result.x = a * x + b * y + c * z;
        result.y = e * x + f * y + g * z;
        result.z = i * x + j * y + k * z;
        result.w = m * x + n * y + o * z;
        return result;
    };
    Matrix3DUtils.getTranslation = function (transform, result) {
        if (result === void 0) { result = null; }
        if (!result)
            result = new Vector3D();
        transform.copyColumnTo(3, result);
        return result;
    };
    Matrix3DUtils.deltaTransformVectors = function (matrix, vin, vout) {
        var raw = Matrix3DUtils.RAW_DATA_CONTAINER;
        matrix.copyRawDataTo(raw);
        var a = raw[0];
        var e = raw[1];
        var i = raw[2];
        var m = raw[3];
        var b = raw[4];
        var f = raw[5];
        var j = raw[6];
        var n = raw[7];
        var c = raw[8];
        var g = raw[9];
        var k = raw[10];
        var o = raw[11];
        var outIndex = 0;
        var length = vin.length;
        for (var index = 0; index < length; index += 3) {
            var x = vin[index];
            var y = vin[index + 1];
            var z = vin[index + 2];
            vout[outIndex++] = a * x + b * y + c * z;
            vout[outIndex++] = e * x + f * y + g * z;
            vout[outIndex++] = i * x + j * y + k * z;
        }
    };
    /**
     * A reference to a Vector to be used as a temporary raw data container, to prevent object creation.
     */
    Matrix3DUtils.RAW_DATA_CONTAINER = new Array(16);
    //public static RAW_DATA_CONTAINER:number[] = new Array<number>(16);
    Matrix3DUtils.CALCULATION_MATRIX = new Matrix3D();
    return Matrix3DUtils;
})();
module.exports = Matrix3DUtils;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi9nZW9tL01hdHJpeDNEVXRpbHMudHMiXSwibmFtZXMiOlsiTWF0cml4M0RVdGlscyIsIk1hdHJpeDNEVXRpbHMuY29uc3RydWN0b3IiLCJNYXRyaXgzRFV0aWxzLnF1YXRlcm5pb24ybWF0cml4IiwiTWF0cml4M0RVdGlscy5nZXRGb3J3YXJkIiwiTWF0cml4M0RVdGlscy5nZXRVcCIsIk1hdHJpeDNEVXRpbHMuZ2V0UmlnaHQiLCJNYXRyaXgzRFV0aWxzLmNvbXBhcmUiLCJNYXRyaXgzRFV0aWxzLmxvb2tBdCIsIk1hdHJpeDNEVXRpbHMucmVmbGVjdGlvbiIsIk1hdHJpeDNEVXRpbHMudHJhbnNmb3JtVmVjdG9yIiwiTWF0cml4M0RVdGlscy5kZWx0YVRyYW5zZm9ybVZlY3RvciIsIk1hdHJpeDNEVXRpbHMuZ2V0VHJhbnNsYXRpb24iLCJNYXRyaXgzRFV0aWxzLmRlbHRhVHJhbnNmb3JtVmVjdG9ycyJdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBTyxRQUFRLFdBQWUsK0JBQStCLENBQUMsQ0FBQztBQUUvRCxJQUFPLFFBQVEsV0FBZSwrQkFBK0IsQ0FBQyxDQUFDO0FBRy9ELEFBR0E7O0dBREc7SUFDRyxhQUFhO0lBQW5CQSxTQUFNQSxhQUFhQTtJQWlUbkJDLENBQUNBO0lBdlNBRDs7OztPQUlHQTtJQUNXQSwrQkFBaUJBLEdBQS9CQSxVQUFnQ0EsV0FBc0JBLEVBQUVBLENBQWlCQTtRQUFqQkUsaUJBQWlCQSxHQUFqQkEsUUFBaUJBO1FBRXhFQSxJQUFJQSxDQUFDQSxHQUFVQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM3QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDN0JBLElBQUlBLENBQUNBLEdBQVVBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBO1FBQzdCQSxJQUFJQSxDQUFDQSxHQUFVQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUU3QkEsSUFBSUEsRUFBRUEsR0FBVUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDcEJBLElBQUlBLEVBQUVBLEdBQVVBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBO1FBQ3BCQSxJQUFJQSxFQUFFQSxHQUFVQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQTtRQUNwQkEsSUFBSUEsRUFBRUEsR0FBVUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFcEJBLElBQUlBLEVBQUVBLEdBQVVBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBO1FBQ3BCQSxJQUFJQSxFQUFFQSxHQUFVQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQTtRQUNwQkEsSUFBSUEsRUFBRUEsR0FBVUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFcEJBLElBQUlBLEVBQUVBLEdBQVVBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBO1FBQ3BCQSxJQUFJQSxFQUFFQSxHQUFVQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQTtRQUVwQkEsSUFBSUEsR0FBR0EsR0FBWUEsYUFBYUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQTtRQUNwREEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDekJBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUNBLENBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBO1FBQ3JCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUNyQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDckJBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUNBLENBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBO1FBQ3pCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUNyQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDckJBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUNBLENBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBO1FBQ3JCQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUMxQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDNURBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBRVpBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1BBLENBQUNBLENBQUNBLGVBQWVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3ZCQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNWQSxDQUFDQTtRQUFDQSxJQUFJQTtZQUNMQSxNQUFNQSxDQUFDQSxJQUFJQSxRQUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUMzQkEsQ0FBQ0E7SUFFREY7Ozs7O09BS0dBO0lBQ1dBLHdCQUFVQSxHQUF4QkEsVUFBeUJBLENBQVVBLEVBQUVBLENBQWlCQTtRQUFq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Q0FBQ0EsQ0FBQ0E7UUFDeEJBLElBQUlBLEdBQUdBLEdBQVVBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBO1FBQ3hCQSxJQUFJQSxHQUFHQSxHQUFVQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQTtRQUN4QkEsQUFDQUEsb0JBRG9CQTtRQUNwQkEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdkJBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBO1FBQ2pCQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQTtRQUNqQkEsT0FBT0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDckJBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBO1FBQ2pCQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQTtRQUN2QkEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0E7UUFDakJBLE9BQU9BLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBO1FBQ3JCQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQTtRQUNqQkEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0E7UUFDakJBLE9BQU9BLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBO1FBQ3hCQSxPQUFPQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQTtRQUNyQkEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDZkEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDZkEsT0FBT0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDaEJBLE9BQU9BLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2hCQSxNQUFNQSxDQUFDQSxlQUFlQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUVoQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7SUFDZkEsQ0FBQ0E7SUFHYVIsNkJBQWVBLEdBQTdCQSxVQUE4QkEsTUFBZUEsRUFBRUEsTUFBZUEsRUFBRUEsTUFBc0JBO1FBQXRCUyxzQkFBc0JBLEdBQXRCQSxhQUFzQkE7UUFFckZBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBO1lBQ1hBLE1BQU1BLEdBQUdBLElBQUlBLFFBQVFBLEVBQUVBLENBQUNBO1FBRXpCQSxJQUFJQSxHQUFHQSxHQUFpQkEsYUFBYUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQTtRQUN6REEsTUFBTUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDMUJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUN2QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDdkJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBQ3ZCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUN2QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDdkJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBRXZCQSxJQUFJQSxDQUFDQSxHQUFVQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDeEJBLElBQUlBLENBQUNBLEdBQVVBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1FBQ3hCQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNyQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDckNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3JDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNyQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7SUFDZkEsQ0FBQ0E7SUFFYVQsa0NBQW9CQSxHQUFsQ0EsVUFBbUNBLE1BQWVBLEVBQUVBLE1BQWVBLEVBQUVBLE1BQXNCQTtRQUF0QlUsc0JBQXNCQSxHQUF0QkEsYUFBc0JBO1FBRTFGQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUNYQSxNQUFNQSxHQUFHQSxJQUFJQSxRQUFRQSxFQUFFQSxDQUFDQTtRQUV6QkEsSUFBSUEsR0FBR0EsR0FBaUJBLGFBQWFBLENBQUNBLGtCQUFrQkEsQ0FBQ0E7UUFDekRBLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQzFCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDdkJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBQ3ZCQSxJQUFJQSxDQUFDQSxHQUFVQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDeEJBLElBQUlBLENBQUNBLEdBQVVBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1FBQ3hCQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNqQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDakNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2pDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNqQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7SUFDZkEsQ0FBQ0E7SUFFYVYsNEJBQWNBLEdBQTVCQSxVQUE2QkEsU0FBa0JBLEVBQUVBLE1BQXNCQTtRQUF0Qlcsc0JBQXNCQSxHQUF0QkEsYUFBc0JBO1FBRXRFQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUNWQSxNQUFNQSxHQUFHQSxJQUFJQSxRQUFRQSxFQUFFQSxDQUFDQTtRQUV6QkEsU0FBU0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDbENBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO0lBQ2ZBLENBQUNBO0lBRWFYLG1DQUFxQkEsR0FBbkNBLFVBQW9DQSxNQUFlQSxFQUFFQSxHQUFpQkEsRUFBRUEsSUFBa0JBO1FBRXpGWSxJQUFJQSxHQUFHQSxHQUFpQkEsYUFBYUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQTtRQUN6REEsTUFBTUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDMUJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUN2QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDdkJBLElBQUlBLFFBQVFBLEdBQVVBLENBQUNBLENBQUNBO1FBQ3hCQSxJQUFJQSxNQUFNQSxHQUFVQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUMvQkEsR0FBR0EsQ0FBQUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsR0FBVUEsQ0FBQ0EsRUFBRUEsS0FBS0EsR0FBQ0EsTUFBTUEsRUFBRUEsS0FBS0EsSUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7WUFDbERBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1lBQzFCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxLQUFLQSxHQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM1QkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsS0FBS0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDNUJBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3pDQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDMUNBLENBQUNBO0lBQ0ZBLENBQUNBO0lBOVNEWjs7T0FFR0E7SUFDV0EsZ0NBQWtCQSxHQUFZQSxJQUFJQSxLQUFLQSxDQUFTQSxFQUFFQSxDQUFDQSxDQUFDQTtJQUNsRUEsb0VBQW9FQTtJQUV0REEsZ0NBQWtCQSxHQUFZQSxJQUFJQSxRQUFRQSxFQUFFQSxDQUFDQTtJQXlTNURBLG9CQUFDQTtBQUFEQSxDQWpUQSxBQWlUQ0EsSUFBQTtBQUVELEFBQXVCLGlCQUFkLGFBQWEsQ0FBQyIsImZpbGUiOiJnZW9tL01hdHJpeDNEVXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFF1YXRlcm5pb25cdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1F1YXRlcm5pb25cIik7XHJcbmltcG9ydCBNYXRyaXgzRFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXgzRFwiKTtcclxuaW1wb3J0IFBsYW5lM0RcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vUGxhbmUzRFwiKTtcclxuaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1ZlY3RvcjNEXCIpO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBhd2F5Lmdlb20uTWF0cml4M0RVdGlscyBwcm92aWRlcyBhZGRpdGlvbmFsIE1hdHJpeDNEIGZ1bmN0aW9ucy5cclxuICovXHJcbmNsYXNzIE1hdHJpeDNEVXRpbHNcclxue1xyXG5cdC8qKlxyXG5cdCAqIEEgcmVmZXJlbmNlIHRvIGEgVmVjdG9yIHRvIGJlIHVzZWQgYXMgYSB0ZW1wb3JhcnkgcmF3IGRhdGEgY29udGFpbmVyLCB0byBwcmV2ZW50IG9iamVjdCBjcmVhdGlvbi5cclxuXHQgKi9cclxuXHRwdWJsaWMgc3RhdGljIFJBV19EQVRBX0NPTlRBSU5FUjpudW1iZXJbXSA9IG5ldyBBcnJheTxudW1iZXI+KDE2KTtcclxuXHQvL3B1YmxpYyBzdGF0aWMgUkFXX0RBVEFfQ09OVEFJTkVSOm51bWJlcltdID0gbmV3IEFycmF5PG51bWJlcj4oMTYpO1xyXG5cclxuXHRwdWJsaWMgc3RhdGljIENBTENVTEFUSU9OX01BVFJJWDpNYXRyaXgzRCA9IG5ldyBNYXRyaXgzRCgpO1xyXG5cclxuXHQvKipcclxuXHQgKiBGaWxscyB0aGUgM2QgbWF0cml4IG9iamVjdCB3aXRoIHZhbHVlcyByZXByZXNlbnRpbmcgdGhlIHRyYW5zZm9ybWF0aW9uIG1hZGUgYnkgdGhlIGdpdmVuIHF1YXRlcm5pb24uXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gICAgcXVhcnRlcm5pb24gICAgVGhlIHF1YXJ0ZXJpb24gb2JqZWN0IHRvIGNvbnZlcnQuXHJcblx0ICovXHJcblx0cHVibGljIHN0YXRpYyBxdWF0ZXJuaW9uMm1hdHJpeChxdWFydGVybmlvbjpRdWF0ZXJuaW9uLCBtOk1hdHJpeDNEID0gbnVsbCk6TWF0cml4M0RcclxuXHR7XHJcblx0XHR2YXIgeDpudW1iZXIgPSBxdWFydGVybmlvbi54O1xyXG5cdFx0dmFyIHk6bnVtYmVyID0gcXVhcnRlcm5pb24ueTtcclxuXHRcdHZhciB6Om51bWJlciA9IHF1YXJ0ZXJuaW9uLno7XHJcblx0XHR2YXIgdzpudW1iZXIgPSBxdWFydGVybmlvbi53O1xyXG5cclxuXHRcdHZhciB4eDpudW1iZXIgPSB4Kng7XHJcblx0XHR2YXIgeHk6bnVtYmVyID0geCp5O1xyXG5cdFx0dmFyIHh6Om51bWJlciA9IHgqejtcclxuXHRcdHZhciB4dzpudW1iZXIgPSB4Knc7XHJcblxyXG5cdFx0dmFyIHl5Om51bWJlciA9IHkqeTtcclxuXHRcdHZhciB5ejpudW1iZXIgPSB5Kno7XHJcblx0XHR2YXIgeXc6bnVtYmVyID0geSp3O1xyXG5cclxuXHRcdHZhciB6ejpudW1iZXIgPSB6Kno7XHJcblx0XHR2YXIgenc6bnVtYmVyID0geip3O1xyXG5cclxuXHRcdHZhciByYXc6bnVtYmVyW10gPSBNYXRyaXgzRFV0aWxzLlJBV19EQVRBX0NPTlRBSU5FUjtcclxuXHRcdHJhd1swXSA9IDEgLSAyKih5eSArIHp6KTtcclxuXHRcdHJhd1sxXSA9IDIqKHh5ICsgencpO1xyXG5cdFx0cmF3WzJdID0gMiooeHogLSB5dyk7XHJcblx0XHRyYXdbNF0gPSAyKih4eSAtIHp3KTtcclxuXHRcdHJhd1s1XSA9IDEgLSAyKih4eCArIHp6KTtcclxuXHRcdHJhd1s2XSA9IDIqKHl6ICsgeHcpO1xyXG5cdFx0cmF3WzhdID0gMiooeHogKyB5dyk7XHJcblx0XHRyYXdbOV0gPSAyKih5eiAtIHh3KTtcclxuXHRcdHJhd1sxMF0gPSAxIC0gMiooeHggKyB5eSk7XHJcblx0XHRyYXdbM10gPSByYXdbN10gPSByYXdbMTFdID0gcmF3WzEyXSA9IHJhd1sxM10gPSByYXdbMTRdID0gMDtcclxuXHRcdHJhd1sxNV0gPSAxO1xyXG5cclxuXHRcdGlmIChtKSB7XHJcblx0XHRcdG0uY29weVJhd0RhdGFGcm9tKHJhdyk7XHJcblx0XHRcdHJldHVybiBtO1xyXG5cdFx0fSBlbHNlXHJcblx0XHRcdHJldHVybiBuZXcgTWF0cml4M0QocmF3KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgYSBub3JtYWxpc2VkIDxjb2RlPlZlY3RvcjNEPC9jb2RlPiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBmb3J3YXJkIHZlY3RvciBvZiB0aGUgZ2l2ZW4gbWF0cml4LlxyXG5cdCAqIEBwYXJhbSAgICBtICAgICAgICBUaGUgTWF0cml4M0Qgb2JqZWN0IHRvIHVzZSB0byBnZXQgdGhlIGZvcndhcmQgdmVjdG9yXHJcblx0ICogQHBhcmFtICAgIHYgICAgICAgIFtvcHRpb25hbF0gQSB2ZWN0b3IgaG9sZGVyIHRvIHByZXZlbnQgbWFrZSBuZXcgVmVjdG9yM0QgaW5zdGFuY2UgaWYgYWxyZWFkeSBleGlzdHMuIERlZmF1bHQgaXMgbnVsbC5cclxuXHQgKiBAcmV0dXJuICAgICAgICAgICAgVGhlIGZvcndhcmQgdmVjdG9yXHJcblx0ICovXHJcblx0cHVibGljIHN0YXRpYyBnZXRGb3J3YXJkKG06TWF0cml4M0QsIHY6VmVjdG9yM0QgPSBudWxsKTpWZWN0b3IzRFxyXG5cdHtcclxuXHRcdC8vdiB8fD0gbmV3IFZlY3RvcjNEKDAuMCwgMC4wLCAwLjApO1xyXG5cdFx0aWYgKHYgPT09IG51bGwpIHtcclxuXHJcblx0XHRcdHYgPSBuZXcgVmVjdG9yM0QoMC4wLCAwLjAsIDAuMCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdG0uY29weUNvbHVtblRvKDIsIHYpO1xyXG5cdFx0di5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRyZXR1cm4gdjtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgYSBub3JtYWxpc2VkIDxjb2RlPlZlY3RvcjNEPC9jb2RlPiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSB1cCB2ZWN0b3Igb2YgdGhlIGdpdmVuIG1hdHJpeC5cclxuXHQgKiBAcGFyYW0gICAgbSAgICAgICAgVGhlIE1hdHJpeDNEIG9iamVjdCB0byB1c2UgdG8gZ2V0IHRoZSB1cCB2ZWN0b3JcclxuXHQgKiBAcGFyYW0gICAgdiAgICAgICAgW29wdGlvbmFsXSBBIHZlY3RvciBob2xkZXIgdG8gcHJldmVudCBtYWtlIG5ldyBWZWN0b3IzRCBpbnN0YW5jZSBpZiBhbHJlYWR5IGV4aXN0cy4gRGVmYXVsdCBpcyBudWxsLlxyXG5cdCAqIEByZXR1cm4gICAgICAgICAgICBUaGUgdXAgdmVjdG9yXHJcblx0ICovXHJcblx0cHVibGljIHN0YXRpYyBnZXRVcChtOk1hdHJpeDNELCB2OlZlY3RvcjNEID0gbnVsbCk6VmVjdG9yM0RcclxuXHR7XHJcblx0XHQvL3YgfHw9IG5ldyBWZWN0b3IzRCgwLjAsIDAuMCwgMC4wKTtcclxuXHJcblx0XHRpZiAodiA9PT0gbnVsbCkge1xyXG5cclxuXHRcdFx0diA9IG5ldyBWZWN0b3IzRCgwLjAsIDAuMCwgMC4wKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0bS5jb3B5Q29sdW1uVG8oMSwgdik7XHJcblx0XHR2Lm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdHJldHVybiB2O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmV0dXJucyBhIG5vcm1hbGlzZWQgPGNvZGU+VmVjdG9yM0Q8L2NvZGU+IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHJpZ2h0IHZlY3RvciBvZiB0aGUgZ2l2ZW4gbWF0cml4LlxyXG5cdCAqIEBwYXJhbSAgICBtICAgICAgICBUaGUgTWF0cml4M0Qgb2JqZWN0IHRvIHVzZSB0byBnZXQgdGhlIHJpZ2h0IHZlY3RvclxyXG5cdCAqIEBwYXJhbSAgICB2ICAgICAgICBbb3B0aW9uYWxdIEEgdmVjdG9yIGhvbGRlciB0byBwcmV2ZW50IG1ha2UgbmV3IFZlY3RvcjNEIGluc3RhbmNlIGlmIGFscmVhZHkgZXhpc3RzLiBEZWZhdWx0IGlzIG51bGwuXHJcblx0ICogQHJldHVybiAgICAgICAgICAgIFRoZSByaWdodCB2ZWN0b3JcclxuXHQgKi9cclxuXHRwdWJsaWMgc3RhdGljIGdldFJpZ2h0KG06TWF0cml4M0QsIHY6VmVjdG9yM0QgPSBudWxsKTpWZWN0b3IzRFxyXG5cdHtcclxuXHRcdC8vdiB8fD0gbmV3IFZlY3RvcjNEKDAuMCwgMC4wLCAwLjApO1xyXG5cdFx0aWYgKHYgPT09IG51bGwpIHtcclxuXHJcblx0XHRcdHYgPSBuZXcgVmVjdG9yM0QoMC4wLCAwLjAsIDAuMCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdG0uY29weUNvbHVtblRvKDAsIHYpO1xyXG5cdFx0di5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRyZXR1cm4gdjtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgYSBib29sZWFuIHZhbHVlIHJlcHJlc2VudGluZyB3aGV0aGVyIHRoZXJlIGlzIGFueSBzaWduaWZpY2FudCBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHR3byBnaXZlbiAzZCBtYXRyaWNlcy5cclxuXHQgKi9cclxuXHRwdWJsaWMgc3RhdGljIGNvbXBhcmUobTE6TWF0cml4M0QsIG0yOk1hdHJpeDNEKTpib29sZWFuXHJcblx0e1xyXG5cdFx0dmFyIHIxOm51bWJlcltdID0gTWF0cml4M0RVdGlscy5SQVdfREFUQV9DT05UQUlORVI7XHJcblx0XHR2YXIgcjI6bnVtYmVyW10gPSBtMi5yYXdEYXRhO1xyXG5cdFx0bTEuY29weVJhd0RhdGFUbyhyMSk7XHJcblxyXG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgPSAwOyBpIDwgMTY7ICsraSkge1xyXG5cdFx0XHRpZiAocjFbaV0gIT0gcjJbaV0pXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyBsb29rQXQobWF0cml4Ok1hdHJpeDNELCBwb3M6VmVjdG9yM0QsIGRpcjpWZWN0b3IzRCwgdXA6VmVjdG9yM0QpXHJcblx0e1xyXG5cdFx0dmFyIGRpck46VmVjdG9yM0Q7XHJcblx0XHR2YXIgdXBOOlZlY3RvcjNEO1xyXG5cdFx0dmFyIGxmdE46VmVjdG9yM0Q7XHJcblx0XHR2YXIgcmF3Om51bWJlcltdID0gTWF0cml4M0RVdGlscy5SQVdfREFUQV9DT05UQUlORVI7XHJcblxyXG5cdFx0bGZ0TiA9IGRpci5jcm9zc1Byb2R1Y3QodXApO1xyXG5cdFx0bGZ0Ti5ub3JtYWxpemUoKTtcclxuXHJcblx0XHR1cE4gPSBsZnROLmNyb3NzUHJvZHVjdChkaXIpO1xyXG5cdFx0dXBOLm5vcm1hbGl6ZSgpO1xyXG5cdFx0ZGlyTiA9IGRpci5jbG9uZSgpO1xyXG5cdFx0ZGlyTi5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRyYXdbMF0gPSBsZnROLng7XHJcblx0XHRyYXdbMV0gPSB1cE4ueDtcclxuXHRcdHJhd1syXSA9IC1kaXJOLng7XHJcblx0XHRyYXdbM10gPSAwLjA7XHJcblxyXG5cdFx0cmF3WzRdID0gbGZ0Ti55O1xyXG5cdFx0cmF3WzVdID0gdXBOLnk7XHJcblx0XHRyYXdbNl0gPSAtZGlyTi55O1xyXG5cdFx0cmF3WzddID0gMC4wO1xyXG5cclxuXHRcdHJhd1s4XSA9IGxmdE4uejtcclxuXHRcdHJhd1s5XSA9IHVwTi56O1xyXG5cdFx0cmF3WzEwXSA9IC1kaXJOLno7XHJcblx0XHRyYXdbMTFdID0gMC4wO1xyXG5cclxuXHRcdHJhd1sxMl0gPSAtbGZ0Ti5kb3RQcm9kdWN0KHBvcyk7XHJcblx0XHRyYXdbMTNdID0gLXVwTi5kb3RQcm9kdWN0KHBvcyk7XHJcblx0XHRyYXdbMTRdID0gZGlyTi5kb3RQcm9kdWN0KHBvcyk7XHJcblx0XHRyYXdbMTVdID0gMS4wO1xyXG5cclxuXHRcdG1hdHJpeC5jb3B5UmF3RGF0YUZyb20ocmF3KTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgcmVmbGVjdGlvbihwbGFuZTpQbGFuZTNELCB0YXJnZXQ6TWF0cml4M0QgPSBudWxsKTpNYXRyaXgzRFxyXG5cdHtcclxuXHRcdGlmICh0YXJnZXQgPT09IG51bGwpXHJcblx0XHRcdHRhcmdldCA9IG5ldyBNYXRyaXgzRCgpO1xyXG5cclxuXHRcdHZhciBhOm51bWJlciA9IHBsYW5lLmEsIGI6bnVtYmVyID0gcGxhbmUuYiwgYzpudW1iZXIgPSBwbGFuZS5jLCBkOm51bWJlciA9IHBsYW5lLmQ7XHJcblx0XHR2YXIgcmF3RGF0YTpudW1iZXJbXSA9IE1hdHJpeDNEVXRpbHMuUkFXX0RBVEFfQ09OVEFJTkVSO1xyXG5cdFx0dmFyIGFiMjpudW1iZXIgPSAtMiphKmI7XHJcblx0XHR2YXIgYWMyOm51bWJlciA9IC0yKmEqYztcclxuXHRcdHZhciBiYzI6bnVtYmVyID0gLTIqYipjO1xyXG5cdFx0Ly8gcmVmbGVjdGlvbiBtYXRyaXhcclxuXHRcdHJhd0RhdGFbMF0gPSAxIC0gMiphKmE7XHJcblx0XHRyYXdEYXRhWzRdID0gYWIyO1xyXG5cdFx0cmF3RGF0YVs4XSA9IGFjMjtcclxuXHRcdHJhd0RhdGFbMTJdID0gLTIqYSpkO1xyXG5cdFx0cmF3RGF0YVsxXSA9IGFiMjtcclxuXHRcdHJhd0RhdGFbNV0gPSAxIC0gMipiKmI7XHJcblx0XHRyYXdEYXRhWzldID0gYmMyO1xyXG5cdFx0cmF3RGF0YVsxM10gPSAtMipiKmQ7XHJcblx0XHRyYXdEYXRhWzJdID0gYWMyO1xyXG5cdFx0cmF3RGF0YVs2XSA9IGJjMjtcclxuXHRcdHJhd0RhdGFbMTBdID0gMSAtIDIqYypjO1xyXG5cdFx0cmF3RGF0YVsxNF0gPSAtMipjKmQ7XHJcblx0XHRyYXdEYXRhWzNdID0gMDtcclxuXHRcdHJhd0RhdGFbN10gPSAwO1xyXG5cdFx0cmF3RGF0YVsxMV0gPSAwO1xyXG5cdFx0cmF3RGF0YVsxNV0gPSAxO1xyXG5cdFx0dGFyZ2V0LmNvcHlSYXdEYXRhRnJvbShyYXdEYXRhKTtcclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0O1xyXG5cdH1cclxuXHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgdHJhbnNmb3JtVmVjdG9yKG1hdHJpeDpNYXRyaXgzRCwgdmVjdG9yOlZlY3RvcjNELCByZXN1bHQ6VmVjdG9yM0QgPSBudWxsKTpWZWN0b3IzRFxyXG5cdHtcclxuXHRcdGlmICghcmVzdWx0KVxyXG5cdFx0XHRyZXN1bHQgPSBuZXcgVmVjdG9yM0QoKTtcclxuXHJcblx0XHR2YXIgcmF3OkFycmF5PG51bWJlcj4gPSBNYXRyaXgzRFV0aWxzLlJBV19EQVRBX0NPTlRBSU5FUjtcclxuXHRcdG1hdHJpeC5jb3B5UmF3RGF0YVRvKHJhdyk7XHJcblx0XHR2YXIgYTpudW1iZXIgPSByYXdbMF07XHJcblx0XHR2YXIgZTpudW1iZXIgPSByYXdbMV07XHJcblx0XHR2YXIgaTpudW1iZXIgPSByYXdbMl07XHJcblx0XHR2YXIgbTpudW1iZXIgPSByYXdbM107XHJcblx0XHR2YXIgYjpudW1iZXIgPSByYXdbNF07XHJcblx0XHR2YXIgZjpudW1iZXIgPSByYXdbNV07XHJcblx0XHR2YXIgajpudW1iZXIgPSByYXdbNl07XHJcblx0XHR2YXIgbjpudW1iZXIgPSByYXdbN107XHJcblx0XHR2YXIgYzpudW1iZXIgPSByYXdbOF07XHJcblx0XHR2YXIgZzpudW1iZXIgPSByYXdbOV07XHJcblx0XHR2YXIgazpudW1iZXIgPSByYXdbMTBdO1xyXG5cdFx0dmFyIG86bnVtYmVyID0gcmF3WzExXTtcclxuXHRcdHZhciBkOm51bWJlciA9IHJhd1sxMl07XHJcblx0XHR2YXIgaDpudW1iZXIgPSByYXdbMTNdO1xyXG5cdFx0dmFyIGw6bnVtYmVyID0gcmF3WzE0XTtcclxuXHRcdHZhciBwOm51bWJlciA9IHJhd1sxNV07XHJcblxyXG5cdFx0dmFyIHg6bnVtYmVyID0gdmVjdG9yLng7XHJcblx0XHR2YXIgeTpudW1iZXIgPSB2ZWN0b3IueTtcclxuXHRcdHZhciB6Om51bWJlciA9IHZlY3Rvci56O1xyXG5cdFx0cmVzdWx0LnggPSBhICogeCArIGIgKiB5ICsgYyAqIHogKyBkO1xyXG5cdFx0cmVzdWx0LnkgPSBlICogeCArIGYgKiB5ICsgZyAqIHogKyBoO1xyXG5cdFx0cmVzdWx0LnogPSBpICogeCArIGogKiB5ICsgayAqIHogKyBsO1xyXG5cdFx0cmVzdWx0LncgPSBtICogeCArIG4gKiB5ICsgbyAqIHogKyBwO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgZGVsdGFUcmFuc2Zvcm1WZWN0b3IobWF0cml4Ok1hdHJpeDNELCB2ZWN0b3I6VmVjdG9yM0QsIHJlc3VsdDpWZWN0b3IzRCA9IG51bGwpOlZlY3RvcjNEXHJcblx0e1xyXG5cdFx0aWYgKCFyZXN1bHQpXHJcblx0XHRcdHJlc3VsdCA9IG5ldyBWZWN0b3IzRCgpO1xyXG5cclxuXHRcdHZhciByYXc6QXJyYXk8bnVtYmVyPiA9IE1hdHJpeDNEVXRpbHMuUkFXX0RBVEFfQ09OVEFJTkVSO1xyXG5cdFx0bWF0cml4LmNvcHlSYXdEYXRhVG8ocmF3KTtcclxuXHRcdHZhciBhOm51bWJlciA9IHJhd1swXTtcclxuXHRcdHZhciBlOm51bWJlciA9IHJhd1sxXTtcclxuXHRcdHZhciBpOm51bWJlciA9IHJhd1syXTtcclxuXHRcdHZhciBtOm51bWJlciA9IHJhd1szXTtcclxuXHRcdHZhciBiOm51bWJlciA9IHJhd1s0XTtcclxuXHRcdHZhciBmOm51bWJlciA9IHJhd1s1XTtcclxuXHRcdHZhciBqOm51bWJlciA9IHJhd1s2XTtcclxuXHRcdHZhciBuOm51bWJlciA9IHJhd1s3XTtcclxuXHRcdHZhciBjOm51bWJlciA9IHJhd1s4XTtcclxuXHRcdHZhciBnOm51bWJlciA9IHJhd1s5XTtcclxuXHRcdHZhciBrOm51bWJlciA9IHJhd1sxMF07XHJcblx0XHR2YXIgbzpudW1iZXIgPSByYXdbMTFdO1xyXG5cdFx0dmFyIHg6bnVtYmVyID0gdmVjdG9yLng7XHJcblx0XHR2YXIgeTpudW1iZXIgPSB2ZWN0b3IueTtcclxuXHRcdHZhciB6Om51bWJlciA9IHZlY3Rvci56O1xyXG5cdFx0cmVzdWx0LnggPSBhICogeCArIGIgKiB5ICsgYyAqIHo7XHJcblx0XHRyZXN1bHQueSA9IGUgKiB4ICsgZiAqIHkgKyBnICogejtcclxuXHRcdHJlc3VsdC56ID0gaSAqIHggKyBqICogeSArIGsgKiB6O1xyXG5cdFx0cmVzdWx0LncgPSBtICogeCArIG4gKiB5ICsgbyAqIHo7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyBnZXRUcmFuc2xhdGlvbih0cmFuc2Zvcm06TWF0cml4M0QsIHJlc3VsdDpWZWN0b3IzRCA9IG51bGwpOlZlY3RvcjNEXHJcblx0e1xyXG5cdFx0aWYoIXJlc3VsdClcclxuXHRcdFx0cmVzdWx0ID0gbmV3IFZlY3RvcjNEKCk7XHJcblxyXG5cdFx0dHJhbnNmb3JtLmNvcHlDb2x1bW5UbygzLCByZXN1bHQpO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgZGVsdGFUcmFuc2Zvcm1WZWN0b3JzKG1hdHJpeDpNYXRyaXgzRCwgdmluOkFycmF5PG51bWJlcj4sIHZvdXQ6QXJyYXk8bnVtYmVyPilcclxuXHR7XHJcblx0XHR2YXIgcmF3OkFycmF5PG51bWJlcj4gPSBNYXRyaXgzRFV0aWxzLlJBV19EQVRBX0NPTlRBSU5FUjtcclxuXHRcdG1hdHJpeC5jb3B5UmF3RGF0YVRvKHJhdyk7XHJcblx0XHR2YXIgYTpudW1iZXIgPSByYXdbMF07XHJcblx0XHR2YXIgZTpudW1iZXIgPSByYXdbMV07XHJcblx0XHR2YXIgaTpudW1iZXIgPSByYXdbMl07XHJcblx0XHR2YXIgbTpudW1iZXIgPSByYXdbM107XHJcblx0XHR2YXIgYjpudW1iZXIgPSByYXdbNF07XHJcblx0XHR2YXIgZjpudW1iZXIgPSByYXdbNV07XHJcblx0XHR2YXIgajpudW1iZXIgPSByYXdbNl07XHJcblx0XHR2YXIgbjpudW1iZXIgPSByYXdbN107XHJcblx0XHR2YXIgYzpudW1iZXIgPSByYXdbOF07XHJcblx0XHR2YXIgZzpudW1iZXIgPSByYXdbOV07XHJcblx0XHR2YXIgazpudW1iZXIgPSByYXdbMTBdO1xyXG5cdFx0dmFyIG86bnVtYmVyID0gcmF3WzExXTtcclxuXHRcdHZhciBvdXRJbmRleDpudW1iZXIgPSAwO1xyXG5cdFx0dmFyIGxlbmd0aDpudW1iZXIgPSB2aW4ubGVuZ3RoO1xyXG5cdFx0Zm9yKHZhciBpbmRleDpudW1iZXIgPSAwOyBpbmRleDxsZW5ndGg7IGluZGV4Kz0zKSB7XHJcblx0XHRcdHZhciB4Om51bWJlciA9IHZpbltpbmRleF07XHJcblx0XHRcdHZhciB5Om51bWJlciA9IHZpbltpbmRleCsxXTtcclxuXHRcdFx0dmFyIHo6bnVtYmVyID0gdmluW2luZGV4KzJdO1xyXG5cdFx0XHR2b3V0W291dEluZGV4KytdID0gYSAqIHggKyBiICogeSArIGMgKiB6O1xyXG5cdFx0XHR2b3V0W291dEluZGV4KytdID0gZSAqIHggKyBmICogeSArIGcgKiB6O1xyXG5cdFx0XHR2b3V0W291dEluZGV4KytdID0gaSAqIHggKyBqICogeSArIGsgKiB6O1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0ID0gTWF0cml4M0RVdGlsczsiXX0=