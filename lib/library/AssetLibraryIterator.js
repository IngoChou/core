var AssetLibraryIterator = (function () {
    function AssetLibraryIterator(assets, assetTypeFilter, namespaceFilter, filterFunc) {
        this._assets = assets;
        this.filter(assetTypeFilter, namespaceFilter, filterFunc);
    }
    Object.defineProperty(AssetLibraryIterator.prototype, "currentAsset", {
        get: function () {
            // Return current, or null if no current
            return (this._idx < this._filtered.length) ? this._filtered[this._idx] : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssetLibraryIterator.prototype, "numAssets", {
        get: function () {
            return this._filtered.length;
        },
        enumerable: true,
        configurable: true
    });
    AssetLibraryIterator.prototype.next = function () {
        var next = null;
        if (this._idx < this._filtered.length)
            next = this._filtered[this._idx];
        this._idx++;
        return next;
    };
    AssetLibraryIterator.prototype.reset = function () {
        this._idx = 0;
    };
    AssetLibraryIterator.prototype.setIndex = function (index) {
        this._idx = index;
    };
    AssetLibraryIterator.prototype.filter = function (assetTypeFilter, namespaceFilter, filterFunc) {
        if (assetTypeFilter || namespaceFilter) {
            var idx;
            var asset;
            idx = 0;
            this._filtered = new Array(); //new Vector.<IAsset>;
            var l = this._assets.length;
            for (var c = 0; c < l; c++) {
                asset = this._assets[c];
                // Skip this assets if filtering on type and this is wrong type
                if (assetTypeFilter && asset.assetType != assetTypeFilter)
                    continue;
                // Skip this asset if filtering on namespace and this is wrong namespace
                if (namespaceFilter && asset.assetNamespace != namespaceFilter)
                    continue;
                // Skip this asset if a filter func has been provided and it returns false
                if (filterFunc != null && !filterFunc(asset))
                    continue;
                this._filtered[idx++] = asset;
            }
        }
        else {
            this._filtered = this._assets;
        }
    };
    return AssetLibraryIterator;
})();
module.exports = AssetLibraryIterator;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0Fzc2V0TGlicmFyeUl0ZXJhdG9yLnRzIl0sIm5hbWVzIjpbIkFzc2V0TGlicmFyeUl0ZXJhdG9yIiwiQXNzZXRMaWJyYXJ5SXRlcmF0b3IuY29uc3RydWN0b3IiLCJBc3NldExpYnJhcnlJdGVyYXRvci5jdXJyZW50QXNzZXQiLCJBc3NldExpYnJhcnlJdGVyYXRvci5udW1Bc3NldHMiLCJBc3NldExpYnJhcnlJdGVyYXRvci5uZXh0IiwiQXNzZXRMaWJyYXJ5SXRlcmF0b3IucmVzZXQiLCJBc3NldExpYnJhcnlJdGVyYXRvci5zZXRJbmRleCIsIkFzc2V0TGlicmFyeUl0ZXJhdG9yLmZpbHRlciJdLCJtYXBwaW5ncyI6IkFBRUEsSUFBTSxvQkFBb0I7SUFRekJBLFNBUktBLG9CQUFvQkEsQ0FRYkEsTUFBb0JBLEVBQUVBLGVBQXNCQSxFQUFFQSxlQUFzQkEsRUFBRUEsVUFBVUE7UUFFM0ZDLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLE1BQU1BLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxlQUFlQSxFQUFFQSxlQUFlQSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQTtJQUMzREEsQ0FBQ0E7SUFFREQsc0JBQVdBLDhDQUFZQTthQUF2QkE7WUFFQ0UsQUFDQUEsd0NBRHdDQTtZQUN4Q0EsTUFBTUEsQ0FBQ0EsQ0FBRUEsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBRUEsR0FBRUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBRUEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBRUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDbEZBLENBQUNBOzs7T0FBQUY7SUFFREEsc0JBQVdBLDJDQUFTQTthQUFwQkE7WUFFQ0csTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDOUJBLENBQUNBOzs7T0FBQUg7SUFFTUEsbUNBQUlBLEdBQVhBO1FBRUNJLElBQUlBLElBQUlBLEdBQVVBLElBQUlBLENBQUNBO1FBRXZCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUNyQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFFbENBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO1FBRVpBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO0lBQ2JBLENBQUNBO0lBRU1KLG9DQUFLQSxHQUFaQTtRQUVDSyxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUNmQSxDQUFDQTtJQUVNTCx1Q0FBUUEsR0FBZkEsVUFBZ0JBLEtBQVlBO1FBRTNCTSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxLQUFLQSxDQUFDQTtJQUNuQkEsQ0FBQ0E7SUFFT04scUNBQU1BLEdBQWRBLFVBQWVBLGVBQXNCQSxFQUFFQSxlQUFzQkEsRUFBRUEsVUFBVUE7UUFFeEVPLEVBQUVBLENBQUNBLENBQUNBLGVBQWVBLElBQUlBLGVBQWVBLENBQUNBLENBQUNBLENBQUNBO1lBRXhDQSxJQUFJQSxHQUFVQSxDQUFDQTtZQUNmQSxJQUFJQSxLQUFZQSxDQUFDQTtZQUdqQkEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDUkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsS0FBS0EsRUFBVUEsRUFBQ0Esc0JBQXNCQTtZQUUzREEsSUFBSUEsQ0FBQ0EsR0FBVUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFFbkNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO2dCQUVuQ0EsS0FBS0EsR0FBWUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRWpDQSxBQUNBQSwrREFEK0RBO2dCQUMvREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsZUFBZUEsSUFBSUEsS0FBS0EsQ0FBQ0EsU0FBU0EsSUFBSUEsZUFBZUEsQ0FBQ0E7b0JBQ3pEQSxRQUFRQSxDQUFDQTtnQkFFVkEsQUFDQUEsd0VBRHdFQTtnQkFDeEVBLEVBQUVBLENBQUNBLENBQUNBLGVBQWVBLElBQUlBLEtBQUtBLENBQUNBLGNBQWNBLElBQUlBLGVBQWVBLENBQUNBO29CQUM5REEsUUFBUUEsQ0FBQ0E7Z0JBRVZBLEFBQ0FBLDBFQUQwRUE7Z0JBQzFFQSxFQUFFQSxDQUFDQSxDQUFDQSxVQUFVQSxJQUFJQSxJQUFJQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtvQkFDNUNBLFFBQVFBLENBQUNBO2dCQUVWQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxHQUFHQSxLQUFLQSxDQUFDQTtZQUUvQkEsQ0FBQ0E7UUFvQkZBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ1BBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBO1FBQy9CQSxDQUFDQTtJQUNGQSxDQUFDQTtJQUNGUCwyQkFBQ0E7QUFBREEsQ0F0R0EsQUFzR0NBLElBQUE7QUFFRCxBQUE4QixpQkFBckIsb0JBQW9CLENBQUMiLCJmaWxlIjoibGlicmFyeS9Bc3NldExpYnJhcnlJdGVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSUFzc2V0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0lBc3NldFwiKTtcclxuXHJcbmNsYXNzIEFzc2V0TGlicmFyeUl0ZXJhdG9yXHJcbntcclxuXHJcblx0cHJpdmF0ZSAgX2Fzc2V0czpBcnJheTxJQXNzZXQ+O1xyXG5cdHByaXZhdGUgX2ZpbHRlcmVkOkFycmF5PElBc3NldD47XHJcblxyXG5cdHByaXZhdGUgX2lkeDpudW1iZXI7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFzc2V0czpBcnJheTxJQXNzZXQ+LCBhc3NldFR5cGVGaWx0ZXI6c3RyaW5nLCBuYW1lc3BhY2VGaWx0ZXI6c3RyaW5nLCBmaWx0ZXJGdW5jKVxyXG5cdHtcclxuXHRcdHRoaXMuX2Fzc2V0cyA9IGFzc2V0cztcclxuXHRcdHRoaXMuZmlsdGVyKGFzc2V0VHlwZUZpbHRlciwgbmFtZXNwYWNlRmlsdGVyLCBmaWx0ZXJGdW5jKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXQgY3VycmVudEFzc2V0KCk6SUFzc2V0XHJcblx0e1xyXG5cdFx0Ly8gUmV0dXJuIGN1cnJlbnQsIG9yIG51bGwgaWYgbm8gY3VycmVudFxyXG5cdFx0cmV0dXJuICggdGhpcy5faWR4IDwgdGhpcy5fZmlsdGVyZWQubGVuZ3RoICk/IHRoaXMuX2ZpbHRlcmVkWyB0aGlzLl9pZHggXSA6IG51bGw7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0IG51bUFzc2V0cygpOm51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLl9maWx0ZXJlZC5sZW5ndGg7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgbmV4dCgpOklBc3NldFxyXG5cdHtcclxuXHRcdHZhciBuZXh0OklBc3NldCA9IG51bGw7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2lkeCA8IHRoaXMuX2ZpbHRlcmVkLmxlbmd0aClcclxuXHRcdFx0bmV4dCA9IHRoaXMuX2ZpbHRlcmVkW3RoaXMuX2lkeF07XHJcblxyXG5cdFx0dGhpcy5faWR4Kys7XHJcblxyXG5cdFx0cmV0dXJuIG5leHQ7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgcmVzZXQoKVxyXG5cdHtcclxuXHRcdHRoaXMuX2lkeCA9IDA7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0SW5kZXgoaW5kZXg6bnVtYmVyKVxyXG5cdHtcclxuXHRcdHRoaXMuX2lkeCA9IGluZGV4O1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBmaWx0ZXIoYXNzZXRUeXBlRmlsdGVyOnN0cmluZywgbmFtZXNwYWNlRmlsdGVyOnN0cmluZywgZmlsdGVyRnVuYylcclxuXHR7XHJcblx0XHRpZiAoYXNzZXRUeXBlRmlsdGVyIHx8IG5hbWVzcGFjZUZpbHRlcikge1xyXG5cclxuXHRcdFx0dmFyIGlkeDpudW1iZXI7XHJcblx0XHRcdHZhciBhc3NldDpJQXNzZXQ7XHJcblxyXG5cclxuXHRcdFx0aWR4ID0gMDtcclxuXHRcdFx0dGhpcy5fZmlsdGVyZWQgPSBuZXcgQXJyYXk8SUFzc2V0PigpOy8vbmV3IFZlY3Rvci48SUFzc2V0PjtcclxuXHJcblx0XHRcdHZhciBsOm51bWJlciA9IHRoaXMuX2Fzc2V0cy5sZW5ndGg7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBjOm51bWJlciA9IDA7IGMgPCBsOyBjKyspIHtcclxuXHJcblx0XHRcdFx0YXNzZXQgPSA8SUFzc2V0PiB0aGlzLl9hc3NldHNbY107XHJcblxyXG5cdFx0XHRcdC8vIFNraXAgdGhpcyBhc3NldHMgaWYgZmlsdGVyaW5nIG9uIHR5cGUgYW5kIHRoaXMgaXMgd3JvbmcgdHlwZVxyXG5cdFx0XHRcdGlmIChhc3NldFR5cGVGaWx0ZXIgJiYgYXNzZXQuYXNzZXRUeXBlICE9IGFzc2V0VHlwZUZpbHRlcilcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHQvLyBTa2lwIHRoaXMgYXNzZXQgaWYgZmlsdGVyaW5nIG9uIG5hbWVzcGFjZSBhbmQgdGhpcyBpcyB3cm9uZyBuYW1lc3BhY2VcclxuXHRcdFx0XHRpZiAobmFtZXNwYWNlRmlsdGVyICYmIGFzc2V0LmFzc2V0TmFtZXNwYWNlICE9IG5hbWVzcGFjZUZpbHRlcilcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHQvLyBTa2lwIHRoaXMgYXNzZXQgaWYgYSBmaWx0ZXIgZnVuYyBoYXMgYmVlbiBwcm92aWRlZCBhbmQgaXQgcmV0dXJucyBmYWxzZVxyXG5cdFx0XHRcdGlmIChmaWx0ZXJGdW5jICE9IG51bGwgJiYgIWZpbHRlckZ1bmMoYXNzZXQpKVxyXG5cdFx0XHRcdFx0Y29udGludWU7XHJcblxyXG5cdFx0XHRcdHRoaXMuX2ZpbHRlcmVkW2lkeCsrXSA9IGFzc2V0O1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0LypcclxuXHRcdFx0IGZvciBlYWNoIChhc3NldCBpbiBfYXNzZXRzKSB7XHJcblx0XHRcdCAvLyBTa2lwIHRoaXMgYXNzZXRzIGlmIGZpbHRlcmluZyBvbiB0eXBlIGFuZCB0aGlzIGlzIHdyb25nIHR5cGVcclxuXHRcdFx0IGlmIChhc3NldFR5cGVGaWx0ZXIgJiYgYXNzZXQuYXNzZXRUeXBlICE9IGFzc2V0VHlwZUZpbHRlcilcclxuXHRcdFx0IGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0IC8vIFNraXAgdGhpcyBhc3NldCBpZiBmaWx0ZXJpbmcgb24gbmFtZXNwYWNlIGFuZCB0aGlzIGlzIHdyb25nIG5hbWVzcGFjZVxyXG5cdFx0XHQgaWYgKG5hbWVzcGFjZUZpbHRlciAmJiBhc3NldC5hc3NldE5hbWVzcGFjZSAhPSBuYW1lc3BhY2VGaWx0ZXIpXHJcblx0XHRcdCBjb250aW51ZTtcclxuXHJcblx0XHRcdCAvLyBTa2lwIHRoaXMgYXNzZXQgaWYgYSBmaWx0ZXIgZnVuYyBoYXMgYmVlbiBwcm92aWRlZCBhbmQgaXQgcmV0dXJucyBmYWxzZVxyXG5cdFx0XHQgaWYgKGZpbHRlckZ1bmMgIT0gbnVsbCAmJiAhZmlsdGVyRnVuYyhhc3NldCkpXHJcblx0XHRcdCBjb250aW51ZTtcclxuXHJcblx0XHRcdCBfZmlsdGVyZWRbaWR4KytdID0gYXNzZXQ7XHJcblx0XHRcdCB9XHJcblx0XHRcdCAqL1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuX2ZpbHRlcmVkID0gdGhpcy5fYXNzZXRzO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0ID0gQXNzZXRMaWJyYXJ5SXRlcmF0b3I7Il19