var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ConflictStrategyBase = require("awayjs-core/lib/library/ConflictStrategyBase");
var NumSuffixConflictStrategy = (function (_super) {
    __extends(NumSuffixConflictStrategy, _super);
    function NumSuffixConflictStrategy(separator) {
        if (separator === void 0) { separator = '.'; }
        _super.call(this);
        this._separator = separator;
        this._next_suffix = {};
    }
    NumSuffixConflictStrategy.prototype.resolveConflict = function (changedAsset, oldAsset, assetsDictionary, precedence) {
        var orig;
        var new_name;
        var base;
        var suffix;
        orig = changedAsset.name;
        if (orig.indexOf(this._separator) >= 0) {
            // Name has an ocurrence of the separator, so get base name and suffix,
            // unless suffix is non-numerical, in which case revert to zero and
            // use entire name as base
            base = orig.substring(0, orig.lastIndexOf(this._separator));
            suffix = parseInt(orig.substring(base.length - 1));
            if (isNaN(suffix)) {
                base = orig;
                suffix = 0;
            }
        }
        else {
            base = orig;
            suffix = 0;
        }
        if (suffix == 0 && this._next_suffix.hasOwnProperty(base)) {
            suffix = this._next_suffix[base];
        }
        do {
            suffix++;
            new_name = base.concat(this._separator, suffix.toString());
        } while (assetsDictionary.hasOwnProperty(new_name));
        this._next_suffix[base] = suffix;
        this._pUpdateNames(oldAsset.assetNamespace, new_name, oldAsset, changedAsset, assetsDictionary, precedence);
    };
    NumSuffixConflictStrategy.prototype.create = function () {
        return new NumSuffixConflictStrategy(this._separator);
    };
    return NumSuffixConflictStrategy;
})(ConflictStrategyBase);
module.exports = NumSuffixConflictStrategy;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L051bVN1ZmZpeENvbmZsaWN0U3RyYXRlZ3kudHMiXSwibmFtZXMiOlsiTnVtU3VmZml4Q29uZmxpY3RTdHJhdGVneSIsIk51bVN1ZmZpeENvbmZsaWN0U3RyYXRlZ3kuY29uc3RydWN0b3IiLCJOdW1TdWZmaXhDb25mbGljdFN0cmF0ZWd5LnJlc29sdmVDb25mbGljdCIsIk51bVN1ZmZpeENvbmZsaWN0U3RyYXRlZ3kuY3JlYXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLG9CQUFvQixXQUFZLDhDQUE4QyxDQUFDLENBQUM7QUFHdkYsSUFBTSx5QkFBeUI7SUFBU0EsVUFBbENBLHlCQUF5QkEsVUFBNkJBO0lBSzNEQSxTQUxLQSx5QkFBeUJBLENBS2xCQSxTQUFzQkE7UUFBdEJDLHlCQUFzQkEsR0FBdEJBLGVBQXNCQTtRQUVqQ0EsaUJBQU9BLENBQUNBO1FBRVJBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLFNBQVNBLENBQUNBO1FBQzVCQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxFQUFFQSxDQUFDQTtJQUN4QkEsQ0FBQ0E7SUFFTUQsbURBQWVBLEdBQXRCQSxVQUF1QkEsWUFBbUJBLEVBQUVBLFFBQWVBLEVBQUVBLGdCQUF1QkEsRUFBRUEsVUFBaUJBO1FBRXRHRSxJQUFJQSxJQUFXQSxDQUFDQTtRQUNoQkEsSUFBSUEsUUFBZUEsQ0FBQ0E7UUFDcEJBLElBQUlBLElBQVdBLENBQUNBO1FBQ2hCQSxJQUFJQSxNQUFhQSxDQUFDQTtRQUVsQkEsSUFBSUEsR0FBR0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFFekJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3hDQSxBQUdBQSx1RUFIdUVBO1lBQ3ZFQSxtRUFBbUVBO1lBQ25FQSwwQkFBMEJBO1lBQzFCQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM1REEsTUFBTUEsR0FBR0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFbkRBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNuQkEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQ1pBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBO1lBQ1pBLENBQUNBO1FBRUZBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ1BBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1lBQ1pBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBO1FBQ1pBLENBQUNBO1FBRURBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLElBQUlBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBRTNEQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUVsQ0EsQ0FBQ0E7UUFJREEsR0FBR0EsQ0FBQ0E7WUFFSEEsTUFBTUEsRUFBRUEsQ0FBQ0E7WUFFVEEsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsTUFBTUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFFNURBLENBQUNBLFFBQVFBLGdCQUFnQkEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsRUFBRUE7UUFFcERBLElBQUlBLENBQUNBLFlBQVlBLENBQUVBLElBQUlBLENBQUVBLEdBQUdBLE1BQU1BLENBQUNBO1FBQ25DQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxRQUFRQSxDQUFDQSxjQUFjQSxFQUFFQSxRQUFRQSxFQUFFQSxRQUFRQSxFQUFFQSxZQUFZQSxFQUFFQSxnQkFBZ0JBLEVBQUVBLFVBQVVBLENBQUNBLENBQUNBO0lBRTdHQSxDQUFDQTtJQUVNRiwwQ0FBTUEsR0FBYkE7UUFFQ0csTUFBTUEsQ0FBQ0EsSUFBSUEseUJBQXlCQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtJQUN2REEsQ0FBQ0E7SUFDRkgsZ0NBQUNBO0FBQURBLENBaEVBLEFBZ0VDQSxFQWhFdUMsb0JBQW9CLEVBZ0UzRDtBQUVELEFBQW1DLGlCQUExQix5QkFBeUIsQ0FBQyIsImZpbGUiOiJsaWJyYXJ5L051bVN1ZmZpeENvbmZsaWN0U3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbmZsaWN0U3RyYXRlZ3lCYXNlXHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0NvbmZsaWN0U3RyYXRlZ3lCYXNlXCIpO1xyXG5pbXBvcnQgSUFzc2V0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0lBc3NldFwiKTtcclxuXHJcbmNsYXNzIE51bVN1ZmZpeENvbmZsaWN0U3RyYXRlZ3kgZXh0ZW5kcyBDb25mbGljdFN0cmF0ZWd5QmFzZVxyXG57XHJcblx0cHJpdmF0ZSBfc2VwYXJhdG9yOnN0cmluZztcclxuXHRwcml2YXRlIF9uZXh0X3N1ZmZpeDpPYmplY3Q7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHNlcGFyYXRvcjpzdHJpbmcgPSAnLicpXHJcblx0e1xyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLl9zZXBhcmF0b3IgPSBzZXBhcmF0b3I7XHJcblx0XHR0aGlzLl9uZXh0X3N1ZmZpeCA9IHt9O1xyXG5cdH1cclxuXHJcblx0cHVibGljIHJlc29sdmVDb25mbGljdChjaGFuZ2VkQXNzZXQ6SUFzc2V0LCBvbGRBc3NldDpJQXNzZXQsIGFzc2V0c0RpY3Rpb25hcnk6T2JqZWN0LCBwcmVjZWRlbmNlOnN0cmluZylcclxuXHR7XHJcblx0XHR2YXIgb3JpZzpzdHJpbmc7XHJcblx0XHR2YXIgbmV3X25hbWU6c3RyaW5nO1xyXG5cdFx0dmFyIGJhc2U6c3RyaW5nO1xyXG5cdFx0dmFyIHN1ZmZpeDpudW1iZXI7XHJcblxyXG5cdFx0b3JpZyA9IGNoYW5nZWRBc3NldC5uYW1lO1xyXG5cclxuXHRcdGlmIChvcmlnLmluZGV4T2YodGhpcy5fc2VwYXJhdG9yKSA+PSAwKSB7XHJcblx0XHRcdC8vIE5hbWUgaGFzIGFuIG9jdXJyZW5jZSBvZiB0aGUgc2VwYXJhdG9yLCBzbyBnZXQgYmFzZSBuYW1lIGFuZCBzdWZmaXgsXHJcblx0XHRcdC8vIHVubGVzcyBzdWZmaXggaXMgbm9uLW51bWVyaWNhbCwgaW4gd2hpY2ggY2FzZSByZXZlcnQgdG8gemVybyBhbmRcclxuXHRcdFx0Ly8gdXNlIGVudGlyZSBuYW1lIGFzIGJhc2VcclxuXHRcdFx0YmFzZSA9IG9yaWcuc3Vic3RyaW5nKDAsIG9yaWcubGFzdEluZGV4T2YodGhpcy5fc2VwYXJhdG9yKSk7XHJcblx0XHRcdHN1ZmZpeCA9IHBhcnNlSW50KG9yaWcuc3Vic3RyaW5nKGJhc2UubGVuZ3RoIC0gMSkpO1xyXG5cclxuXHRcdFx0aWYgKGlzTmFOKHN1ZmZpeCkpIHtcclxuXHRcdFx0XHRiYXNlID0gb3JpZztcclxuXHRcdFx0XHRzdWZmaXggPSAwO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0YmFzZSA9IG9yaWc7XHJcblx0XHRcdHN1ZmZpeCA9IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHN1ZmZpeCA9PSAwICYmIHRoaXMuX25leHRfc3VmZml4Lmhhc093blByb3BlcnR5KGJhc2UpKSB7XHJcblxyXG5cdFx0XHRzdWZmaXggPSB0aGlzLl9uZXh0X3N1ZmZpeFtiYXNlXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmluZCB0aGUgZmlyc3Qgc3VmZml4ZWQgbmFtZSB0aGF0IGRvZXNcclxuXHRcdC8vIG5vdCBjb2xsaWRlIHdpdGggb3RoZXIgbmFtZXMuXHJcblx0XHRkbyB7XHJcblxyXG5cdFx0XHRzdWZmaXgrKztcclxuXHJcblx0XHRcdG5ld19uYW1lID0gYmFzZS5jb25jYXQodGhpcy5fc2VwYXJhdG9yLCBzdWZmaXgudG9TdHJpbmcoKSk7XHJcblxyXG5cdFx0fSB3aGlsZSAoYXNzZXRzRGljdGlvbmFyeS5oYXNPd25Qcm9wZXJ0eShuZXdfbmFtZSkpO1xyXG5cclxuXHRcdHRoaXMuX25leHRfc3VmZml4WyBiYXNlIF0gPSBzdWZmaXg7XHJcblx0XHR0aGlzLl9wVXBkYXRlTmFtZXMob2xkQXNzZXQuYXNzZXROYW1lc3BhY2UsIG5ld19uYW1lLCBvbGRBc3NldCwgY2hhbmdlZEFzc2V0LCBhc3NldHNEaWN0aW9uYXJ5LCBwcmVjZWRlbmNlKTtcclxuXHJcblx0fVxyXG5cclxuXHRwdWJsaWMgY3JlYXRlKCk6Q29uZmxpY3RTdHJhdGVneUJhc2VcclxuXHR7XHJcblx0XHRyZXR1cm4gbmV3IE51bVN1ZmZpeENvbmZsaWN0U3RyYXRlZ3kodGhpcy5fc2VwYXJhdG9yKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IE51bVN1ZmZpeENvbmZsaWN0U3RyYXRlZ3k7Il19