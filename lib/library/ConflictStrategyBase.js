var ConflictPrecedence = require("awayjs-core/lib/library/ConflictPrecedence");
var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var AssetEvent = require("awayjs-core/lib/events/AssetEvent");
/**
 * Abstract base class for naming conflict resolution classes. Extend this to create a
 * strategy class which the asset library can use to resolve asset naming conflicts, or
 * use one of the bundled concrete strategy classes:
 *
 * <ul>
 *   <li>IgnoreConflictStrategy (ConflictStrategy.IGNORE)</li>
 *   <li>ErrorConflictStrategy (ConflictStrategy.THROW_ERROR)</li>
 *   <li>NumSuffixConflictStrategy (ConflictStrategy.APPEND_NUM_SUFFIX)</li>
 * </ul>
 *
 * @see away.library.AssetLibrary.conflictStrategy
 * @see away.library.ConflictStrategy
 * @see away.library.IgnoreConflictStrategy
 * @see away.library.ErrorConflictStrategy
 * @see away.library.NumSuffixConflictStrategy
 */
var ConflictStrategyBase = (function () {
    function ConflictStrategyBase() {
    }
    /**
     * Resolve a naming conflict between two assets. Must be implemented by concrete strategy
     * classes.
     */
    ConflictStrategyBase.prototype.resolveConflict = function (changedAsset, oldAsset, assetsDictionary, precedence) {
        throw new AbstractMethodError();
    };
    /**
     * Create instance of this conflict strategy. Used internally by the AssetLibrary to
     * make sure the same strategy instance is not used in all AssetLibrary instances, which
     * would break any state caching that happens inside the strategy class.
     */
    ConflictStrategyBase.prototype.create = function () {
        throw new AbstractMethodError();
    };
    /**
     * Provided as a convenience method for all conflict strategy classes, as a way to finalize
     * the conflict resolution by applying the new names and dispatching the correct events.
     */
    ConflictStrategyBase.prototype._pUpdateNames = function (ns, nonConflictingName, oldAsset, newAsset, assetsDictionary, precedence) {
        var loser_prev_name;
        var winner;
        var loser;
        winner = (precedence === ConflictPrecedence.FAVOR_NEW) ? newAsset : oldAsset;
        loser = (precedence === ConflictPrecedence.FAVOR_NEW) ? oldAsset : newAsset;
        loser_prev_name = loser.name;
        assetsDictionary[winner.name] = winner;
        assetsDictionary[nonConflictingName] = loser;
        loser.resetAssetPath(nonConflictingName, ns, false);
        loser.dispatchEvent(new AssetEvent(AssetEvent.ASSET_CONFLICT_RESOLVED, loser, loser_prev_name));
    };
    return ConflictStrategyBase;
})();
module.exports = ConflictStrategyBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0NvbmZsaWN0U3RyYXRlZ3lCYXNlLnRzIl0sIm5hbWVzIjpbIkNvbmZsaWN0U3RyYXRlZ3lCYXNlIiwiQ29uZmxpY3RTdHJhdGVneUJhc2UuY29uc3RydWN0b3IiLCJDb25mbGljdFN0cmF0ZWd5QmFzZS5yZXNvbHZlQ29uZmxpY3QiLCJDb25mbGljdFN0cmF0ZWd5QmFzZS5jcmVhdGUiLCJDb25mbGljdFN0cmF0ZWd5QmFzZS5fcFVwZGF0ZU5hbWVzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFPLGtCQUFrQixXQUFZLDRDQUE0QyxDQUFDLENBQUM7QUFFbkYsSUFBTyxtQkFBbUIsV0FBWSw0Q0FBNEMsQ0FBQyxDQUFDO0FBQ3BGLElBQU8sVUFBVSxXQUFjLG1DQUFtQyxDQUFDLENBQUM7QUFFcEUsQUFpQkE7Ozs7Ozs7Ozs7Ozs7Ozs7R0FERztJQUNHLG9CQUFvQjtJQUd6QkEsU0FIS0Esb0JBQW9CQTtJQUt6QkMsQ0FBQ0E7SUFFREQ7OztPQUdHQTtJQUNJQSw4Q0FBZUEsR0FBdEJBLFVBQXVCQSxZQUFtQkEsRUFBRUEsUUFBZUEsRUFBRUEsZ0JBQXVCQSxFQUFFQSxVQUFpQkE7UUFFdEdFLE1BQU1BLElBQUlBLG1CQUFtQkEsRUFBRUEsQ0FBQ0E7SUFDakNBLENBQUNBO0lBRURGOzs7O09BSUdBO0lBQ0lBLHFDQUFNQSxHQUFiQTtRQUVDRyxNQUFNQSxJQUFJQSxtQkFBbUJBLEVBQUVBLENBQUNBO0lBQ2pDQSxDQUFDQTtJQUVESDs7O09BR0dBO0lBQ0lBLDRDQUFhQSxHQUFwQkEsVUFBcUJBLEVBQVNBLEVBQUVBLGtCQUF5QkEsRUFBRUEsUUFBZUEsRUFBRUEsUUFBZUEsRUFBRUEsZ0JBQXVCQSxFQUFFQSxVQUFpQkE7UUFFdElJLElBQUlBLGVBQXNCQSxDQUFDQTtRQUMzQkEsSUFBSUEsTUFBYUEsQ0FBQ0E7UUFDbEJBLElBQUlBLEtBQVlBLENBQUNBO1FBRWpCQSxNQUFNQSxHQUFHQSxDQUFDQSxVQUFVQSxLQUFLQSxrQkFBa0JBLENBQUNBLFNBQVNBLENBQUNBLEdBQUVBLFFBQVFBLEdBQUdBLFFBQVFBLENBQUNBO1FBQzVFQSxLQUFLQSxHQUFHQSxDQUFDQSxVQUFVQSxLQUFLQSxrQkFBa0JBLENBQUNBLFNBQVNBLENBQUNBLEdBQUVBLFFBQVFBLEdBQUdBLFFBQVFBLENBQUNBO1FBRTNFQSxlQUFlQSxHQUFHQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUU3QkEsZ0JBQWdCQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtRQUN2Q0EsZ0JBQWdCQSxDQUFDQSxrQkFBa0JBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBO1FBQzdDQSxLQUFLQSxDQUFDQSxjQUFjQSxDQUFDQSxrQkFBa0JBLEVBQUVBLEVBQUVBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO1FBRXBEQSxLQUFLQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxVQUFVQSxDQUFDQSxVQUFVQSxDQUFDQSx1QkFBdUJBLEVBQUVBLEtBQUtBLEVBQUVBLGVBQWVBLENBQUNBLENBQUNBLENBQUNBO0lBQ2pHQSxDQUFDQTtJQUNGSiwyQkFBQ0E7QUFBREEsQ0EvQ0EsQUErQ0NBLElBQUE7QUFFRCxBQUE4QixpQkFBckIsb0JBQW9CLENBQUMiLCJmaWxlIjoibGlicmFyeS9Db25mbGljdFN0cmF0ZWd5QmFzZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29uZmxpY3RQcmVjZWRlbmNlXHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0NvbmZsaWN0UHJlY2VkZW5jZVwiKTtcclxuaW1wb3J0IElBc3NldFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbGlicmFyeS9JQXNzZXRcIik7XHJcbmltcG9ydCBBYnN0cmFjdE1ldGhvZEVycm9yXHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9lcnJvcnMvQWJzdHJhY3RNZXRob2RFcnJvclwiKTtcclxuaW1wb3J0IEFzc2V0RXZlbnRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9ldmVudHMvQXNzZXRFdmVudFwiKTtcclxuXHJcbi8qKlxyXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBuYW1pbmcgY29uZmxpY3QgcmVzb2x1dGlvbiBjbGFzc2VzLiBFeHRlbmQgdGhpcyB0byBjcmVhdGUgYVxyXG4gKiBzdHJhdGVneSBjbGFzcyB3aGljaCB0aGUgYXNzZXQgbGlicmFyeSBjYW4gdXNlIHRvIHJlc29sdmUgYXNzZXQgbmFtaW5nIGNvbmZsaWN0cywgb3JcclxuICogdXNlIG9uZSBvZiB0aGUgYnVuZGxlZCBjb25jcmV0ZSBzdHJhdGVneSBjbGFzc2VzOlxyXG4gKlxyXG4gKiA8dWw+XHJcbiAqICAgPGxpPklnbm9yZUNvbmZsaWN0U3RyYXRlZ3kgKENvbmZsaWN0U3RyYXRlZ3kuSUdOT1JFKTwvbGk+XHJcbiAqICAgPGxpPkVycm9yQ29uZmxpY3RTdHJhdGVneSAoQ29uZmxpY3RTdHJhdGVneS5USFJPV19FUlJPUik8L2xpPlxyXG4gKiAgIDxsaT5OdW1TdWZmaXhDb25mbGljdFN0cmF0ZWd5IChDb25mbGljdFN0cmF0ZWd5LkFQUEVORF9OVU1fU1VGRklYKTwvbGk+XHJcbiAqIDwvdWw+XHJcbiAqXHJcbiAqIEBzZWUgYXdheS5saWJyYXJ5LkFzc2V0TGlicmFyeS5jb25mbGljdFN0cmF0ZWd5XHJcbiAqIEBzZWUgYXdheS5saWJyYXJ5LkNvbmZsaWN0U3RyYXRlZ3lcclxuICogQHNlZSBhd2F5LmxpYnJhcnkuSWdub3JlQ29uZmxpY3RTdHJhdGVneVxyXG4gKiBAc2VlIGF3YXkubGlicmFyeS5FcnJvckNvbmZsaWN0U3RyYXRlZ3lcclxuICogQHNlZSBhd2F5LmxpYnJhcnkuTnVtU3VmZml4Q29uZmxpY3RTdHJhdGVneVxyXG4gKi9cclxuY2xhc3MgQ29uZmxpY3RTdHJhdGVneUJhc2Vcclxue1xyXG5cclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmVzb2x2ZSBhIG5hbWluZyBjb25mbGljdCBiZXR3ZWVuIHR3byBhc3NldHMuIE11c3QgYmUgaW1wbGVtZW50ZWQgYnkgY29uY3JldGUgc3RyYXRlZ3lcclxuXHQgKiBjbGFzc2VzLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyByZXNvbHZlQ29uZmxpY3QoY2hhbmdlZEFzc2V0OklBc3NldCwgb2xkQXNzZXQ6SUFzc2V0LCBhc3NldHNEaWN0aW9uYXJ5Ok9iamVjdCwgcHJlY2VkZW5jZTpzdHJpbmcpXHJcblx0e1xyXG5cdFx0dGhyb3cgbmV3IEFic3RyYWN0TWV0aG9kRXJyb3IoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZSBpbnN0YW5jZSBvZiB0aGlzIGNvbmZsaWN0IHN0cmF0ZWd5LiBVc2VkIGludGVybmFsbHkgYnkgdGhlIEFzc2V0TGlicmFyeSB0b1xyXG5cdCAqIG1ha2Ugc3VyZSB0aGUgc2FtZSBzdHJhdGVneSBpbnN0YW5jZSBpcyBub3QgdXNlZCBpbiBhbGwgQXNzZXRMaWJyYXJ5IGluc3RhbmNlcywgd2hpY2hcclxuXHQgKiB3b3VsZCBicmVhayBhbnkgc3RhdGUgY2FjaGluZyB0aGF0IGhhcHBlbnMgaW5zaWRlIHRoZSBzdHJhdGVneSBjbGFzcy5cclxuXHQgKi9cclxuXHRwdWJsaWMgY3JlYXRlKCk6Q29uZmxpY3RTdHJhdGVneUJhc2VcclxuXHR7XHJcblx0XHR0aHJvdyBuZXcgQWJzdHJhY3RNZXRob2RFcnJvcigpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUHJvdmlkZWQgYXMgYSBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGFsbCBjb25mbGljdCBzdHJhdGVneSBjbGFzc2VzLCBhcyBhIHdheSB0byBmaW5hbGl6ZVxyXG5cdCAqIHRoZSBjb25mbGljdCByZXNvbHV0aW9uIGJ5IGFwcGx5aW5nIHRoZSBuZXcgbmFtZXMgYW5kIGRpc3BhdGNoaW5nIHRoZSBjb3JyZWN0IGV2ZW50cy5cclxuXHQgKi9cclxuXHRwdWJsaWMgX3BVcGRhdGVOYW1lcyhuczpzdHJpbmcsIG5vbkNvbmZsaWN0aW5nTmFtZTpzdHJpbmcsIG9sZEFzc2V0OklBc3NldCwgbmV3QXNzZXQ6SUFzc2V0LCBhc3NldHNEaWN0aW9uYXJ5Ok9iamVjdCwgcHJlY2VkZW5jZTpzdHJpbmcpXHJcblx0e1xyXG5cdFx0dmFyIGxvc2VyX3ByZXZfbmFtZTpzdHJpbmc7XHJcblx0XHR2YXIgd2lubmVyOklBc3NldDtcclxuXHRcdHZhciBsb3NlcjpJQXNzZXQ7XHJcblxyXG5cdFx0d2lubmVyID0gKHByZWNlZGVuY2UgPT09IENvbmZsaWN0UHJlY2VkZW5jZS5GQVZPUl9ORVcpPyBuZXdBc3NldCA6IG9sZEFzc2V0O1xyXG5cdFx0bG9zZXIgPSAocHJlY2VkZW5jZSA9PT0gQ29uZmxpY3RQcmVjZWRlbmNlLkZBVk9SX05FVyk/IG9sZEFzc2V0IDogbmV3QXNzZXQ7XHJcblxyXG5cdFx0bG9zZXJfcHJldl9uYW1lID0gbG9zZXIubmFtZTtcclxuXHJcblx0XHRhc3NldHNEaWN0aW9uYXJ5W3dpbm5lci5uYW1lXSA9IHdpbm5lcjtcclxuXHRcdGFzc2V0c0RpY3Rpb25hcnlbbm9uQ29uZmxpY3RpbmdOYW1lXSA9IGxvc2VyO1xyXG5cdFx0bG9zZXIucmVzZXRBc3NldFBhdGgobm9uQ29uZmxpY3RpbmdOYW1lLCBucywgZmFsc2UpO1xyXG5cclxuXHRcdGxvc2VyLmRpc3BhdGNoRXZlbnQobmV3IEFzc2V0RXZlbnQoQXNzZXRFdmVudC5BU1NFVF9DT05GTElDVF9SRVNPTFZFRCwgbG9zZXIsIGxvc2VyX3ByZXZfbmFtZSkpO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0ID0gQ29uZmxpY3RTdHJhdGVneUJhc2U7Il19