var IDUtil = (function () {
    function IDUtil() {
    }
    /**
     *  Generates a UID (unique identifier) based on ActionScript's
     *  pseudo-random number generator and the current time.
     *
     *  <p>The UID has the form
     *  <code>"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"</code>
     *  where X is a hexadecimal digit (0-9, A-F).</p>
     *
     *  <p>This UID will not be truly globally unique; but it is the best
     *  we can do without player support for UID generation.</p>
     *
     *  @return The newly-generated UID.
     *
     *  @langversion 3.0
     *  @playerversion Flash 9
     *  @playerversion AIR 1.1
     *  @productversion Flex 3
     */
    IDUtil.createUID = function () {
        var uid = new Array(36);
        var index = 0;
        var i;
        var j;
        for (i = 0; i < 8; i++)
            uid[index++] = IDUtil.ALPHA_CHAR_CODES[Math.floor(Math.random() * 16)];
        for (i = 0; i < 3; i++) {
            uid[index++] = 45; // charCode for "-"
            for (j = 0; j < 4; j++)
                uid[index++] = IDUtil.ALPHA_CHAR_CODES[Math.floor(Math.random() * 16)];
        }
        uid[index++] = 45; // charCode for "-"
        var time = new Date().getTime();
        // Note: time is the number of milliseconds since 1970,
        // which is currently more than one trillion.
        // We use the low 8 hex digits of this number in the UID.
        // Just in case the system clock has been reset to
        // Jan 1-4, 1970 (in which case this number could have only
        // 1-7 hex digits), we pad on the left with 7 zeros
        // before taking the low digits.
        var timeString = ("0000000" + time.toString(16).toUpperCase()).substr(-8);
        for (i = 0; i < 8; i++)
            uid[index++] = timeString.charCodeAt(i);
        for (i = 0; i < 4; i++)
            uid[index++] = IDUtil.ALPHA_CHAR_CODES[Math.floor(Math.random() * 16)];
        return String.fromCharCode.apply(null, uid);
    };
    /**
     *  @private
     *  Char codes for 0123456789ABCDEF
     */
    IDUtil.ALPHA_CHAR_CODES = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70];
    return IDUtil;
})();
module.exports = IDUtil;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0lEVXRpbC50cyJdLCJuYW1lcyI6WyJJRFV0aWwiLCJJRFV0aWwuY29uc3RydWN0b3IiLCJJRFV0aWwuY3JlYXRlVUlEIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNLE1BQU07SUFBWkEsU0FBTUEsTUFBTUE7SUFnR1pDLENBQUNBO0lBeEZBRDs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FpQkdBO0lBQ1dBLGdCQUFTQSxHQUF2QkE7UUFFQ0UsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsS0FBS0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDeEJBLElBQUlBLEtBQUtBLEdBQVVBLENBQUNBLENBQUNBO1FBRXJCQSxJQUFJQSxDQUFRQSxDQUFDQTtRQUNiQSxJQUFJQSxDQUFRQSxDQUFDQTtRQUViQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQTtZQUNyQkEsR0FBR0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxHQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUV0RUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7WUFDeEJBLEdBQUdBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBLEdBQUdBLEVBQUVBLEVBQUVBLG1CQUFtQkE7WUFFdENBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBO2dCQUNyQkEsR0FBR0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxHQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN2RUEsQ0FBQ0E7UUFFREEsR0FBR0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsR0FBR0EsRUFBRUEsRUFBRUEsbUJBQW1CQTtRQUV0Q0EsSUFBSUEsSUFBSUEsR0FBVUEsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDdkNBLEFBT0FBLHVEQVB1REE7UUFDdkRBLDZDQUE2Q0E7UUFDN0NBLHlEQUF5REE7UUFDekRBLGtEQUFrREE7UUFDbERBLDJEQUEyREE7UUFDM0RBLG1EQUFtREE7UUFDbkRBLGdDQUFnQ0E7WUFDNUJBLFVBQVVBLEdBQVVBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBRWpGQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQTtZQUNyQkEsR0FBR0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsR0FBR0EsVUFBVUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFekNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBO1lBQ3JCQSxHQUFHQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLEdBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBRXRFQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUM3Q0EsQ0FBQ0E7SUE3RERGOzs7T0FHR0E7SUFDWUEsdUJBQWdCQSxHQUFHQSxDQUFDQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtJQTBGcEdBLGFBQUNBO0FBQURBLENBaEdBLEFBZ0dDQSxJQUFBO0FBRUQsQUFBZ0IsaUJBQVAsTUFBTSxDQUFDIiwiZmlsZSI6ImxpYnJhcnkvSURVdGlsLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIElEVXRpbFxyXG57XHJcblx0LyoqXHJcblx0ICogIEBwcml2YXRlXHJcblx0ICogIENoYXIgY29kZXMgZm9yIDAxMjM0NTY3ODlBQkNERUZcclxuXHQgKi9cclxuXHRwcml2YXRlIHN0YXRpYyBBTFBIQV9DSEFSX0NPREVTID0gWzQ4LCA0OSwgNTAsIDUxLCA1MiwgNTMsIDU0LCA1NSwgNTYsIDU3LCA2NSwgNjYsIDY3LCA2OCwgNjksIDcwXTtcclxuXHJcblx0LyoqXHJcblx0ICogIEdlbmVyYXRlcyBhIFVJRCAodW5pcXVlIGlkZW50aWZpZXIpIGJhc2VkIG9uIEFjdGlvblNjcmlwdCdzXHJcblx0ICogIHBzZXVkby1yYW5kb20gbnVtYmVyIGdlbmVyYXRvciBhbmQgdGhlIGN1cnJlbnQgdGltZS5cclxuXHQgKlxyXG5cdCAqICA8cD5UaGUgVUlEIGhhcyB0aGUgZm9ybVxyXG5cdCAqICA8Y29kZT5cIlhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFwiPC9jb2RlPlxyXG5cdCAqICB3aGVyZSBYIGlzIGEgaGV4YWRlY2ltYWwgZGlnaXQgKDAtOSwgQS1GKS48L3A+XHJcblx0ICpcclxuXHQgKiAgPHA+VGhpcyBVSUQgd2lsbCBub3QgYmUgdHJ1bHkgZ2xvYmFsbHkgdW5pcXVlOyBidXQgaXQgaXMgdGhlIGJlc3RcclxuXHQgKiAgd2UgY2FuIGRvIHdpdGhvdXQgcGxheWVyIHN1cHBvcnQgZm9yIFVJRCBnZW5lcmF0aW9uLjwvcD5cclxuXHQgKlxyXG5cdCAqICBAcmV0dXJuIFRoZSBuZXdseS1nZW5lcmF0ZWQgVUlELlxyXG5cdCAqXHJcblx0ICogIEBsYW5ndmVyc2lvbiAzLjBcclxuXHQgKiAgQHBsYXllcnZlcnNpb24gRmxhc2ggOVxyXG5cdCAqICBAcGxheWVydmVyc2lvbiBBSVIgMS4xXHJcblx0ICogIEBwcm9kdWN0dmVyc2lvbiBGbGV4IDNcclxuXHQgKi9cclxuXHRwdWJsaWMgc3RhdGljIGNyZWF0ZVVJRCgpOnN0cmluZ1xyXG5cdHtcclxuXHRcdHZhciB1aWQgPSBuZXcgQXJyYXkoMzYpO1xyXG5cdFx0dmFyIGluZGV4Om51bWJlciA9IDA7XHJcblxyXG5cdFx0dmFyIGk6bnVtYmVyO1xyXG5cdFx0dmFyIGo6bnVtYmVyO1xyXG5cclxuXHRcdGZvciAoaSA9IDA7IGkgPCA4OyBpKyspXHJcblx0XHRcdHVpZFtpbmRleCsrXSA9IElEVXRpbC5BTFBIQV9DSEFSX0NPREVTW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxNildO1xyXG5cclxuXHRcdGZvciAoaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuXHRcdFx0dWlkW2luZGV4KytdID0gNDU7IC8vIGNoYXJDb2RlIGZvciBcIi1cIlxyXG5cclxuXHRcdFx0Zm9yIChqID0gMDsgaiA8IDQ7IGorKylcclxuXHRcdFx0XHR1aWRbaW5kZXgrK10gPSBJRFV0aWwuQUxQSEFfQ0hBUl9DT0RFU1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTYpXTtcclxuXHRcdH1cclxuXHJcblx0XHR1aWRbaW5kZXgrK10gPSA0NTsgLy8gY2hhckNvZGUgZm9yIFwiLVwiXHJcblxyXG5cdFx0dmFyIHRpbWU6bnVtYmVyID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblx0XHQvLyBOb3RlOiB0aW1lIGlzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIDE5NzAsXHJcblx0XHQvLyB3aGljaCBpcyBjdXJyZW50bHkgbW9yZSB0aGFuIG9uZSB0cmlsbGlvbi5cclxuXHRcdC8vIFdlIHVzZSB0aGUgbG93IDggaGV4IGRpZ2l0cyBvZiB0aGlzIG51bWJlciBpbiB0aGUgVUlELlxyXG5cdFx0Ly8gSnVzdCBpbiBjYXNlIHRoZSBzeXN0ZW0gY2xvY2sgaGFzIGJlZW4gcmVzZXQgdG9cclxuXHRcdC8vIEphbiAxLTQsIDE5NzAgKGluIHdoaWNoIGNhc2UgdGhpcyBudW1iZXIgY291bGQgaGF2ZSBvbmx5XHJcblx0XHQvLyAxLTcgaGV4IGRpZ2l0cyksIHdlIHBhZCBvbiB0aGUgbGVmdCB3aXRoIDcgemVyb3NcclxuXHRcdC8vIGJlZm9yZSB0YWtpbmcgdGhlIGxvdyBkaWdpdHMuXHJcblx0XHR2YXIgdGltZVN0cmluZzpzdHJpbmcgPSAoXCIwMDAwMDAwXCIgKyB0aW1lLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKS5zdWJzdHIoLTgpO1xyXG5cclxuXHRcdGZvciAoaSA9IDA7IGkgPCA4OyBpKyspXHJcblx0XHRcdHVpZFtpbmRleCsrXSA9IHRpbWVTdHJpbmcuY2hhckNvZGVBdChpKTtcclxuXHJcblx0XHRmb3IgKGkgPSAwOyBpIDwgNDsgaSsrKVxyXG5cdFx0XHR1aWRbaW5kZXgrK10gPSBJRFV0aWwuQUxQSEFfQ0hBUl9DT0RFU1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTYpXTtcclxuXHJcblx0XHRyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCB1aWQpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmV0dXJucyB0aGUgZGVjaW1hbCByZXByZXNlbnRhdGlvbiBvZiBhIGhleCBkaWdpdC5cclxuXHQgKiBAcHJpdmF0ZVxyXG5cclxuXHQgcHJpdmF0ZSBzdGF0aWMgZ2V0RGlnaXQoaGV4OnN0cmluZyk6bnVtYmVyXHJcblx0IHtcclxuXHRcdHN3aXRjaCAoaGV4KSB7XHJcblx0XHRcdGNhc2UgXCJBXCI6XHJcblx0XHRcdGNhc2UgXCJhXCI6XHJcblx0XHRcdFx0cmV0dXJuIDEwO1xyXG5cdFx0XHRjYXNlIFwiQlwiOlxyXG5cdFx0XHRjYXNlIFwiYlwiOlxyXG5cdFx0XHRcdHJldHVybiAxMTtcclxuXHRcdFx0Y2FzZSBcIkNcIjpcclxuXHRcdFx0Y2FzZSBcImNcIjpcclxuXHRcdFx0XHRyZXR1cm4gMTI7XHJcblx0XHRcdGNhc2UgXCJEXCI6XHJcblx0XHRcdGNhc2UgXCJkXCI6XHJcblx0XHRcdFx0cmV0dXJuIDEzO1xyXG5cdFx0XHRjYXNlIFwiRVwiOlxyXG5cdFx0XHRjYXNlIFwiZVwiOlxyXG5cdFx0XHRcdHJldHVybiAxNDtcclxuXHRcdFx0Y2FzZSBcIkZcIjpcclxuXHRcdFx0Y2FzZSBcImZcIjpcclxuXHRcdFx0XHRyZXR1cm4gMTU7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0cmV0dXJuIG5ldyB1aW50KGhleCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdCAqL1xyXG5cclxufVxyXG5cclxuZXhwb3J0ID0gSURVdGlsOyJdfQ==