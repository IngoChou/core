var IDUtil = (function () {
    function IDUtil() {
    }
    /**
     *  Generates a UID (unique identifier) based on ActionScript's
     *  pseudo-random number generator and the current time.
     *
     *  <p>The UID has the form
     *  <code>"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"</code>
     *  where X is a hexadecimal digit (0-9, A-F).</p>
     *
     *  <p>This UID will not be truly globally unique; but it is the best
     *  we can do without player support for UID generation.</p>
     *
     *  @return The newly-generated UID.
     *
     *  @langversion 3.0
     *  @playerversion Flash 9
     *  @playerversion AIR 1.1
     *  @productversion Flex 3
     */
    IDUtil.createUID = function () {
        var uid = new Array(36);
        var index = 0;
        var i;
        var j;
        for (i = 0; i < 8; i++)
            uid[index++] = IDUtil.ALPHA_CHAR_CODES[Math.floor(Math.random() * 16)];
        for (i = 0; i < 3; i++) {
            uid[index++] = 45; // charCode for "-"
            for (j = 0; j < 4; j++)
                uid[index++] = IDUtil.ALPHA_CHAR_CODES[Math.floor(Math.random() * 16)];
        }
        uid[index++] = 45; // charCode for "-"
        var time = new Date().getTime();
        // Note: time is the number of milliseconds since 1970,
        // which is currently more than one trillion.
        // We use the low 8 hex digits of this number in the UID.
        // Just in case the system clock has been reset to
        // Jan 1-4, 1970 (in which case this number could have only
        // 1-7 hex digits), we pad on the left with 7 zeros
        // before taking the low digits.
        var timeString = ("0000000" + time.toString(16).toUpperCase()).substr(-8);
        for (i = 0; i < 8; i++)
            uid[index++] = timeString.charCodeAt(i);
        for (i = 0; i < 4; i++)
            uid[index++] = IDUtil.ALPHA_CHAR_CODES[Math.floor(Math.random() * 16)];
        return String.fromCharCode.apply(null, uid);
    };
    /**
     *  @private
     *  Char codes for 0123456789ABCDEF
     */
    IDUtil.ALPHA_CHAR_CODES = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70];
    return IDUtil;
})();
module.exports = IDUtil;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L2lkdXRpbC50cyJdLCJuYW1lcyI6WyJJRFV0aWwiLCJJRFV0aWwuY29uc3RydWN0b3IiLCJJRFV0aWwuY3JlYXRlVUlEIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNLE1BQU07SUFBWkEsU0FBTUEsTUFBTUE7SUFnR1pDLENBQUNBO0lBeEZBRDs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FpQkdBO0lBQ1dBLGdCQUFTQSxHQUF2QkE7UUFFQ0UsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsS0FBS0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDeEJBLElBQUlBLEtBQUtBLEdBQVVBLENBQUNBLENBQUNBO1FBRXJCQSxJQUFJQSxDQUFRQSxDQUFDQTtRQUNiQSxJQUFJQSxDQUFRQSxDQUFDQTtRQUViQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQTtZQUNyQkEsR0FBR0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxHQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUV0RUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7WUFDeEJBLEdBQUdBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBLEdBQUdBLEVBQUVBLEVBQUVBLG1CQUFtQkE7WUFFdENBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBO2dCQUNyQkEsR0FBR0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxHQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN2RUEsQ0FBQ0E7UUFFREEsR0FBR0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsR0FBR0EsRUFBRUEsRUFBRUEsbUJBQW1CQTtRQUV0Q0EsSUFBSUEsSUFBSUEsR0FBVUEsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDdkNBLEFBT0FBLHVEQVB1REE7UUFDdkRBLDZDQUE2Q0E7UUFDN0NBLHlEQUF5REE7UUFDekRBLGtEQUFrREE7UUFDbERBLDJEQUEyREE7UUFDM0RBLG1EQUFtREE7UUFDbkRBLGdDQUFnQ0E7WUFDNUJBLFVBQVVBLEdBQVVBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBRWpGQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQTtZQUNyQkEsR0FBR0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsR0FBR0EsVUFBVUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFekNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBO1lBQ3JCQSxHQUFHQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLEdBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBRXRFQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUM3Q0EsQ0FBQ0E7SUE3RERGOzs7T0FHR0E7SUFDWUEsdUJBQWdCQSxHQUFHQSxDQUFDQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtJQTBGcEdBLGFBQUNBO0FBQURBLENBaEdBLEFBZ0dDQSxJQUFBO0FBRUQsQUFBZ0IsaUJBQVAsTUFBTSxDQUFDIiwiZmlsZSI6ImxpYnJhcnkvSURVdGlsLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIElEVXRpbFxue1xuXHQvKipcblx0ICogIEBwcml2YXRlXG5cdCAqICBDaGFyIGNvZGVzIGZvciAwMTIzNDU2Nzg5QUJDREVGXG5cdCAqL1xuXHRwcml2YXRlIHN0YXRpYyBBTFBIQV9DSEFSX0NPREVTID0gWzQ4LCA0OSwgNTAsIDUxLCA1MiwgNTMsIDU0LCA1NSwgNTYsIDU3LCA2NSwgNjYsIDY3LCA2OCwgNjksIDcwXTtcblxuXHQvKipcblx0ICogIEdlbmVyYXRlcyBhIFVJRCAodW5pcXVlIGlkZW50aWZpZXIpIGJhc2VkIG9uIEFjdGlvblNjcmlwdCdzXG5cdCAqICBwc2V1ZG8tcmFuZG9tIG51bWJlciBnZW5lcmF0b3IgYW5kIHRoZSBjdXJyZW50IHRpbWUuXG5cdCAqXG5cdCAqICA8cD5UaGUgVUlEIGhhcyB0aGUgZm9ybVxuXHQgKiAgPGNvZGU+XCJYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcIjwvY29kZT5cblx0ICogIHdoZXJlIFggaXMgYSBoZXhhZGVjaW1hbCBkaWdpdCAoMC05LCBBLUYpLjwvcD5cblx0ICpcblx0ICogIDxwPlRoaXMgVUlEIHdpbGwgbm90IGJlIHRydWx5IGdsb2JhbGx5IHVuaXF1ZTsgYnV0IGl0IGlzIHRoZSBiZXN0XG5cdCAqICB3ZSBjYW4gZG8gd2l0aG91dCBwbGF5ZXIgc3VwcG9ydCBmb3IgVUlEIGdlbmVyYXRpb24uPC9wPlxuXHQgKlxuXHQgKiAgQHJldHVybiBUaGUgbmV3bHktZ2VuZXJhdGVkIFVJRC5cblx0ICpcblx0ICogIEBsYW5ndmVyc2lvbiAzLjBcblx0ICogIEBwbGF5ZXJ2ZXJzaW9uIEZsYXNoIDlcblx0ICogIEBwbGF5ZXJ2ZXJzaW9uIEFJUiAxLjFcblx0ICogIEBwcm9kdWN0dmVyc2lvbiBGbGV4IDNcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgY3JlYXRlVUlEKCk6c3RyaW5nXG5cdHtcblx0XHR2YXIgdWlkID0gbmV3IEFycmF5KDM2KTtcblx0XHR2YXIgaW5kZXg6bnVtYmVyID0gMDtcblxuXHRcdHZhciBpOm51bWJlcjtcblx0XHR2YXIgajpudW1iZXI7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgODsgaSsrKVxuXHRcdFx0dWlkW2luZGV4KytdID0gSURVdGlsLkFMUEhBX0NIQVJfQ09ERVNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjE2KV07XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG5cdFx0XHR1aWRbaW5kZXgrK10gPSA0NTsgLy8gY2hhckNvZGUgZm9yIFwiLVwiXG5cblx0XHRcdGZvciAoaiA9IDA7IGogPCA0OyBqKyspXG5cdFx0XHRcdHVpZFtpbmRleCsrXSA9IElEVXRpbC5BTFBIQV9DSEFSX0NPREVTW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxNildO1xuXHRcdH1cblxuXHRcdHVpZFtpbmRleCsrXSA9IDQ1OyAvLyBjaGFyQ29kZSBmb3IgXCItXCJcblxuXHRcdHZhciB0aW1lOm51bWJlciA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHRcdC8vIE5vdGU6IHRpbWUgaXMgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgMTk3MCxcblx0XHQvLyB3aGljaCBpcyBjdXJyZW50bHkgbW9yZSB0aGFuIG9uZSB0cmlsbGlvbi5cblx0XHQvLyBXZSB1c2UgdGhlIGxvdyA4IGhleCBkaWdpdHMgb2YgdGhpcyBudW1iZXIgaW4gdGhlIFVJRC5cblx0XHQvLyBKdXN0IGluIGNhc2UgdGhlIHN5c3RlbSBjbG9jayBoYXMgYmVlbiByZXNldCB0b1xuXHRcdC8vIEphbiAxLTQsIDE5NzAgKGluIHdoaWNoIGNhc2UgdGhpcyBudW1iZXIgY291bGQgaGF2ZSBvbmx5XG5cdFx0Ly8gMS03IGhleCBkaWdpdHMpLCB3ZSBwYWQgb24gdGhlIGxlZnQgd2l0aCA3IHplcm9zXG5cdFx0Ly8gYmVmb3JlIHRha2luZyB0aGUgbG93IGRpZ2l0cy5cblx0XHR2YXIgdGltZVN0cmluZzpzdHJpbmcgPSAoXCIwMDAwMDAwXCIgKyB0aW1lLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKS5zdWJzdHIoLTgpO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IDg7IGkrKylcblx0XHRcdHVpZFtpbmRleCsrXSA9IHRpbWVTdHJpbmcuY2hhckNvZGVBdChpKTtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCA0OyBpKyspXG5cdFx0XHR1aWRbaW5kZXgrK10gPSBJRFV0aWwuQUxQSEFfQ0hBUl9DT0RFU1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTYpXTtcblxuXHRcdHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHVpZCk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZGVjaW1hbCByZXByZXNlbnRhdGlvbiBvZiBhIGhleCBkaWdpdC5cblx0ICogQHByaXZhdGVcblxuXHQgcHJpdmF0ZSBzdGF0aWMgZ2V0RGlnaXQoaGV4OnN0cmluZyk6bnVtYmVyXG5cdCB7XG5cdFx0c3dpdGNoIChoZXgpIHtcblx0XHRcdGNhc2UgXCJBXCI6XG5cdFx0XHRjYXNlIFwiYVwiOlxuXHRcdFx0XHRyZXR1cm4gMTA7XG5cdFx0XHRjYXNlIFwiQlwiOlxuXHRcdFx0Y2FzZSBcImJcIjpcblx0XHRcdFx0cmV0dXJuIDExO1xuXHRcdFx0Y2FzZSBcIkNcIjpcblx0XHRcdGNhc2UgXCJjXCI6XG5cdFx0XHRcdHJldHVybiAxMjtcblx0XHRcdGNhc2UgXCJEXCI6XG5cdFx0XHRjYXNlIFwiZFwiOlxuXHRcdFx0XHRyZXR1cm4gMTM7XG5cdFx0XHRjYXNlIFwiRVwiOlxuXHRcdFx0Y2FzZSBcImVcIjpcblx0XHRcdFx0cmV0dXJuIDE0O1xuXHRcdFx0Y2FzZSBcIkZcIjpcblx0XHRcdGNhc2UgXCJmXCI6XG5cdFx0XHRcdHJldHVybiAxNTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBuZXcgdWludChoZXgpO1xuXHRcdH1cblx0fVxuXHQgKi9cblxufVxuXG5leHBvcnQgPSBJRFV0aWw7Il19