var ErrorConflictStrategy = require("awayjs-core/lib/library/ErrorConflictStrategy");
var IgnoreConflictStrategy = require("awayjs-core/lib/library/IgnoreConflictStrategy");
var NumSuffixConflictStrategy = require("awayjs-core/lib/library/NumSuffixConflictStrategy");
/**
 * Enumeration class for bundled conflict strategies. Set one of these values (or an
 * instance of a self-defined sub-class of ConflictStrategyBase) to the conflictStrategy
 * property on an AssetLibrary to define how that library resolves naming conflicts.
 *
 * The value of the <code>AssetLibrary.conflictPrecedence</code> property defines which
 * of the conflicting assets will get to keep it's name, and which is renamed (if any.)
 *
 * @see away.library.AssetLibrary.conflictStrategy
 * @see away.library.naming.ConflictStrategyBase
 */
var ConflictStrategy = (function () {
    function ConflictStrategy(include) {
        //TODO: find out why typescript d.ts files do not include this class
    }
    /**
     * Specifies that in case of a naming conflict, one of the assets will be renamed and
     * a numeric suffix appended to the base name.
     */
    ConflictStrategy.APPEND_NUM_SUFFIX = new NumSuffixConflictStrategy();
    /**
     * Specifies that naming conflicts should be ignored. This is not recommended in most
     * cases, unless it can be 100% guaranteed that the application does not cause naming
     * conflicts in the library (i.e. when an app-level system is in place to prevent this.)
     */
    ConflictStrategy.IGNORE = new IgnoreConflictStrategy();
    /**
     * Specifies that an error should be thrown if a naming conflict is discovered. Use this
     * to be 100% sure that naming conflicts never occur unnoticed, and when it's undesirable
     * to have the library automatically rename assets to avoid such conflicts.
     */
    ConflictStrategy.THROW_ERROR = new ErrorConflictStrategy();
    return ConflictStrategy;
})();
module.exports = ConflictStrategy;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L2NvbmZsaWN0c3RyYXRlZ3kudHMiXSwibmFtZXMiOlsiQ29uZmxpY3RTdHJhdGVneSIsIkNvbmZsaWN0U3RyYXRlZ3kuY29uc3RydWN0b3IiXSwibWFwcGluZ3MiOiJBQUNBLElBQU8scUJBQXFCLFdBQVksK0NBQStDLENBQUMsQ0FBQztBQUN6RixJQUFPLHNCQUFzQixXQUFZLGdEQUFnRCxDQUFDLENBQUM7QUFDM0YsSUFBTyx5QkFBeUIsV0FBVyxtREFBbUQsQ0FBQyxDQUFDO0FBRWhHLEFBV0E7Ozs7Ozs7Ozs7R0FERztJQUNHLGdCQUFnQjtJQXNCckJBLFNBdEJLQSxnQkFBZ0JBLENBc0JUQSxPQUE2QkE7UUFFeENDLG9FQUFvRUE7SUFDckVBLENBQUNBO0lBdkJERDs7O09BR0dBO0lBQ1dBLGtDQUFpQkEsR0FBd0JBLElBQUlBLHlCQUF5QkEsRUFBRUEsQ0FBQ0E7SUFFdkZBOzs7O09BSUdBO0lBQ1dBLHVCQUFNQSxHQUF3QkEsSUFBSUEsc0JBQXNCQSxFQUFFQSxDQUFDQTtJQUV6RUE7Ozs7T0FJR0E7SUFDV0EsNEJBQVdBLEdBQXdCQSxJQUFJQSxxQkFBcUJBLEVBQUVBLENBQUNBO0lBTTlFQSx1QkFBQ0E7QUFBREEsQ0ExQkEsQUEwQkNBLElBQUE7QUFFRCxBQUEwQixpQkFBakIsZ0JBQWdCLENBQUMiLCJmaWxlIjoibGlicmFyeS9Db25mbGljdFN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb25mbGljdFN0cmF0ZWd5QmFzZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0NvbmZsaWN0U3RyYXRlZ3lCYXNlXCIpO1xuaW1wb3J0IEVycm9yQ29uZmxpY3RTdHJhdGVneVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbGlicmFyeS9FcnJvckNvbmZsaWN0U3RyYXRlZ3lcIik7XG5pbXBvcnQgSWdub3JlQ29uZmxpY3RTdHJhdGVneVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbGlicmFyeS9JZ25vcmVDb25mbGljdFN0cmF0ZWd5XCIpO1xuaW1wb3J0IE51bVN1ZmZpeENvbmZsaWN0U3RyYXRlZ3lcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L051bVN1ZmZpeENvbmZsaWN0U3RyYXRlZ3lcIik7XG5cbi8qKlxuICogRW51bWVyYXRpb24gY2xhc3MgZm9yIGJ1bmRsZWQgY29uZmxpY3Qgc3RyYXRlZ2llcy4gU2V0IG9uZSBvZiB0aGVzZSB2YWx1ZXMgKG9yIGFuXG4gKiBpbnN0YW5jZSBvZiBhIHNlbGYtZGVmaW5lZCBzdWItY2xhc3Mgb2YgQ29uZmxpY3RTdHJhdGVneUJhc2UpIHRvIHRoZSBjb25mbGljdFN0cmF0ZWd5XG4gKiBwcm9wZXJ0eSBvbiBhbiBBc3NldExpYnJhcnkgdG8gZGVmaW5lIGhvdyB0aGF0IGxpYnJhcnkgcmVzb2x2ZXMgbmFtaW5nIGNvbmZsaWN0cy5cbiAqXG4gKiBUaGUgdmFsdWUgb2YgdGhlIDxjb2RlPkFzc2V0TGlicmFyeS5jb25mbGljdFByZWNlZGVuY2U8L2NvZGU+IHByb3BlcnR5IGRlZmluZXMgd2hpY2hcbiAqIG9mIHRoZSBjb25mbGljdGluZyBhc3NldHMgd2lsbCBnZXQgdG8ga2VlcCBpdCdzIG5hbWUsIGFuZCB3aGljaCBpcyByZW5hbWVkIChpZiBhbnkuKVxuICpcbiAqIEBzZWUgYXdheS5saWJyYXJ5LkFzc2V0TGlicmFyeS5jb25mbGljdFN0cmF0ZWd5XG4gKiBAc2VlIGF3YXkubGlicmFyeS5uYW1pbmcuQ29uZmxpY3RTdHJhdGVneUJhc2VcbiAqL1xuY2xhc3MgQ29uZmxpY3RTdHJhdGVneVxue1xuXHQvKipcblx0ICogU3BlY2lmaWVzIHRoYXQgaW4gY2FzZSBvZiBhIG5hbWluZyBjb25mbGljdCwgb25lIG9mIHRoZSBhc3NldHMgd2lsbCBiZSByZW5hbWVkIGFuZFxuXHQgKiBhIG51bWVyaWMgc3VmZml4IGFwcGVuZGVkIHRvIHRoZSBiYXNlIG5hbWUuXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIEFQUEVORF9OVU1fU1VGRklYOkNvbmZsaWN0U3RyYXRlZ3lCYXNlID0gbmV3IE51bVN1ZmZpeENvbmZsaWN0U3RyYXRlZ3koKTtcblxuXHQvKipcblx0ICogU3BlY2lmaWVzIHRoYXQgbmFtaW5nIGNvbmZsaWN0cyBzaG91bGQgYmUgaWdub3JlZC4gVGhpcyBpcyBub3QgcmVjb21tZW5kZWQgaW4gbW9zdFxuXHQgKiBjYXNlcywgdW5sZXNzIGl0IGNhbiBiZSAxMDAlIGd1YXJhbnRlZWQgdGhhdCB0aGUgYXBwbGljYXRpb24gZG9lcyBub3QgY2F1c2UgbmFtaW5nXG5cdCAqIGNvbmZsaWN0cyBpbiB0aGUgbGlicmFyeSAoaS5lLiB3aGVuIGFuIGFwcC1sZXZlbCBzeXN0ZW0gaXMgaW4gcGxhY2UgdG8gcHJldmVudCB0aGlzLilcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgSUdOT1JFOkNvbmZsaWN0U3RyYXRlZ3lCYXNlID0gbmV3IElnbm9yZUNvbmZsaWN0U3RyYXRlZ3koKTtcblxuXHQvKipcblx0ICogU3BlY2lmaWVzIHRoYXQgYW4gZXJyb3Igc2hvdWxkIGJlIHRocm93biBpZiBhIG5hbWluZyBjb25mbGljdCBpcyBkaXNjb3ZlcmVkLiBVc2UgdGhpc1xuXHQgKiB0byBiZSAxMDAlIHN1cmUgdGhhdCBuYW1pbmcgY29uZmxpY3RzIG5ldmVyIG9jY3VyIHVubm90aWNlZCwgYW5kIHdoZW4gaXQncyB1bmRlc2lyYWJsZVxuXHQgKiB0byBoYXZlIHRoZSBsaWJyYXJ5IGF1dG9tYXRpY2FsbHkgcmVuYW1lIGFzc2V0cyB0byBhdm9pZCBzdWNoIGNvbmZsaWN0cy5cblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgVEhST1dfRVJST1I6Q29uZmxpY3RTdHJhdGVneUJhc2UgPSBuZXcgRXJyb3JDb25mbGljdFN0cmF0ZWd5KCk7XG5cblx0Y29uc3RydWN0b3IoaW5jbHVkZT86Q29uZmxpY3RTdHJhdGVneUJhc2UpXG5cdHtcblx0XHQvL1RPRE86IGZpbmQgb3V0IHdoeSB0eXBlc2NyaXB0IGQudHMgZmlsZXMgZG8gbm90IGluY2x1ZGUgdGhpcyBjbGFzc1xuXHR9XG59XG5cbmV4cG9ydCA9IENvbmZsaWN0U3RyYXRlZ3k7Il19