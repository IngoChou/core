var ErrorConflictStrategy = require("awayjs-core/lib/library/ErrorConflictStrategy");
var IgnoreConflictStrategy = require("awayjs-core/lib/library/IgnoreConflictStrategy");
var NumSuffixConflictStrategy = require("awayjs-core/lib/library/NumSuffixConflictStrategy");
/**
 * Enumeration class for bundled conflict strategies. Set one of these values (or an
 * instance of a self-defined sub-class of ConflictStrategyBase) to the conflictStrategy
 * property on an AssetLibrary to define how that library resolves naming conflicts.
 *
 * The value of the <code>AssetLibrary.conflictPrecedence</code> property defines which
 * of the conflicting assets will get to keep it's name, and which is renamed (if any.)
 *
 * @see away.library.AssetLibrary.conflictStrategy
 * @see away.library.naming.ConflictStrategyBase
 */
var ConflictStrategy = (function () {
    function ConflictStrategy(include) {
        //TODO: find out why typescript d.ts files do not include this class
    }
    /**
     * Specifies that in case of a naming conflict, one of the assets will be renamed and
     * a numeric suffix appended to the base name.
     */
    ConflictStrategy.APPEND_NUM_SUFFIX = new NumSuffixConflictStrategy();
    /**
     * Specifies that naming conflicts should be ignored. This is not recommended in most
     * cases, unless it can be 100% guaranteed that the application does not cause naming
     * conflicts in the library (i.e. when an app-level system is in place to prevent this.)
     */
    ConflictStrategy.IGNORE = new IgnoreConflictStrategy();
    /**
     * Specifies that an error should be thrown if a naming conflict is discovered. Use this
     * to be 100% sure that naming conflicts never occur unnoticed, and when it's undesirable
     * to have the library automatically rename assets to avoid such conflicts.
     */
    ConflictStrategy.THROW_ERROR = new ErrorConflictStrategy();
    return ConflictStrategy;
})();
module.exports = ConflictStrategy;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0NvbmZsaWN0U3RyYXRlZ3kudHMiXSwibmFtZXMiOlsiQ29uZmxpY3RTdHJhdGVneSIsIkNvbmZsaWN0U3RyYXRlZ3kuY29uc3RydWN0b3IiXSwibWFwcGluZ3MiOiJBQUNBLElBQU8scUJBQXFCLFdBQVksK0NBQStDLENBQUMsQ0FBQztBQUN6RixJQUFPLHNCQUFzQixXQUFZLGdEQUFnRCxDQUFDLENBQUM7QUFDM0YsSUFBTyx5QkFBeUIsV0FBVyxtREFBbUQsQ0FBQyxDQUFDO0FBRWhHLEFBV0E7Ozs7Ozs7Ozs7R0FERztJQUNHLGdCQUFnQjtJQXNCckJBLFNBdEJLQSxnQkFBZ0JBLENBc0JUQSxPQUE2QkE7UUFFeENDLG9FQUFvRUE7SUFDckVBLENBQUNBO0lBdkJERDs7O09BR0dBO0lBQ1dBLGtDQUFpQkEsR0FBd0JBLElBQUlBLHlCQUF5QkEsRUFBRUEsQ0FBQ0E7SUFFdkZBOzs7O09BSUdBO0lBQ1dBLHVCQUFNQSxHQUF3QkEsSUFBSUEsc0JBQXNCQSxFQUFFQSxDQUFDQTtJQUV6RUE7Ozs7T0FJR0E7SUFDV0EsNEJBQVdBLEdBQXdCQSxJQUFJQSxxQkFBcUJBLEVBQUVBLENBQUNBO0lBTTlFQSx1QkFBQ0E7QUFBREEsQ0ExQkEsQUEwQkNBLElBQUE7QUFFRCxBQUEwQixpQkFBakIsZ0JBQWdCLENBQUMiLCJmaWxlIjoibGlicmFyeS9Db25mbGljdFN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb25mbGljdFN0cmF0ZWd5QmFzZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0NvbmZsaWN0U3RyYXRlZ3lCYXNlXCIpO1xyXG5pbXBvcnQgRXJyb3JDb25mbGljdFN0cmF0ZWd5XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0Vycm9yQ29uZmxpY3RTdHJhdGVneVwiKTtcclxuaW1wb3J0IElnbm9yZUNvbmZsaWN0U3RyYXRlZ3lcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2xpYnJhcnkvSWdub3JlQ29uZmxpY3RTdHJhdGVneVwiKTtcclxuaW1wb3J0IE51bVN1ZmZpeENvbmZsaWN0U3RyYXRlZ3lcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L051bVN1ZmZpeENvbmZsaWN0U3RyYXRlZ3lcIik7XHJcblxyXG4vKipcclxuICogRW51bWVyYXRpb24gY2xhc3MgZm9yIGJ1bmRsZWQgY29uZmxpY3Qgc3RyYXRlZ2llcy4gU2V0IG9uZSBvZiB0aGVzZSB2YWx1ZXMgKG9yIGFuXHJcbiAqIGluc3RhbmNlIG9mIGEgc2VsZi1kZWZpbmVkIHN1Yi1jbGFzcyBvZiBDb25mbGljdFN0cmF0ZWd5QmFzZSkgdG8gdGhlIGNvbmZsaWN0U3RyYXRlZ3lcclxuICogcHJvcGVydHkgb24gYW4gQXNzZXRMaWJyYXJ5IHRvIGRlZmluZSBob3cgdGhhdCBsaWJyYXJ5IHJlc29sdmVzIG5hbWluZyBjb25mbGljdHMuXHJcbiAqXHJcbiAqIFRoZSB2YWx1ZSBvZiB0aGUgPGNvZGU+QXNzZXRMaWJyYXJ5LmNvbmZsaWN0UHJlY2VkZW5jZTwvY29kZT4gcHJvcGVydHkgZGVmaW5lcyB3aGljaFxyXG4gKiBvZiB0aGUgY29uZmxpY3RpbmcgYXNzZXRzIHdpbGwgZ2V0IHRvIGtlZXAgaXQncyBuYW1lLCBhbmQgd2hpY2ggaXMgcmVuYW1lZCAoaWYgYW55LilcclxuICpcclxuICogQHNlZSBhd2F5LmxpYnJhcnkuQXNzZXRMaWJyYXJ5LmNvbmZsaWN0U3RyYXRlZ3lcclxuICogQHNlZSBhd2F5LmxpYnJhcnkubmFtaW5nLkNvbmZsaWN0U3RyYXRlZ3lCYXNlXHJcbiAqL1xyXG5jbGFzcyBDb25mbGljdFN0cmF0ZWd5XHJcbntcclxuXHQvKipcclxuXHQgKiBTcGVjaWZpZXMgdGhhdCBpbiBjYXNlIG9mIGEgbmFtaW5nIGNvbmZsaWN0LCBvbmUgb2YgdGhlIGFzc2V0cyB3aWxsIGJlIHJlbmFtZWQgYW5kXHJcblx0ICogYSBudW1lcmljIHN1ZmZpeCBhcHBlbmRlZCB0byB0aGUgYmFzZSBuYW1lLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBzdGF0aWMgQVBQRU5EX05VTV9TVUZGSVg6Q29uZmxpY3RTdHJhdGVneUJhc2UgPSBuZXcgTnVtU3VmZml4Q29uZmxpY3RTdHJhdGVneSgpO1xyXG5cclxuXHQvKipcclxuXHQgKiBTcGVjaWZpZXMgdGhhdCBuYW1pbmcgY29uZmxpY3RzIHNob3VsZCBiZSBpZ25vcmVkLiBUaGlzIGlzIG5vdCByZWNvbW1lbmRlZCBpbiBtb3N0XHJcblx0ICogY2FzZXMsIHVubGVzcyBpdCBjYW4gYmUgMTAwJSBndWFyYW50ZWVkIHRoYXQgdGhlIGFwcGxpY2F0aW9uIGRvZXMgbm90IGNhdXNlIG5hbWluZ1xyXG5cdCAqIGNvbmZsaWN0cyBpbiB0aGUgbGlicmFyeSAoaS5lLiB3aGVuIGFuIGFwcC1sZXZlbCBzeXN0ZW0gaXMgaW4gcGxhY2UgdG8gcHJldmVudCB0aGlzLilcclxuXHQgKi9cclxuXHRwdWJsaWMgc3RhdGljIElHTk9SRTpDb25mbGljdFN0cmF0ZWd5QmFzZSA9IG5ldyBJZ25vcmVDb25mbGljdFN0cmF0ZWd5KCk7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNwZWNpZmllcyB0aGF0IGFuIGVycm9yIHNob3VsZCBiZSB0aHJvd24gaWYgYSBuYW1pbmcgY29uZmxpY3QgaXMgZGlzY292ZXJlZC4gVXNlIHRoaXNcclxuXHQgKiB0byBiZSAxMDAlIHN1cmUgdGhhdCBuYW1pbmcgY29uZmxpY3RzIG5ldmVyIG9jY3VyIHVubm90aWNlZCwgYW5kIHdoZW4gaXQncyB1bmRlc2lyYWJsZVxyXG5cdCAqIHRvIGhhdmUgdGhlIGxpYnJhcnkgYXV0b21hdGljYWxseSByZW5hbWUgYXNzZXRzIHRvIGF2b2lkIHN1Y2ggY29uZmxpY3RzLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBzdGF0aWMgVEhST1dfRVJST1I6Q29uZmxpY3RTdHJhdGVneUJhc2UgPSBuZXcgRXJyb3JDb25mbGljdFN0cmF0ZWd5KCk7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGluY2x1ZGU/OkNvbmZsaWN0U3RyYXRlZ3lCYXNlKVxyXG5cdHtcclxuXHRcdC8vVE9ETzogZmluZCBvdXQgd2h5IHR5cGVzY3JpcHQgZC50cyBmaWxlcyBkbyBub3QgaW5jbHVkZSB0aGlzIGNsYXNzXHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBDb25mbGljdFN0cmF0ZWd5OyJdfQ==