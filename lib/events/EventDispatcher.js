/**
 * Base class for dispatching events
*
* @class away.events.EventDispatcher
*
*/
var EventDispatcher = (function () {
    function EventDispatcher(target) {
        if (target === void 0) { target = null; }
        this.listeners = new Array();
        this.target = target || this;
    }
    /**
     * Add an event listener
     * @method addEventListener
     * @param {String} Name of event to add a listener for
     * @param {Function} Callback function
     */
    EventDispatcher.prototype.addEventListener = function (type, listener) {
        if (this.listeners[type] === undefined)
            this.listeners[type] = new Array();
        if (this.getEventListenerIndex(type, listener) === -1)
            this.listeners[type].push(listener);
    };
    /**
     * Remove an event listener
     * @method removeEventListener
     * @param {String} Name of event to remove a listener for
     * @param {Function} Callback function
     */
    EventDispatcher.prototype.removeEventListener = function (type, listener) {
        var index = this.getEventListenerIndex(type, listener);
        if (index !== -1)
            this.listeners[type].splice(index, 1);
    };
    /**
     * Dispatch an event
     * @method dispatchEvent
     * @param {Event} Event to dispatch
     */
    EventDispatcher.prototype.dispatchEvent = function (event) {
        var listenerArray = this.listeners[event.type];
        if (listenerArray !== undefined) {
            var l = listenerArray.length;
            event.target = this.target;
            for (var i = 0; i < l; i++)
                listenerArray[i](event);
        }
    };
    /**
     * get Event Listener Index in array. Returns -1 if no listener is added
     * @method getEventListenerIndex
     * @param {String} Name of event to remove a listener for
     * @param {Function} Callback function
     */
    EventDispatcher.prototype.getEventListenerIndex = function (type, listener) {
        if (this.listeners[type] !== undefined) {
            var a = this.listeners[type];
            var l = a.length;
            for (var i = 0; i < l; i++)
                if (listener == a[i])
                    return i;
        }
        return -1;
    };
    /**
     * check if an object has an event listener assigned to it
     * @method hasListener
     * @param {String} Name of event to remove a listener for
     * @param {Function} Callback function
     */
    EventDispatcher.prototype.hasEventListener = function (type, listener) {
        if (listener != null) {
            return (this.getEventListenerIndex(type, listener) !== -1);
        }
        else {
            if (this.listeners[type] !== undefined)
                return (this.listeners[type].length > 0);
            return false;
        }
        return false;
    };
    return EventDispatcher;
})();
module.exports = EventDispatcher;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi9ldmVudHMvRXZlbnREaXNwYXRjaGVyLnRzIl0sIm5hbWVzIjpbIkV2ZW50RGlzcGF0Y2hlciIsIkV2ZW50RGlzcGF0Y2hlci5jb25zdHJ1Y3RvciIsIkV2ZW50RGlzcGF0Y2hlci5hZGRFdmVudExpc3RlbmVyIiwiRXZlbnREaXNwYXRjaGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIiLCJFdmVudERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudCIsIkV2ZW50RGlzcGF0Y2hlci5nZXRFdmVudExpc3RlbmVySW5kZXgiLCJFdmVudERpc3BhdGNoZXIuaGFzRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IkFBRUEsQUFNQTs7Ozs7RUFERTtJQUNJLGVBQWU7SUFLcEJBLFNBTEtBLGVBQWVBLENBS1JBLE1BQWlCQTtRQUFqQkMsc0JBQWlCQSxHQUFqQkEsYUFBaUJBO1FBSHJCQSxjQUFTQSxHQUEwQkEsSUFBSUEsS0FBS0EsRUFBbUJBLENBQUNBO1FBS3ZFQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxNQUFNQSxJQUFJQSxJQUFJQSxDQUFDQTtJQUM5QkEsQ0FBQ0E7SUFFREQ7Ozs7O09BS0dBO0lBQ0lBLDBDQUFnQkEsR0FBdkJBLFVBQXdCQSxJQUFXQSxFQUFFQSxRQUFpQkE7UUFFckRFLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUVBLElBQUlBLENBQUVBLEtBQUtBLFNBQVNBLENBQUNBO1lBQ3hDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFFQSxJQUFJQSxDQUFFQSxHQUFHQSxJQUFJQSxLQUFLQSxFQUFZQSxDQUFDQTtRQUVoREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxJQUFJQSxFQUFFQSxRQUFRQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNyREEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBRUEsSUFBSUEsQ0FBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFB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Q0E7UUFDZEEsQ0FBQ0E7UUFFREEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7SUFDZEEsQ0FBQ0E7SUFDRk4sc0JBQUNBO0FBQURBLENBakdBLEFBaUdDQSxJQUFBO0FBRUQsQUFBeUIsaUJBQWhCLGVBQWUsQ0FBQyIsImZpbGUiOiJldmVudHMvRXZlbnREaXNwYXRjaGVyLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdmVudFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9ldmVudHMvRXZlbnRcIik7XHJcblxyXG4vKipcclxuICogQmFzZSBjbGFzcyBmb3IgZGlzcGF0Y2hpbmcgZXZlbnRzXHJcbipcclxuKiBAY2xhc3MgYXdheS5ldmVudHMuRXZlbnREaXNwYXRjaGVyXHJcbipcclxuKi9cclxuY2xhc3MgRXZlbnREaXNwYXRjaGVyXHJcbntcclxuXHRwcml2YXRlIGxpc3RlbmVyczpBcnJheTxBcnJheTxGdW5jdGlvbj4+ID0gbmV3IEFycmF5PEFycmF5PEZ1bmN0aW9uPj4oKTtcclxuXHRwcml2YXRlIHRhcmdldDphbnk7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHRhcmdldDphbnkgPSBudWxsKVxyXG5cdHtcclxuXHRcdHRoaXMudGFyZ2V0ID0gdGFyZ2V0IHx8IHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXJcclxuXHQgKiBAbWV0aG9kIGFkZEV2ZW50TGlzdGVuZXJcclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gTmFtZSBvZiBldmVudCB0byBhZGQgYSBsaXN0ZW5lciBmb3JcclxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDYWxsYmFjayBmdW5jdGlvblxyXG5cdCAqL1xyXG5cdHB1YmxpYyBhZGRFdmVudExpc3RlbmVyKHR5cGU6c3RyaW5nLCBsaXN0ZW5lcjpGdW5jdGlvbilcclxuXHR7XHJcblx0XHRpZiAodGhpcy5saXN0ZW5lcnNbIHR5cGUgXSA9PT0gdW5kZWZpbmVkKVxyXG5cdFx0XHR0aGlzLmxpc3RlbmVyc1sgdHlwZSBdID0gbmV3IEFycmF5PEZ1bmN0aW9uPigpO1xyXG5cclxuXHRcdGlmICh0aGlzLmdldEV2ZW50TGlzdGVuZXJJbmRleCh0eXBlLCBsaXN0ZW5lcikgPT09IC0xKVxyXG5cdFx0XHR0aGlzLmxpc3RlbmVyc1sgdHlwZSBdLnB1c2gobGlzdGVuZXIpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmVtb3ZlIGFuIGV2ZW50IGxpc3RlbmVyXHJcblx0ICogQG1ldGhvZCByZW1vdmVFdmVudExpc3RlbmVyXHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IE5hbWUgb2YgZXZlbnQgdG8gcmVtb3ZlIGEgbGlzdGVuZXIgZm9yXHJcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gQ2FsbGJhY2sgZnVuY3Rpb25cclxuXHQgKi9cclxuXHRwdWJsaWMgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlOnN0cmluZywgbGlzdGVuZXI6RnVuY3Rpb24pXHJcblx0e1xyXG5cdFx0dmFyIGluZGV4Om51bWJlciA9IHRoaXMuZ2V0RXZlbnRMaXN0ZW5lckluZGV4KHR5cGUsIGxpc3RlbmVyKTtcclxuXHJcblx0XHRpZiAoaW5kZXggIT09IC0xKVxyXG5cdFx0XHR0aGlzLmxpc3RlbmVyc1sgdHlwZSBdLnNwbGljZShpbmRleCwgMSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBEaXNwYXRjaCBhbiBldmVudFxyXG5cdCAqIEBtZXRob2QgZGlzcGF0Y2hFdmVudFxyXG5cdCAqIEBwYXJhbSB7RXZlbnR9IEV2ZW50IHRvIGRpc3BhdGNoXHJcblx0ICovXHJcblx0cHVibGljIGRpc3BhdGNoRXZlbnQoZXZlbnQ6RXZlbnQpXHJcblx0e1xyXG5cdFx0dmFyIGxpc3RlbmVyQXJyYXk6QXJyYXk8RnVuY3Rpb24+ID0gdGhpcy5saXN0ZW5lcnNbIGV2ZW50LnR5cGUgXTtcclxuXHJcblx0XHRpZiAobGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHZhciBsOm51bWJlciA9IGxpc3RlbmVyQXJyYXkubGVuZ3RoO1xyXG5cclxuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gdGhpcy50YXJnZXQ7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCBsOyBpKyspXHJcblx0XHRcdFx0bGlzdGVuZXJBcnJheVtpXShldmVudCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBnZXQgRXZlbnQgTGlzdGVuZXIgSW5kZXggaW4gYXJyYXkuIFJldHVybnMgLTEgaWYgbm8gbGlzdGVuZXIgaXMgYWRkZWRcclxuXHQgKiBAbWV0aG9kIGdldEV2ZW50TGlzdGVuZXJJbmRleFxyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBOYW1lIG9mIGV2ZW50IHRvIHJlbW92ZSBhIGxpc3RlbmVyIGZvclxyXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IENhbGxiYWNrIGZ1bmN0aW9uXHJcblx0ICovXHJcblx0cHJpdmF0ZSBnZXRFdmVudExpc3RlbmVySW5kZXgodHlwZTpzdHJpbmcsIGxpc3RlbmVyOkZ1bmN0aW9uKTpudW1iZXJcclxuXHR7XHJcblx0XHRpZiAodGhpcy5saXN0ZW5lcnNbIHR5cGUgXSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHZhciBhOkFycmF5PEZ1bmN0aW9uPiA9IHRoaXMubGlzdGVuZXJzWyB0eXBlIF07XHJcblx0XHRcdHZhciBsOm51bWJlciA9IGEubGVuZ3RoO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaTpudW1iZXIgPSAwOyBpIDwgbDsgaSsrKVxyXG5cdFx0XHRcdGlmIChsaXN0ZW5lciA9PSBhW2ldKVxyXG5cdFx0XHRcdFx0cmV0dXJuIGk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIC0xO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogY2hlY2sgaWYgYW4gb2JqZWN0IGhhcyBhbiBldmVudCBsaXN0ZW5lciBhc3NpZ25lZCB0byBpdFxyXG5cdCAqIEBtZXRob2QgaGFzTGlzdGVuZXJcclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gTmFtZSBvZiBldmVudCB0byByZW1vdmUgYSBsaXN0ZW5lciBmb3JcclxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDYWxsYmFjayBmdW5jdGlvblxyXG5cdCAqL1xyXG5cdHB1YmxpYyBoYXNFdmVudExpc3RlbmVyKHR5cGU6c3RyaW5nLCBsaXN0ZW5lcj86RnVuY3Rpb24pOmJvb2xlYW5cclxuXHR7XHJcblx0XHRpZiAobGlzdGVuZXIgIT0gbnVsbCkge1xyXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldEV2ZW50TGlzdGVuZXJJbmRleCh0eXBlLCBsaXN0ZW5lcikgIT09IC0xICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAodGhpcy5saXN0ZW5lcnNbIHR5cGUgXSAhPT0gdW5kZWZpbmVkKVxyXG5cdFx0XHRcdHJldHVybiAoIHRoaXMubGlzdGVuZXJzWyB0eXBlIF0ubGVuZ3RoID4gMCApO1xyXG5cclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IEV2ZW50RGlzcGF0Y2hlcjsiXX0=