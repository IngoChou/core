var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Event = require("awayjs-core/lib/events/Event");

/**
* A MouseEvent is dispatched when a mouse event occurs over a mouseEnabled object in View.
* TODO: we don't have screenZ data, tho this should be easy to implement
*/
var MouseEvent = (function (_super) {
    __extends(MouseEvent, _super);
    /**
    * Create a new MouseEvent object.
    * @param type The type of the MouseEvent.
    */
    function MouseEvent(type) {
        _super.call(this, type);
        // Private.
        this._iAllowedToPropagate = true;
    }
    Object.defineProperty(MouseEvent.prototype, "bubbles", {
        /**
        * @inheritDoc
        */
        get: function () {
            var doesBubble = this._iAllowedToPropagate;
            this._iAllowedToPropagate = true;

            // Don't bubble if propagation has been stopped.
            return doesBubble;
        },
        enumerable: true,
        configurable: true
    });

    /**
    * @inheritDoc
    */
    MouseEvent.prototype.stopPropagation = function () {
        this._iAllowedToPropagate = false;

        if (this._iParentEvent)
            this._iParentEvent.stopPropagation();
    };

    /**
    * @inheritDoc
    */
    MouseEvent.prototype.stopImmediatePropagation = function () {
        this._iAllowedToPropagate = false;

        if (this._iParentEvent)
            this._iParentEvent.stopImmediatePropagation();
    };

    /**
    * Creates a copy of the MouseEvent object and sets the value of each property to match that of the original.
    */
    MouseEvent.prototype.clone = function () {
        var result = new MouseEvent(this.type);

        /* TODO: Debug / test - look into isDefaultPrevented
        if (isDefaultPrevented())
        result.preventDefault();
        */
        result.screenX = this.screenX;
        result.screenY = this.screenY;

        result.view = this.view;
        result.object = this.object;
        result.materialOwner = this.materialOwner;
        result.material = this.material;
        result.uv = this.uv;
        result.localPosition = this.localPosition;
        result.localNormal = this.localNormal;
        result.index = this.index;
        result.subGeometryIndex = this.subGeometryIndex;
        result.delta = this.delta;

        result.ctrlKey = this.ctrlKey;
        result.shiftKey = this.shiftKey;

        result._iParentEvent = this;
        result._iAllowedToPropagate = this._iAllowedToPropagate;

        return result;
    };

    Object.defineProperty(MouseEvent.prototype, "scenePosition", {
        /**
        * The position in scene space where the event took place
        */
        get: function () {
            return this.object.sceneTransform.transformVector(this.localPosition);
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(MouseEvent.prototype, "sceneNormal", {
        /**
        * The normal in scene space where the event took place
        */
        get: function () {
            var sceneNormal = this.object.sceneTransform.deltaTransformVector(this.localNormal);
            sceneNormal.normalize();

            return sceneNormal;
        },
        enumerable: true,
        configurable: true
    });
    MouseEvent.MOUSE_OVER = "mouseOver3d";

    MouseEvent.MOUSE_OUT = "mouseOut3d";

    MouseEvent.MOUSE_UP = "mouseUp3d";

    MouseEvent.MOUSE_DOWN = "mouseDown3d";

    MouseEvent.MOUSE_MOVE = "mouseMove3d";

    MouseEvent.CLICK = "click3d";

    MouseEvent.DOUBLE_CLICK = "doubleClick3d";

    MouseEvent.MOUSE_WHEEL = "mouseWheel3d";
    return MouseEvent;
})(Event);

module.exports = MouseEvent;

//# sourceMappingURL=data:application/json;base64,