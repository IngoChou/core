var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var LookAtController = require("awayjs-core/lib/controllers/LookAtController");

var Vector3D = require("awayjs-core/lib/core/geom/Vector3D");

/**
* Uses spring physics to animate the target object towards a position that is
* defined as the lookAtTarget object's position plus the vector defined by the
* positionOffset property.
*/
var SpringController = (function (_super) {
    __extends(SpringController, _super);
    function SpringController(targetObject, lookAtObject, stiffness, mass, damping) {
        if (typeof targetObject === "undefined") { targetObject = null; }
        if (typeof lookAtObject === "undefined") { lookAtObject = null; }
        if (typeof stiffness === "undefined") { stiffness = 1; }
        if (typeof mass === "undefined") { mass = 40; }
        if (typeof damping === "undefined") { damping = 4; }
        _super.call(this, targetObject, lookAtObject);
        /**
        * Offset of spring center from target in target object space, ie: Where the camera should ideally be in the target object space.
        */
        this.positionOffset = new Vector3D(0, 500, -1000);

        this.stiffness = stiffness;
        this.damping = damping;
        this.mass = mass;

        this._velocity = new Vector3D();
        this._dv = new Vector3D();
        this._stretch = new Vector3D();
        this._force = new Vector3D();
        this._acceleration = new Vector3D();
        this._desiredPosition = new Vector3D();
    }
    SpringController.prototype.update = function (interpolate) {
        if (typeof interpolate === "undefined") { interpolate = true; }
        var offs;

        if (!this._pLookAtObject || !this._pTargetObject)
            return;

        offs = this._pLookAtObject.transform.matrix3D.deltaTransformVector(this.positionOffset);
        this._desiredPosition.x = this._pLookAtObject.x + offs.x;
        this._desiredPosition.y = this._pLookAtObject.y + offs.y;
        this._desiredPosition.z = this._pLookAtObject.z + offs.z;

        this._stretch = this._pTargetObject.transform.position.add(this._desiredPosition);
        this._stretch.scaleBy(-this.stiffness);

        this._dv.copyFrom(this._velocity);
        this._dv.scaleBy(this.damping);

        this._force.x = this._stretch.x - this._dv.x;
        this._force.y = this._stretch.y - this._dv.y;
        this._force.z = this._stretch.z - this._dv.z;

        this._acceleration.copyFrom(this._force);
        this._acceleration.scaleBy(1 / this.mass);

        this._velocity.incrementBy(this._acceleration);

        this._pTargetObject.transform.position = this._pTargetObject.transform.position.add(this._velocity);

        _super.prototype.update.call(this);
    };
    return SpringController;
})(LookAtController);

module.exports = SpringController;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL1NwcmluZ0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOlsiU3ByaW5nQ29udHJvbGxlciIsIlNwcmluZ0NvbnRyb2xsZXIuY29uc3RydWN0b3IiLCJTcHJpbmdDb250cm9sbGVyLnVwZGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsOEVBQW9GOztBQUVwRiw0REFBb0U7O0FBRXBFOzs7O0VBSUc7QUFDSDtJQUErQkEsbUNBQWdCQTtJQStCOUNBLDBCQUFZQSxZQUFpQ0EsRUFBRUEsWUFBaUNBLEVBQUVBLFNBQW9CQSxFQUFFQSxJQUFnQkEsRUFBRUEsT0FBa0JBO1FBQWhJQywyQ0FBQUEsWUFBWUEsR0FBaUJBLElBQUlBO0FBQUFBLFFBQUVBLDJDQUFBQSxZQUFZQSxHQUFpQkEsSUFBSUE7QUFBQUEsUUFBRUEsd0NBQUFBLFNBQVNBLEdBQVVBLENBQUNBO0FBQUFBLFFBQUVBLG1DQUFBQSxJQUFJQSxHQUFVQSxFQUFFQTtBQUFBQSxRQUFFQSxzQ0FBQUEsT0FBT0EsR0FBVUEsQ0FBQ0E7QUFBQUEsUUFFM0lBLFdBQU1BLE9BQUFBLFlBQVlBLEVBQUVBLFlBQVlBLENBQUNBO1FBUGxDQTs7VUFFR0E7UUFDSEEsS0FBT0EsY0FBY0EsR0FBWUEsSUFBSUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7O1FBTTVEQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxTQUFTQTtRQUMxQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsT0FBT0E7UUFDdEJBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBOztRQUVoQkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLElBQUlBLENBQUNBLEdBQUdBLEdBQUdBLElBQUlBLFFBQVFBLENBQUNBLENBQUNBO1FBQ3pCQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUM5QkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFDNUJBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLElBQUlBLFFBQVFBLENBQUNBLENBQUNBO1FBQ25DQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLElBQUlBLFFBQVFBLENBQUNBLENBQUNBO0lBRXZDQSxDQUFDQTtJQUVERCxvQ0FBQUEsVUFBY0EsV0FBMEJBO1FBQTFCRSwwQ0FBQUEsV0FBV0EsR0FBV0EsSUFBSUE7QUFBQUEsUUFFdkNBLElBQUlBLElBQUlBOztRQUVSQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQTtZQUMvQ0EsTUFBT0EsQ0FBQUE7O1FBRVJBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFNBQVNBLENBQUNBLFFBQVFBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0E7UUFDdkZBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDeERBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDeERBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7O1FBRXhEQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBO1FBQ2pGQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTs7UUFFdENBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO1FBQ2pDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQTs7UUFFOUJBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQzVDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUM1Q0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7O1FBRTVDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUN4Q0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7O1FBRXZDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQTs7UUFFOUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFNBQVNBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFNBQVNBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBOztRQUVuR0EsZ0JBQUtBLENBQUNBLE1BQU1BLEtBQUNBLEtBQUFBLENBQUNBO0lBQ2ZBLENBQUNBO0lBQ0ZGLHdCQUFDQTtBQUFEQSxDQUFDQSxFQS9FOEIsZ0JBQWdCLEVBK0U5Qzs7QUFFRCxpQ0FBMEIsQ0FBQSIsImZpbGUiOiJjb250cm9sbGVycy9TcHJpbmdDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9yb2JiYXRlbWFuL1dlYnN0b3JtUHJvamVjdHMvYXdheWpzLWNvcmUvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExvb2tBdENvbnRyb2xsZXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29udHJvbGxlcnMvTG9va0F0Q29udHJvbGxlclwiKTtcbmltcG9ydCBEaXNwbGF5T2JqZWN0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2NvcmUvYmFzZS9EaXNwbGF5T2JqZWN0XCIpO1xuaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2dlb20vVmVjdG9yM0RcIik7XG5cbi8qKlxuICogVXNlcyBzcHJpbmcgcGh5c2ljcyB0byBhbmltYXRlIHRoZSB0YXJnZXQgb2JqZWN0IHRvd2FyZHMgYSBwb3NpdGlvbiB0aGF0IGlzXG4gKiBkZWZpbmVkIGFzIHRoZSBsb29rQXRUYXJnZXQgb2JqZWN0J3MgcG9zaXRpb24gcGx1cyB0aGUgdmVjdG9yIGRlZmluZWQgYnkgdGhlXG4gKiBwb3NpdGlvbk9mZnNldCBwcm9wZXJ0eS5cbiAqL1xuY2xhc3MgU3ByaW5nQ29udHJvbGxlciBleHRlbmRzIExvb2tBdENvbnRyb2xsZXJcbntcblx0cHJpdmF0ZSBfdmVsb2NpdHk6VmVjdG9yM0Q7XG5cdHByaXZhdGUgX2R2OlZlY3RvcjNEO1xuXHRwcml2YXRlIF9zdHJldGNoOlZlY3RvcjNEO1xuXHRwcml2YXRlIF9mb3JjZTpWZWN0b3IzRDtcblx0cHJpdmF0ZSBfYWNjZWxlcmF0aW9uOlZlY3RvcjNEO1xuXHRwcml2YXRlIF9kZXNpcmVkUG9zaXRpb246VmVjdG9yM0Q7XG5cblx0LyoqXG5cdCAqIFN0aWZmbmVzcyBvZiB0aGUgc3ByaW5nLCBob3cgaGFyZCBpcyBpdCB0byBleHRlbmQuIFRoZSBoaWdoZXIgaXQgaXMsIHRoZSBtb3JlIFwiZml4ZWRcIiB0aGUgY2FtIHdpbGwgYmUuXG5cdCAqIEEgbnVtYmVyIGJldHdlZW4gMSBhbmQgMjAgaXMgcmVjb21tZW5kZWQuXG5cdCAqL1xuXHRwdWJsaWMgc3RpZmZuZXNzOm51bWJlcjtcblxuXHQvKipcblx0ICogRGFtcGluZyBpcyB0aGUgc3ByaW5nIGludGVybmFsIGZyaWN0aW9uLCBvciBob3cgbXVjaCBpdCByZXNpc3RzIHRoZSBcImJvaW5nZ2dnZ1wiIGVmZmVjdC4gVG9vIGhpZ2ggYW5kIHlvdSdsbCBsb3NlIGl0IVxuXHQgKiBBIG51bWJlciBiZXR3ZWVuIDEgYW5kIDIwIGlzIHJlY29tbWVuZGVkLlxuXHQgKi9cblx0cHVibGljIGRhbXBpbmc6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBNYXNzIG9mIHRoZSBjYW1lcmEsIGlmIG92ZXIgMTIwIGFuZCBpdCdsbCBiZSB2ZXJ5IGhlYXZ5IHRvIG1vdmUuXG5cdCAqL1xuXHRwdWJsaWMgbWFzczpudW1iZXI7XG5cblx0LyoqXG5cdCAqIE9mZnNldCBvZiBzcHJpbmcgY2VudGVyIGZyb20gdGFyZ2V0IGluIHRhcmdldCBvYmplY3Qgc3BhY2UsIGllOiBXaGVyZSB0aGUgY2FtZXJhIHNob3VsZCBpZGVhbGx5IGJlIGluIHRoZSB0YXJnZXQgb2JqZWN0IHNwYWNlLlxuXHQgKi9cblx0cHVibGljIHBvc2l0aW9uT2Zmc2V0OlZlY3RvcjNEID0gbmV3IFZlY3RvcjNEKDAsIDUwMCwgLTEwMDApO1xuXG5cdGNvbnN0cnVjdG9yKHRhcmdldE9iamVjdDpEaXNwbGF5T2JqZWN0ID0gbnVsbCwgbG9va0F0T2JqZWN0OkRpc3BsYXlPYmplY3QgPSBudWxsLCBzdGlmZm5lc3M6bnVtYmVyID0gMSwgbWFzczpudW1iZXIgPSA0MCwgZGFtcGluZzpudW1iZXIgPSA0KVxuXHR7XG5cdFx0c3VwZXIodGFyZ2V0T2JqZWN0LCBsb29rQXRPYmplY3QpO1xuXG5cdFx0dGhpcy5zdGlmZm5lc3MgPSBzdGlmZm5lc3M7XG5cdFx0dGhpcy5kYW1waW5nID0gZGFtcGluZztcblx0XHR0aGlzLm1hc3MgPSBtYXNzO1xuXG5cdFx0dGhpcy5fdmVsb2NpdHkgPSBuZXcgVmVjdG9yM0QoKTtcblx0XHR0aGlzLl9kdiA9IG5ldyBWZWN0b3IzRCgpO1xuXHRcdHRoaXMuX3N0cmV0Y2ggPSBuZXcgVmVjdG9yM0QoKTtcblx0XHR0aGlzLl9mb3JjZSA9IG5ldyBWZWN0b3IzRCgpO1xuXHRcdHRoaXMuX2FjY2VsZXJhdGlvbiA9IG5ldyBWZWN0b3IzRCgpO1xuXHRcdHRoaXMuX2Rlc2lyZWRQb3NpdGlvbiA9IG5ldyBWZWN0b3IzRCgpO1xuXG5cdH1cblxuXHRwdWJsaWMgdXBkYXRlKGludGVycG9sYXRlOmJvb2xlYW4gPSB0cnVlKVxuXHR7XG5cdFx0dmFyIG9mZnM6VmVjdG9yM0Q7XG5cblx0XHRpZiAoIXRoaXMuX3BMb29rQXRPYmplY3QgfHwgIXRoaXMuX3BUYXJnZXRPYmplY3QpXG5cdFx0XHRyZXR1cm47XG5cblx0XHRvZmZzID0gdGhpcy5fcExvb2tBdE9iamVjdC50cmFuc2Zvcm0ubWF0cml4M0QuZGVsdGFUcmFuc2Zvcm1WZWN0b3IodGhpcy5wb3NpdGlvbk9mZnNldCk7XG5cdFx0dGhpcy5fZGVzaXJlZFBvc2l0aW9uLnggPSB0aGlzLl9wTG9va0F0T2JqZWN0LnggKyBvZmZzLng7XG5cdFx0dGhpcy5fZGVzaXJlZFBvc2l0aW9uLnkgPSB0aGlzLl9wTG9va0F0T2JqZWN0LnkgKyBvZmZzLnk7XG5cdFx0dGhpcy5fZGVzaXJlZFBvc2l0aW9uLnogPSB0aGlzLl9wTG9va0F0T2JqZWN0LnogKyBvZmZzLno7XG5cblx0XHR0aGlzLl9zdHJldGNoID0gdGhpcy5fcFRhcmdldE9iamVjdC50cmFuc2Zvcm0ucG9zaXRpb24uYWRkKHRoaXMuX2Rlc2lyZWRQb3NpdGlvbik7XG5cdFx0dGhpcy5fc3RyZXRjaC5zY2FsZUJ5KC10aGlzLnN0aWZmbmVzcyk7XG5cblx0XHR0aGlzLl9kdi5jb3B5RnJvbSh0aGlzLl92ZWxvY2l0eSk7XG5cdFx0dGhpcy5fZHYuc2NhbGVCeSh0aGlzLmRhbXBpbmcpO1xuXG5cdFx0dGhpcy5fZm9yY2UueCA9IHRoaXMuX3N0cmV0Y2gueCAtIHRoaXMuX2R2Lng7XG5cdFx0dGhpcy5fZm9yY2UueSA9IHRoaXMuX3N0cmV0Y2gueSAtIHRoaXMuX2R2Lnk7XG5cdFx0dGhpcy5fZm9yY2UueiA9IHRoaXMuX3N0cmV0Y2gueiAtIHRoaXMuX2R2Lno7XG5cblx0XHR0aGlzLl9hY2NlbGVyYXRpb24uY29weUZyb20odGhpcy5fZm9yY2UpO1xuXHRcdHRoaXMuX2FjY2VsZXJhdGlvbi5zY2FsZUJ5KDEvdGhpcy5tYXNzKTtcblxuXHRcdHRoaXMuX3ZlbG9jaXR5LmluY3JlbWVudEJ5KHRoaXMuX2FjY2VsZXJhdGlvbik7XG5cblx0XHR0aGlzLl9wVGFyZ2V0T2JqZWN0LnRyYW5zZm9ybS5wb3NpdGlvbiA9IHRoaXMuX3BUYXJnZXRPYmplY3QudHJhbnNmb3JtLnBvc2l0aW9uLmFkZCh0aGlzLl92ZWxvY2l0eSk7XG5cblx0XHRzdXBlci51cGRhdGUoKTtcblx0fVxufVxuXG5leHBvcnQgPSBTcHJpbmdDb250cm9sbGVyOyJdfQ==