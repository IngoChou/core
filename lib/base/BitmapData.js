var Rectangle = require("awayjs-core/lib/geom/Rectangle");
var ColorUtils = require("awayjs-core/lib/utils/ColorUtils");
/**
 *
 */
var BitmapData = (function () {
    /**
     *
     * @param width
     * @param height
     * @param transparent
     * @param fillColor
     */
    function BitmapData(width, height, transparent, fillColor) {
        if (transparent === void 0) { transparent = true; }
        if (fillColor === void 0) { fillColor = null; }
        this._alpha = 0;
        this._locked = false;
        this._transparent = transparent;
        this._imageCanvas = document.createElement("canvas");
        this._imageCanvas.width = width;
        this._imageCanvas.height = height;
        this._context = this._imageCanvas.getContext("2d");
        this._rect = new Rectangle(0, 0, width, height);
        if (fillColor != null) {
            if (this._transparent) {
                this._alpha = ColorUtils.float32ColorToARGB(fillColor)[0] / 255;
            }
            else {
                this._alpha = 1;
            }
            this.fillRect(this._rect, fillColor);
        }
    }
    Object.defineProperty(BitmapData.prototype, "transparent", {
        get: function () {
            return this._transparent;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     */
    BitmapData.prototype.dispose = function () {
        this._context = null;
        this._imageCanvas = null;
        this._imageData = null;
        this._rect = null;
        this._transparent = null;
        this._locked = null;
    };
    /**
     *
     */
    BitmapData.prototype.lock = function () {
        this._locked = true;
        this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
    };
    /**
     *
     */
    BitmapData.prototype.unlock = function () {
        this._locked = false;
        if (this._imageData) {
            this._context.putImageData(this._imageData, 0, 0); // at coords 0,0
            this._imageData = null;
        }
    };
    /**
     *
     * @param x
     * @param y
     * @param color
     */
    BitmapData.prototype.getPixel = function (x, y) {
        var r;
        var g;
        var b;
        var a;
        if (!this._locked) {
            var pixelData = this._context.getImageData(x, y, 1, 1);
            r = pixelData.data[0];
            g = pixelData.data[1];
            b = pixelData.data[2];
            a = pixelData.data[3];
        }
        else {
            var index = (x + y * this._imageCanvas.width) * 4;
            if (!this._imageData)
                this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
            r = this._imageData.data[index + 0];
            g = this._imageData.data[index + 1];
            b = this._imageData.data[index + 2];
            a = this._imageData.data[index + 3];
        }
        if (!this._locked) {
            this._imageData = null;
        }
        return (a << 24) | (r << 16) | (g << 8) | b;
    };
    /**
     *
     * @param x
     * @param y
     * @param color
     */
    BitmapData.prototype.setPixel = function (x, y, color) {
        var argb = ColorUtils.float32ColorToARGB(color);
        if (!this._locked)
            this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        if (this._imageData) {
            var index = (x + y * this._imageCanvas.width) * 4;
            this._imageData.data[index + 0] = argb[1];
            this._imageData.data[index + 1] = argb[2];
            this._imageData.data[index + 2] = argb[3];
            this._imageData.data[index + 3] = 255;
        }
        if (!this._locked) {
            this._context.putImageData(this._imageData, 0, 0);
            this._imageData = null;
        }
    };
    /**
     *
     * @param rect
     * @param inputByteArray
     */
    BitmapData.prototype.setPixels = function (rect, inputByteArray) {
        if (!this._locked)
            this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        if (this._imageData) {
            inputByteArray.position = 0;
            var i /*uint*/, j /*uint*/, index /*uint*/;
            for (i = 0; i < rect.width; ++i) {
                for (j = 0; j < rect.height; ++j) {
                    index = (i + rect.x + (j + rect.y) * this._imageCanvas.width) * 4;
                    this._imageData.data[index + 0] = inputByteArray.readUnsignedInt();
                    this._imageData.data[index + 1] = inputByteArray.readUnsignedInt();
                    this._imageData.data[index + 2] = inputByteArray.readUnsignedInt();
                    this._imageData.data[index + 3] = inputByteArray.readUnsignedInt();
                }
            }
        }
        if (!this._locked) {
            this._context.putImageData(this._imageData, 0, 0);
            this._imageData = null;
        }
    };
    /**
     *
     * @param x
     * @param y
     * @param color
     */
    BitmapData.prototype.setPixel32 = function (x, y, color) {
        var argb = ColorUtils.float32ColorToARGB(color);
        if (!this._locked)
            this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        if (this._imageData) {
            var index = (x + y * this._imageCanvas.width) * 4;
            this._imageData.data[index + 0] = argb[1];
            this._imageData.data[index + 1] = argb[2];
            this._imageData.data[index + 2] = argb[3];
            this._imageData.data[index + 3] = argb[0];
        }
        if (!this._locked) {
            this._context.putImageData(this._imageData, 0, 0);
            this._imageData = null;
        }
    };
    BitmapData.prototype.setVector = function (rect, inputVector) {
        if (!this._locked)
            this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        if (this._imageData) {
            var i /*uint*/, j /*uint*/, index /*uint*/, argb /*uint*/;
            for (i = 0; i < rect.width; ++i) {
                for (j = 0; j < rect.height; ++j) {
                    argb = ColorUtils.float32ColorToARGB(inputVector[i + j * rect.width]);
                    index = (i + rect.x + (j + rect.y) * this._imageCanvas.width) * 4;
                    this._imageData.data[index + 0] = argb[1];
                    this._imageData.data[index + 1] = argb[2];
                    this._imageData.data[index + 2] = argb[3];
                    this._imageData.data[index + 3] = argb[0];
                }
            }
        }
        if (!this._locked) {
            this._context.putImageData(this._imageData, 0, 0);
            this._imageData = null;
        }
    };
    BitmapData.prototype.drawImage = function (img, sourceRect, destRect) {
        if (this._locked) {
            // If canvas is locked:
            //
            //      1) copy image data back to canvas
            //      2) draw object
            //      3) read _imageData back out
            if (this._imageData) {
                this._context.putImageData(this._imageData, 0, 0); // at coords 0,0
            }
            this._drawImage(img, sourceRect, destRect);
            if (this._imageData) {
                this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
            }
        }
        else {
            this._drawImage(img, sourceRect, destRect);
        }
    };
    BitmapData.prototype._drawImage = function (img, sourceRect, destRect) {
        if (img instanceof BitmapData)
            this._context.drawImage(img.canvas, sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height, destRect.x, destRect.y, destRect.width, destRect.height);
        else if (img instanceof HTMLImageElement)
            this._context.drawImage(img, sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height, destRect.x, destRect.y, destRect.width, destRect.height);
    };
    BitmapData.prototype.copyPixels = function (bmpd, sourceRect, destRect) {
        if (this._locked) {
            // If canvas is locked:
            //
            //      1) copy image data back to canvas
            //      2) draw object
            //      3) read _imageData back out
            if (this._imageData) {
                this._context.putImageData(this._imageData, 0, 0); // at coords 0,0
            }
            this._copyPixels(bmpd, sourceRect, destRect);
            if (this._imageData) {
                this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
            }
        }
        else {
            this._copyPixels(bmpd, sourceRect, destRect);
        }
    };
    BitmapData.prototype._copyPixels = function (bmpd, sourceRect, destRect) {
        if (bmpd instanceof BitmapData) {
            this._context.drawImage(bmpd.canvas, sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height, destRect.x, destRect.y, destRect.width, destRect.height);
        }
        else if (bmpd instanceof HTMLImageElement) {
            this._context.drawImage(bmpd, sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height, destRect.x, destRect.y, destRect.width, destRect.height);
        }
    };
    /**
     *
     * @param rect
     * @param color
     */
    BitmapData.prototype.fillRect = function (rect, color) {
        if (this._locked) {
            // If canvas is locked:
            //
            //      1) copy image data back to canvas
            //      2) apply fill
            //      3) read _imageData back out
            if (this._imageData)
                this._context.putImageData(this._imageData, 0, 0); // at coords 0,0
            this._context.fillStyle = this.hexToRGBACSS(color);
            this._context.fillRect(rect.x, rect.y, rect.width, rect.height);
            if (this._imageData)
                this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        }
        else {
            this._context.fillStyle = this.hexToRGBACSS(color);
            this._context.fillRect(rect.x, rect.y, rect.width, rect.height);
        }
    };
    BitmapData.prototype.draw = function (source, matrix) {
        if (this._locked) {
            // If canvas is locked:
            //
            //      1) copy image data back to canvas
            //      2) draw object
            //      3) read _imageData back out
            if (this._imageData)
                this._context.putImageData(this._imageData, 0, 0); // at coords 0,0
            this._draw(source, matrix);
            if (this._imageData)
                this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        }
        else {
            this._draw(source, matrix);
        }
    };
    BitmapData.prototype._draw = function (source, matrix) {
        if (source instanceof BitmapData) {
            this._context.save();
            if (matrix != null)
                this._context.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
            this._context.drawImage(source.canvas, 0, 0);
            this._context.restore();
        }
        else if (source instanceof HTMLImageElement) {
            this._context.save();
            if (matrix != null)
                this._context.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
            this._context.drawImage(source, 0, 0);
            this._context.restore();
        }
    };
    BitmapData.prototype.copyChannel = function (sourceBitmap, sourceRect, destPoint, sourceChannel, destChannel) {
        var imageData = sourceBitmap.imageData;
        if (!this._locked)
            this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        if (this._imageData) {
            var sourceData = sourceBitmap.imageData.data;
            var destData = this._imageData.data;
            var sourceOffset = Math.round(Math.log(sourceChannel) / Math.log(2));
            var destOffset = Math.round(Math.log(destChannel) / Math.log(2));
            var i /*uint*/, j /*uint*/, sourceIndex /*uint*/, destIndex /*uint*/;
            for (i = 0; i < sourceRect.width; ++i) {
                for (j = 0; j < sourceRect.height; ++j) {
                    sourceIndex = (i + sourceRect.x + (j + sourceRect.y) * sourceBitmap.width) * 4;
                    destIndex = (i + destPoint.x + (j + destPoint.y) * this.width) * 4;
                    destData[destIndex + destOffset] = sourceData[sourceIndex + sourceOffset];
                }
            }
        }
        if (!this._locked) {
            this._context.putImageData(this._imageData, 0, 0);
            this._imageData = null;
        }
    };
    BitmapData.prototype.colorTransform = function (rect, colorTransform) {
        if (!this._locked)
            this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        if (this._imageData) {
            var data = this._imageData.data;
            var i /*uint*/, j /*uint*/, index /*uint*/;
            for (i = 0; i < rect.width; ++i) {
                for (j = 0; j < rect.height; ++j) {
                    index = (i + rect.x + (j + rect.y) * this.width) * 4;
                    data[index] = data[index] * colorTransform.redMultiplier + colorTransform.redOffset;
                    data[index + 1] = data[index + 1] * colorTransform.greenMultiplier + colorTransform.greenOffset;
                    data[index + 2] = data[index + 2] * colorTransform.blueMultiplier + colorTransform.blueOffset;
                    data[index + 3] = data[index + 3] * colorTransform.alphaMultiplier + colorTransform.alphaOffset;
                }
            }
        }
        if (!this._locked) {
            this._context.putImageData(this._imageData, 0, 0);
            this._imageData = null;
        }
    };
    Object.defineProperty(BitmapData.prototype, "imageData", {
        /**
         *
         * @returns {ImageData}
         */
        get: function () {
            return this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        },
        /**
         *
         * @param {ImageData}
         */
        set: function (value) {
            this._context.putImageData(value, 0, 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapData.prototype, "width", {
        /**
         *
         * @returns {number}
         */
        get: function () {
            return this._imageCanvas.width;
        },
        /**
         *
         * @param {number}
         */
        set: function (value) {
            this._rect.width = value;
            this._imageCanvas.width = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapData.prototype, "height", {
        /**
         *
         * @returns {number}
         */
        get: function () {
            return this._imageCanvas.height;
        },
        /**
         *
         * @param {number}
         */
        set: function (value) {
            this._rect.height = value;
            this._imageCanvas.height = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapData.prototype, "rect", {
        /**
         *
         * @param {Rectangle}
         */
        get: function () {
            return this._rect;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapData.prototype, "canvas", {
        /**
         *
         * @returns {HTMLCanvasElement}
         */
        get: function () {
            return this._imageCanvas;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapData.prototype, "context", {
        /**
         *
         * @returns {HTMLCanvasElement}
         */
        get: function () {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    // Private
    /**
     * convert decimal value to Hex
     */
    BitmapData.prototype.hexToRGBACSS = function (d) {
        var argb = ColorUtils.float32ColorToARGB(d);
        if (this._transparent == false) {
            argb[0] = 1;
            return 'rgba(' + argb[1] + ',' + argb[2] + ',' + argb[3] + ',' + argb[0] + ')';
        }
        return 'rgba(' + argb[1] + ',' + argb[2] + ',' + argb[3] + ',' + argb[0] / 255 + ')';
    };
    BitmapData.prototype.clone = function () {
        var t = new BitmapData(this.width, this.height, this.transparent);
        t.draw(this);
        return t;
    };
    return BitmapData;
})();
module.exports = BitmapData;

//# sourceMappingURL=data:application/json;base64,