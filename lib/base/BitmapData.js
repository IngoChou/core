var Rectangle = require("awayjs-core/lib/geom/Rectangle");
var ColorUtils = require("awayjs-core/lib/utils/ColorUtils");
/**
 *
 */
var BitmapData = (function () {
    /**
     *
     * @param width
     * @param height
     * @param transparent
     * @param fillColor
     */
    function BitmapData(width, height, transparent, fillColor) {
        if (transparent === void 0) { transparent = true; }
        if (fillColor === void 0) { fillColor = null; }
        this._locked = false;
        this._transparent = transparent;
        this._imageCanvas = document.createElement("canvas");
        this._imageCanvas.width = width;
        this._imageCanvas.height = height;
        this._context = this._imageCanvas.getContext("2d");
        this._rect = new Rectangle(0, 0, width, height);
        if (fillColor != null)
            this.fillRect(this._rect, fillColor);
    }
    Object.defineProperty(BitmapData.prototype, "transparent", {
        get: function () {
            return this._transparent;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     */
    BitmapData.prototype.dispose = function () {
        this._context = null;
        this._imageCanvas = null;
        this._imageData = null;
        this._rect = null;
        this._transparent = null;
        this._locked = null;
    };
    /**
     *
     */
    BitmapData.prototype.lock = function () {
        this._locked = true;
        this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
    };
    /**
     *
     */
    BitmapData.prototype.unlock = function () {
        this._locked = false;
        if (this._imageData) {
            this._context.putImageData(this._imageData, 0, 0); // at coords 0,0
            this._imageData = null;
        }
    };
    /**
     *
     * @param x
     * @param y
     * @param color
     */
    BitmapData.prototype.getPixel = function (x, y) {
        var r;
        var g;
        var b;
        var a;
        if (!this._locked) {
            var pixelData = this._context.getImageData(x, y, 1, 1);
            r = pixelData.data[0];
            g = pixelData.data[1];
            b = pixelData.data[2];
            a = pixelData.data[3];
        }
        else {
            var index = (x + y * this._imageCanvas.width) * 4;
            if (!this._imageData)
                this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
            r = this._imageData.data[index + 0];
            g = this._imageData.data[index + 1];
            b = this._imageData.data[index + 2];
            a = this._imageData.data[index + 3];
        }
        if (!this._locked) {
            this._imageData = null;
        }
        return (a << 24) | (r << 16) | (g << 8) | b;
    };
    /**
     *
     * @param x
     * @param y
     * @param color
     */
    BitmapData.prototype.setPixel = function (x, y, color) {
        var argb = ColorUtils.float32ColorToARGB(color);
        if (!this._locked)
            this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        if (this._imageData) {
            var index = (x + y * this._imageCanvas.width) * 4;
            this._imageData.data[index + 0] = argb[1];
            this._imageData.data[index + 1] = argb[2];
            this._imageData.data[index + 2] = argb[3];
            this._imageData.data[index + 3] = 255;
        }
        if (!this._locked) {
            this._context.putImageData(this._imageData, 0, 0);
            this._imageData = null;
        }
    };
    /**
     *
     * @param rect
     * @param inputByteArray
     */
    BitmapData.prototype.setPixels = function (rect, inputByteArray) {
        if (!this._locked)
            this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        if (this._imageData) {
            inputByteArray.position = 0;
            var i /*uint*/, j /*uint*/, index /*uint*/;
            for (i = 0; i < rect.width; ++i) {
                for (j = 0; j < rect.height; ++j) {
                    index = (i + rect.x + (j + rect.y) * this._imageCanvas.width) * 4;
                    this._imageData.data[index + 0] = inputByteArray.readUnsignedInt();
                    this._imageData.data[index + 1] = inputByteArray.readUnsignedInt();
                    this._imageData.data[index + 2] = inputByteArray.readUnsignedInt();
                    this._imageData.data[index + 3] = inputByteArray.readUnsignedInt();
                }
            }
        }
        if (!this._locked) {
            this._context.putImageData(this._imageData, 0, 0);
            this._imageData = null;
        }
    };
    /**
     *
     * @param x
     * @param y
     * @param color
     */
    BitmapData.prototype.setPixel32 = function (x, y, color) {
        var argb = ColorUtils.float32ColorToARGB(color);
        if (!this._locked)
            this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        if (this._imageData) {
            var index = (x + y * this._imageCanvas.width) * 4;
            this._imageData.data[index + 0] = argb[1];
            this._imageData.data[index + 1] = argb[2];
            this._imageData.data[index + 2] = argb[3];
            this._imageData.data[index + 3] = argb[0];
        }
        if (!this._locked) {
            this._context.putImageData(this._imageData, 0, 0);
            this._imageData = null;
        }
    };
    BitmapData.prototype.setVector = function (rect, inputVector) {
        if (!this._locked)
            this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        if (this._imageData) {
            var i /*uint*/, j /*uint*/, index /*uint*/, argb /*uint*/;
            for (i = 0; i < rect.width; ++i) {
                for (j = 0; j < rect.height; ++j) {
                    argb = ColorUtils.float32ColorToARGB(inputVector[i + j * rect.width]);
                    index = (i + rect.x + (j + rect.y) * this._imageCanvas.width) * 4;
                    this._imageData.data[index + 0] = argb[1];
                    this._imageData.data[index + 1] = argb[2];
                    this._imageData.data[index + 2] = argb[3];
                    this._imageData.data[index + 3] = argb[0];
                }
            }
        }
        if (!this._locked) {
            this._context.putImageData(this._imageData, 0, 0);
            this._imageData = null;
        }
    };
    BitmapData.prototype.drawImage = function (img, sourceRect, destRect) {
        if (this._locked) {
            // If canvas is locked:
            //
            //      1) copy image data back to canvas
            //      2) draw object
            //      3) read _imageData back out
            if (this._imageData)
                this._context.putImageData(this._imageData, 0, 0); // at coords 0,0
            this._drawImage(img, sourceRect, destRect);
            if (this._imageData)
                this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        }
        else {
            this._drawImage(img, sourceRect, destRect);
        }
    };
    BitmapData.prototype._drawImage = function (img, sourceRect, destRect) {
        if (img instanceof BitmapData)
            this._context.drawImage(img.canvas, sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height, destRect.x, destRect.y, destRect.width, destRect.height);
        else if (img instanceof HTMLImageElement)
            this._context.drawImage(img, sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height, destRect.x, destRect.y, destRect.width, destRect.height);
    };
    BitmapData.prototype.copyPixels = function (bmpd, sourceRect, destRect) {
        if (this._locked) {
            // If canvas is locked:
            //
            //      1) copy image data back to canvas
            //      2) draw object
            //      3) read _imageData back out
            if (this._imageData)
                this._context.putImageData(this._imageData, 0, 0); // at coords 0,0
            this._copyPixels(bmpd, sourceRect, destRect);
            if (this._imageData)
                this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        }
        else {
            this._copyPixels(bmpd, sourceRect, destRect);
        }
    };
    BitmapData.prototype._copyPixels = function (bmpd, sourceRect, destRect) {
        if (bmpd instanceof BitmapData) {
            this._context.drawImage(bmpd.canvas, sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height, destRect.x, destRect.y, destRect.width, destRect.height);
        }
        else if (bmpd instanceof HTMLImageElement) {
            this._context.drawImage(bmpd, sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height, destRect.x, destRect.y, destRect.width, destRect.height);
        }
    };
    /**
     *
     * @param rect
     * @param color
     */
    BitmapData.prototype.fillRect = function (rect, color) {
        if (this._locked) {
            // If canvas is locked:
            //
            //      1) copy image data back to canvas
            //      2) apply fill
            //      3) read _imageData back out
            if (this._imageData)
                this._context.putImageData(this._imageData, 0, 0); // at coords 0,0
            this._fillRect(rect, color);
            if (this._imageData)
                this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        }
        else {
            this._fillRect(rect, color);
        }
    };
    /**
     *
     * @param rect
     * @param color
     */
    BitmapData.prototype._fillRect = function (rect, color) {
        if (color == 0x0 && this._transparent) {
            this._context.clearRect(rect.x, rect.y, rect.width, rect.height);
        }
        else {
            var argb = ColorUtils.float32ColorToARGB(color);
            if (this._transparent)
                this._context.fillStyle = 'rgba(' + argb[1] + ',' + argb[2] + ',' + argb[3] + ',' + argb[0] / 255 + ')';
            else
                this._context.fillStyle = 'rgba(' + argb[1] + ',' + argb[2] + ',' + argb[3] + ',1)';
            this._context.fillRect(rect.x, rect.y, rect.width, rect.height);
        }
    };
    BitmapData.prototype.draw = function (source, matrix) {
        if (this._locked) {
            // If canvas is locked:
            //
            //      1) copy image data back to canvas
            //      2) draw object
            //      3) read _imageData back out
            if (this._imageData)
                this._context.putImageData(this._imageData, 0, 0); // at coords 0,0
            this._draw(source, matrix);
            if (this._imageData)
                this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        }
        else {
            this._draw(source, matrix);
        }
    };
    BitmapData.prototype._draw = function (source, matrix) {
        if (source instanceof BitmapData) {
            this._context.save();
            if (matrix != null)
                this._context.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
            this._context.drawImage(source.canvas, 0, 0);
            this._context.restore();
        }
        else if (source instanceof HTMLImageElement) {
            this._context.save();
            if (matrix != null)
                this._context.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
            this._context.drawImage(source, 0, 0);
            this._context.restore();
        }
    };
    BitmapData.prototype.copyChannel = function (sourceBitmap, sourceRect, destPoint, sourceChannel, destChannel) {
        var imageData = sourceBitmap.imageData;
        if (!this._locked)
            this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        if (this._imageData) {
            var sourceData = sourceBitmap.imageData.data;
            var destData = this._imageData.data;
            var sourceOffset = Math.round(Math.log(sourceChannel) / Math.log(2));
            var destOffset = Math.round(Math.log(destChannel) / Math.log(2));
            var i /*uint*/, j /*uint*/, sourceIndex /*uint*/, destIndex /*uint*/;
            for (i = 0; i < sourceRect.width; ++i) {
                for (j = 0; j < sourceRect.height; ++j) {
                    sourceIndex = (i + sourceRect.x + (j + sourceRect.y) * sourceBitmap.width) * 4;
                    destIndex = (i + destPoint.x + (j + destPoint.y) * this.width) * 4;
                    destData[destIndex + destOffset] = sourceData[sourceIndex + sourceOffset];
                }
            }
        }
        if (!this._locked) {
            this._context.putImageData(this._imageData, 0, 0);
            this._imageData = null;
        }
    };
    BitmapData.prototype.colorTransform = function (rect, colorTransform) {
        if (!this._locked)
            this._imageData = this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        if (this._imageData) {
            var data = this._imageData.data;
            var i /*uint*/, j /*uint*/, index /*uint*/;
            for (i = 0; i < rect.width; ++i) {
                for (j = 0; j < rect.height; ++j) {
                    index = (i + rect.x + (j + rect.y) * this.width) * 4;
                    data[index] = data[index] * colorTransform.redMultiplier + colorTransform.redOffset;
                    data[index + 1] = data[index + 1] * colorTransform.greenMultiplier + colorTransform.greenOffset;
                    data[index + 2] = data[index + 2] * colorTransform.blueMultiplier + colorTransform.blueOffset;
                    data[index + 3] = data[index + 3] * colorTransform.alphaMultiplier + colorTransform.alphaOffset;
                }
            }
        }
        if (!this._locked) {
            this._context.putImageData(this._imageData, 0, 0);
            this._imageData = null;
        }
    };
    Object.defineProperty(BitmapData.prototype, "imageData", {
        /**
         *
         * @returns {ImageData}
         */
        get: function () {
            return this._context.getImageData(0, 0, this._rect.width, this._rect.height);
        },
        /**
         *
         * @param {ImageData}
         */
        set: function (value) {
            this._context.putImageData(value, 0, 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapData.prototype, "width", {
        /**
         *
         * @returns {number}
         */
        get: function () {
            return this._imageCanvas.width;
        },
        /**
         *
         * @param {number}
         */
        set: function (value) {
            this._rect.width = value;
            this._imageCanvas.width = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapData.prototype, "height", {
        /**
         *
         * @returns {number}
         */
        get: function () {
            return this._imageCanvas.height;
        },
        /**
         *
         * @param {number}
         */
        set: function (value) {
            this._rect.height = value;
            this._imageCanvas.height = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapData.prototype, "rect", {
        /**
         *
         * @param {Rectangle}
         */
        get: function () {
            return this._rect;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapData.prototype, "canvas", {
        /**
         *
         * @returns {HTMLCanvasElement}
         */
        get: function () {
            return this._imageCanvas;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BitmapData.prototype, "context", {
        /**
         *
         * @returns {HTMLCanvasElement}
         */
        get: function () {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    BitmapData.prototype.clone = function () {
        var t = new BitmapData(this.width, this.height, this.transparent);
        t.draw(this);
        return t;
    };
    return BitmapData;
})();
module.exports = BitmapData;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1jb3JlL2xpYi9iYXNlL2JpdG1hcGRhdGEudHMiXSwibmFtZXMiOlsiQml0bWFwRGF0YSIsIkJpdG1hcERhdGEuY29uc3RydWN0b3IiLCJCaXRtYXBEYXRhLnRyYW5zcGFyZW50IiwiQml0bWFwRGF0YS5kaXNwb3NlIiwiQml0bWFwRGF0YS5sb2NrIiwiQml0bWFwRGF0YS51bmxvY2siLCJCaXRtYXBEYXRhLmdldFBpeGVsIiwiQml0bWFwRGF0YS5zZXRQaXhlbCIsIkJpdG1hcERhdGEuc2V0UGl4ZWxzIiwiQml0bWFwRGF0YS5zZXRQaXhlbDMyIiwiQml0bWFwRGF0YS5zZXRWZWN0b3IiLCJCaXRtYXBEYXRhLmRyYXdJbWFnZSIsIkJpdG1hcERhdGEuX2RyYXdJbWFnZSIsIkJpdG1hcERhdGEuY29weVBpeGVscyIsIkJpdG1hcERhdGEuX2NvcHlQaXhlbHMiLCJCaXRtYXBEYXRhLmZpbGxSZWN0IiwiQml0bWFwRGF0YS5fZmlsbFJlY3QiLCJCaXRtYXBEYXRhLmRyYXciLCJCaXRtYXBEYXRhLl9kcmF3IiwiQml0bWFwRGF0YS5jb3B5Q2hhbm5lbCIsIkJpdG1hcERhdGEuY29sb3JUcmFuc2Zvcm0iLCJCaXRtYXBEYXRhLmltYWdlRGF0YSIsIkJpdG1hcERhdGEud2lkdGgiLCJCaXRtYXBEYXRhLmhlaWdodCIsIkJpdG1hcERhdGEucmVjdCIsIkJpdG1hcERhdGEuY2FudmFzIiwiQml0bWFwRGF0YS5jb250ZXh0IiwiQml0bWFwRGF0YS5jbG9uZSJdLCJtYXBwaW5ncyI6IkFBRUEsSUFBTyxTQUFTLFdBQWMsZ0NBQWdDLENBQUMsQ0FBQztBQUdoRSxJQUFPLFVBQVUsV0FBYyxrQ0FBa0MsQ0FBQyxDQUFDO0FBRW5FLEFBR0E7O0dBREc7SUFDRyxVQUFVO0lBY2ZBOzs7Ozs7T0FNR0E7SUFDSEEsU0FyQktBLFVBQVVBLENBcUJIQSxLQUFZQSxFQUFFQSxNQUFhQSxFQUFFQSxXQUEwQkEsRUFBRUEsU0FBdUJBO1FBQW5EQywyQkFBMEJBLEdBQTFC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QTtZQUNuQkEsSUFBSUEsU0FBU0EsR0FBYUEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFakVBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3RCQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN0QkEsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdEJBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBRXZCQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNQQSxJQUFJQSxLQUFLQSxHQUFVQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQTtZQUVyREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7Z0JBQ3BCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUV6RkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDcENBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBLENBQUNB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QSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUV6RkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDckJBLElBQUlBLENBQUNBLENBQVFBLFFBQURBLEFBQVNBLEVBQUVBLENBQUNBLENBQVFBLFFBQURBLEFBQVNBLEVBQUVBLEtBQUtBLENBQVFBLFFBQURBLEFBQVNBLEVBQUVBLElBQUlBLENBQVVBLFFBQURBLEFBQVNBLENBQUNBO1lBQ3hGQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQTtnQkFDakNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBO29CQUNsQ0EsSUFBSUEsR0FBR0EsVUFBVUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDcEVBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLEtBQUtBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBO29CQUU5REEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQzFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDMUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO29CQUMxQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNDQSxDQUFDQTtZQUNGQSxDQUFDQTtRQUNGQSxDQUFDQTtRQUVEQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNuQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbERBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBO1FBQ3hCQSxDQUFDQTtJQUNGQSxDQUFDQTtJQVdNViw4QkFBU0EsR0FBaEJBLFVBQWlCQSxHQUFPQSxFQUFFQSxVQUFvQkEsRUFBRUEsUUFBa0JBO1FBRWpFVyxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNsQkEsQUFNQUEsdUJBTnVCQTtZQUN2QkEsRUFBRUE7WUFDRkEseUNBQXlDQTtZQUN6Q0Esc0JBQXNCQTtZQUN0QkEsbUNBQW1DQTtZQUVuQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7Z0JBQ25CQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxnQkFBZ0JBO1lBRXBFQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxHQUFHQSxFQUFFQSxVQUFVQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUUzQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7Z0JBQ25CQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUUxRkEsQ0FBQ0E7UUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDUEEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsRUFBRUEsVUFBVUEsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQUE7UUFDM0NBLENBQUNBO0lBQ0ZBLENBQUNBO0lBSU9YLCtCQUFVQSxHQUFsQkEsVUFBbUJBLEdBQU9BLEVBQUVBLFVBQW9CQSxFQUFFQSxRQUFrQkE7UUFFbkVZLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLFlBQVlBLFVBQVVBLENBQUNBO1lBQzdCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxHQUFHQSxDQUFDQSxNQUFNQSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQSxFQUFFQSxVQUFVQSxDQUFDQSxLQUFLQSxFQUFFQSxVQUFVQSxDQUFDQSxNQUFNQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxDQUFDQSxLQUFLQSxFQUFFQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUMvSkEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsWUFBWUEsZ0JBQWdCQSxDQUFDQTtZQUN4Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsR0FBR0EsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsVUFBVUEsQ0FBQ0EsS0FBS0EsRUFBRUEsVUFBVUEsQ0FBQ0EsTUFBTUEsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsQ0FBQ0EsS0FBS0EsRUFBRUEsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFDekpBLENBQUNBO0lBVU1aLCtCQUFVQSxHQUFqQkEsVUFBa0JBLElBQVFBLEVBQUVBLFVBQW9CQSxFQUFFQSxRQUFrQkE7UUFHbkVhLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO1lBRWxCQSxBQU1BQSx1QkFOdUJBO1lBQ3ZCQSxFQUFFQTtZQUNGQSx5Q0FBeUNBO1lBQ3pDQSxzQkFBc0JBO1lBQ3RCQSxtQ0FBbUNBO1lBRW5DQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQTtnQkFDbkJBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLGdCQUFnQkE7WUFFcEVBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLEVBQUVBLFVBQVVBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO1lBRTdDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQTtnQkFDbkJBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBRTFGQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNQQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxFQUFFQSxVQUFVQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUM5Q0EsQ0FBQ0E7SUFFRkEsQ0FBQ0E7SUFJT2IsZ0NBQVdBLEdBQW5CQSxVQUFvQkEsSUFBUUEsRUFBRUEsVUFBb0JBLEVBQUVBLFFBQWtCQTtRQUdyRWMsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsWUFBWUEsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDaENBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLFVBQVVBLENBQUNBLENBQUNBLEVBQUVBLFVBQVVBLENBQUNBLENBQUNBLEVBQUVBLFVBQVVBLENBQUNBLEtBQUtBLEVBQUVBLFVBQVVBLENBQUNBLE1BQU1BLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLEVBQUVBLFFBQVFBLENBQUNBLEtBQUtBLEVBQUVBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQ2hLQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxZQUFZQSxnQkFBZ0JBLENBQUNBLENBQUNBLENBQUNBO1lBQzdDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQSxFQUFFQSxVQUFVQSxDQUFDQSxLQUFLQSxFQUFFQSxVQUFVQSxDQUFDQSxNQUFNQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxDQUFDQSxLQUFLQSxFQUFFQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUN6SkEsQ0FBQ0E7SUFFRkEsQ0FBQ0E7SUFFRGQ7Ozs7T0FJR0E7SUFDSUEsNkJBQVFBLEdBQWZBLFVBQWdCQSxJQUFjQSxFQUFFQSxLQUFZQTtRQUUzQ2UsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFbEJBLEFBTUFBLHVCQU51QkE7WUFDdkJBLEVBQUVBO1lBQ0ZBLHlDQUF5Q0E7WUFDekNBLHFCQUFxQkE7WUFDckJBLG1DQUFtQ0E7WUFFbkNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBO2dCQUNuQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsZ0JBQWdCQTtZQUVwRUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFFNUJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBO2dCQUNuQkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDMUZBLENBQUNBO1FBQ0RBLElBQUlBLENBQUNBLENBQUNBO1lBQ0xBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO1FBQzdCQSxDQUFDQTtJQUNGQSxDQUFDQTtJQUVEZjs7OztPQUlHQTtJQUNLQSw4QkFBU0EsR0FBakJBLFVBQWtCQSxJQUFjQSxFQUFFQSxLQUFZQTtRQUU3Q2dCLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLElBQUlBLEdBQUdBLElBQUlBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO1lBQ3ZDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUNsRUEsQ0FBQ0E7UUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDUEEsSUFBSUEsSUFBSUEsR0FBWUEsVUFBVUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtZQUV6REEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7Z0JBQ3JCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxHQUFHQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUN2R0EsSUFBSUE7Z0JBQ0hBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLEdBQUdBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBO1lBRXJGQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUNqRUEsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFTTWhCLHlCQUFJQSxHQUFYQSxVQUFZQSxNQUFVQSxFQUFFQSxNQUFjQTtRQUVyQ2lCLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO1lBRWxCQSxBQU1BQSx1QkFOdUJBO1lBQ3ZCQSxFQUFFQTtZQUNGQSx5Q0FBeUNBO1lBQ3pDQSxzQkFBc0JBO1lBQ3RCQSxtQ0FBbUNBO1lBRW5DQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQTtnQkFDbkJBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLGdCQUFnQkE7WUFFcEVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO1lBRTNCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQTtnQkFDbkJBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQzFGQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNQQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUM1QkEsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFJT2pCLDBCQUFLQSxHQUFiQSxVQUFjQSxNQUFVQSxFQUFFQSxNQUFhQTtRQUV0Q2tCLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLFlBQVlBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUVyQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsSUFBSUEsSUFBSUEsQ0FBQ0E7Z0JBQ2xCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxZQUFZQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxFQUFFQSxFQUFFQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUUxRkEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDN0NBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBRXpCQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxZQUFZQSxnQkFBZ0JBLENBQUNBLENBQUNBLENBQUNBO1lBQy9DQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUVyQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsSUFBSUEsSUFBSUEsQ0FBQ0E7Z0JBQ2xCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxZQUFZQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxFQUFFQSxFQUFFQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUUxRkEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdENBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQ3pCQSxDQUFDQTtJQUVGQSxDQUFDQTtJQUVNbEIsZ0NBQVdBLEdBQWxCQSxVQUFtQkEsWUFBdUJBLEVBQUVBLFVBQW9CQSxFQUFFQSxTQUFlQSxFQUFFQSxhQUFvQkEsRUFBRUEsV0FBa0JBO1FBRTFIbUIsSUFBSUEsU0FBU0EsR0FBYUEsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7UUFFakRBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBO1lBQ2pCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUV6RkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDckJBLElBQUlBLFVBQVVBLEdBQWlCQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUMzREEsSUFBSUEsUUFBUUEsR0FBaUJBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBO1lBRWxEQSxJQUFJQSxZQUFZQSxHQUFVQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxhQUFhQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMxRUEsSUFBSUEsVUFBVUEsR0FBVUEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsR0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFdEVBLElBQUlBLENBQUNBLENBQVFBLFFBQURBLEFBQVNBLEVBQUVBLENBQUNBLENBQVFBLFFBQURBLEFBQVNBLEVBQUVBLFdBQVdBLENBQVFBLFFBQURBLEFBQVNBLEVBQUVBLFNBQVNBLENBQVFBLFFBQURBLEFBQVNBLENBQUNBO1lBQ2pHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxVQUFVQSxDQUFDQSxLQUFLQSxFQUFFQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQTtnQkFDdkNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLFVBQVVBLENBQUNBLE1BQU1BLEVBQUVBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBO29CQUN4Q0EsV0FBV0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQzNFQSxTQUFTQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQTtvQkFFL0RBLFFBQVFBLENBQUNBLFNBQVNBLEdBQUdBLFVBQVVBLENBQUNBLEdBQUdBLFVBQVVBLENBQUNBLFdBQVdBLEdBQUdBLFlBQVlBLENBQUNBLENBQUNBO2dCQUMzRUEsQ0FBQ0E7WUFDRkEsQ0FBQ0E7UUFDRkEsQ0FBQ0E7UUFFREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkJBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xEQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUN4QkEsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFFTW5CLG1DQUFjQSxHQUFyQkEsVUFBc0JBLElBQWNBLEVBQUVBLGNBQTZCQTtRQUVsRW9CLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBO1lBQ2pCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUV6RkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDckJBLElBQUlBLElBQUlBLEdBQWlCQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUU5Q0EsSUFBSUEsQ0FBQ0EsQ0FBUUEsUUFBREEsQUFBU0EsRUFBRUEsQ0FBQ0EsQ0FBUUEsUUFBREEsQUFBU0EsRUFBRUEsS0FBS0EsQ0FBUUEsUUFBREEsQUFBU0EsQ0FBQ0E7WUFDaEVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBO2dCQUNqQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7b0JBQ2xDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQTtvQkFFakRBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEdBQUNBLGNBQWNBLENBQUNBLGFBQWFBLEdBQUdBLGNBQWNBLENBQUNBLFNBQVNBLENBQUNBO29CQUNsRkEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsY0FBY0EsQ0FBQ0EsZUFBZUEsR0FBR0EsY0FBY0EsQ0FBQ0EsV0FBV0EsQ0FBQ0E7b0JBQzlGQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFDQSxjQUFjQSxDQUFDQSxjQUFjQSxHQUFHQSxjQUFjQSxDQUFDQSxVQUFVQSxDQUFDQTtvQkFDNUZBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBLEdBQUNBLGNBQWNBLENBQUNBLGVBQWVBLEdBQUdBLGNBQWNBLENBQUNBLFdBQVdBLENBQUNBO2dCQUMvRkEsQ0FBQ0E7WUFDRkEsQ0FBQ0E7UUFDRkEsQ0FBQ0E7UUFFREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkJBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xEQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUN4QkEsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFNRHBCLHNCQUFXQSxpQ0FBU0E7UUFLcEJBOzs7V0FHR0E7YUFDSEE7WUFFQ3FCLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUFBO1FBQzdFQSxDQUFDQTtRQWhCRHJCOzs7V0FHR0E7YUFDSEEsVUFBcUJBLEtBQWVBO1lBRW5DcUIsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDekNBLENBQUNBOzs7T0FBQXJCO0lBZURBLHNCQUFXQSw2QkFBS0E7UUFKaEJBOzs7V0FHR0E7YUFDSEE7WUFFQ3NCLE1BQU1BLENBQVVBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLEtBQUtBLENBQUNBO1FBQ3pDQSxDQUFDQTtRQUVEdEI7OztXQUdHQTthQUNIQSxVQUFpQkEsS0FBWUE7WUFFNUJzQixJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxHQUFHQSxLQUFLQSxDQUFDQTtZQUN6QkEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDakNBLENBQUNBOzs7T0FWQXRCO0lBZ0JEQSxzQkFBV0EsOEJBQU1BO1FBSmpCQTs7O1dBR0dBO2FBQ0hBO1lBRUN1QixNQUFNQSxDQUFVQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUMxQ0EsQ0FBQ0E7UUFFRHZCOzs7V0FHR0E7YUFDSEEsVUFBa0JBLEtBQVlBO1lBRTdCdUIsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFDMUJBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLE1BQU1BLEdBQUdBLEtBQUtBLENBQUNBO1FBQ2xDQSxDQUFDQTs7O09BVkF2QjtJQWdCREEsc0JBQVdBLDRCQUFJQTtRQUpmQTs7O1dBR0dBO2FBQ0hBO1lBRUN3QixNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUNuQkEsQ0FBQ0E7OztPQUFBeEI7SUFNREEsc0JBQVdBLDhCQUFNQTtRQUpqQkE7OztXQUdHQTthQUNIQTtZQUVDeUIsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7UUFDMUJBLENBQUNBOzs7T0FBQXpCO0lBTURBLHNCQUFXQSwrQkFBT0E7UUFKbEJBOzs7V0FHR0E7YUFDSEE7WUFFQzBCLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO1FBQ3RCQSxDQUFDQTs7O09BQUExQjtJQUVNQSwwQkFBS0EsR0FBWkE7UUFDQzJCLElBQUlBLENBQUNBLEdBQWNBLElBQUlBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1FBQzdFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNiQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNWQSxDQUFDQTtJQUNGM0IsaUJBQUNBO0FBQURBLENBL2lCQSxBQStpQkNBLElBQUE7QUFFRCxBQUFvQixpQkFBWCxVQUFVLENBQUMiLCJmaWxlIjoiYmFzZS9CaXRtYXBEYXRhLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb2xvclRyYW5zZm9ybVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL0NvbG9yVHJhbnNmb3JtXCIpO1xuaW1wb3J0IE1hdHJpeFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXhcIik7XG5pbXBvcnQgUmVjdGFuZ2xlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9SZWN0YW5nbGVcIik7XG5pbXBvcnQgUG9pbnRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vUG9pbnRcIik7XG5pbXBvcnQgQnl0ZUFycmF5XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdXRpbHMvQnl0ZUFycmF5XCIpO1xuaW1wb3J0IENvbG9yVXRpbHNcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi91dGlscy9Db2xvclV0aWxzXCIpO1xuXG4vKipcbiAqXG4gKi9cbmNsYXNzIEJpdG1hcERhdGFcbntcblx0cHJpdmF0ZSBfaW1hZ2VDYW52YXM6SFRNTENhbnZhc0VsZW1lbnQ7XG5cdHByaXZhdGUgX2NvbnRleHQ6Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuXHRwcml2YXRlIF9pbWFnZURhdGE6SW1hZ2VEYXRhO1xuXHRwcml2YXRlIF9yZWN0OlJlY3RhbmdsZTtcblx0cHJpdmF0ZSBfdHJhbnNwYXJlbnQ6Ym9vbGVhbjtcblx0cHJpdmF0ZSBfbG9ja2VkOmJvb2xlYW4gPSBmYWxzZTtcblxuXHRwdWJsaWMgZ2V0IHRyYW5zcGFyZW50KCk6Ym9vbGVhblxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3RyYW5zcGFyZW50O1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSB3aWR0aFxuXHQgKiBAcGFyYW0gaGVpZ2h0XG5cdCAqIEBwYXJhbSB0cmFuc3BhcmVudFxuXHQgKiBAcGFyYW0gZmlsbENvbG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcih3aWR0aDpudW1iZXIsIGhlaWdodDpudW1iZXIsIHRyYW5zcGFyZW50OmJvb2xlYW4gPSB0cnVlLCBmaWxsQ29sb3I6bnVtYmVyID0gbnVsbClcblx0e1xuXHRcdHRoaXMuX3RyYW5zcGFyZW50ID0gdHJhbnNwYXJlbnQ7XG5cdFx0dGhpcy5faW1hZ2VDYW52YXMgPSA8SFRNTENhbnZhc0VsZW1lbnQ+IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG5cdFx0dGhpcy5faW1hZ2VDYW52YXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLl9pbWFnZUNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0dGhpcy5fY29udGV4dCA9IHRoaXMuX2ltYWdlQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblx0XHR0aGlzLl9yZWN0ID0gbmV3IFJlY3RhbmdsZSgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcblxuXHRcdGlmIChmaWxsQ29sb3IgIT0gbnVsbClcblx0XHRcdHRoaXMuZmlsbFJlY3QodGhpcy5fcmVjdCwgZmlsbENvbG9yKTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIGRpc3Bvc2UoKVxuXHR7XG5cdFx0dGhpcy5fY29udGV4dCA9IG51bGw7XG5cdFx0dGhpcy5faW1hZ2VDYW52YXMgPSBudWxsO1xuXHRcdHRoaXMuX2ltYWdlRGF0YSA9IG51bGw7XG5cdFx0dGhpcy5fcmVjdCA9IG51bGw7XG5cdFx0dGhpcy5fdHJhbnNwYXJlbnQgPSBudWxsO1xuXHRcdHRoaXMuX2xvY2tlZCA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBsb2NrKClcblx0e1xuXHRcdHRoaXMuX2xvY2tlZCA9IHRydWU7XG5cdFx0dGhpcy5faW1hZ2VEYXRhID0gdGhpcy5fY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy5fcmVjdC53aWR0aCwgdGhpcy5fcmVjdC5oZWlnaHQpO1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgdW5sb2NrKClcblx0e1xuXHRcdHRoaXMuX2xvY2tlZCA9IGZhbHNlO1xuXG5cdFx0aWYgKHRoaXMuX2ltYWdlRGF0YSkge1xuXHRcdFx0dGhpcy5fY29udGV4dC5wdXRJbWFnZURhdGEodGhpcy5faW1hZ2VEYXRhLCAwLCAwKTsgLy8gYXQgY29vcmRzIDAsMFxuXHRcdFx0dGhpcy5faW1hZ2VEYXRhID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIHhcblx0ICogQHBhcmFtIHlcblx0ICogQHBhcmFtIGNvbG9yXG5cdCAqL1xuXHRwdWJsaWMgZ2V0UGl4ZWwoeCwgeSk6bnVtYmVyXG5cdHtcblx0XHR2YXIgcjpudW1iZXI7XG5cdFx0dmFyIGc6bnVtYmVyO1xuXHRcdHZhciBiOm51bWJlcjtcblx0XHR2YXIgYTpudW1iZXI7XG5cblx0XHRpZiAoIXRoaXMuX2xvY2tlZCkge1xuXHRcdFx0dmFyIHBpeGVsRGF0YTpJbWFnZURhdGEgPSB0aGlzLl9jb250ZXh0LmdldEltYWdlRGF0YSh4LCB5LCAxLCAxKTtcblxuXHRcdFx0ciA9IHBpeGVsRGF0YS5kYXRhWzBdO1xuXHRcdFx0ZyA9IHBpeGVsRGF0YS5kYXRhWzFdO1xuXHRcdFx0YiA9IHBpeGVsRGF0YS5kYXRhWzJdO1xuXHRcdFx0YSA9IHBpeGVsRGF0YS5kYXRhWzNdO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBpbmRleDpudW1iZXIgPSAoeCArIHkqdGhpcy5faW1hZ2VDYW52YXMud2lkdGgpKjQ7XG5cblx0XHRcdGlmICghdGhpcy5faW1hZ2VEYXRhKVxuXHRcdFx0XHR0aGlzLl9pbWFnZURhdGEgPSB0aGlzLl9jb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB0aGlzLl9yZWN0LndpZHRoLCB0aGlzLl9yZWN0LmhlaWdodCk7XG5cblx0XHRcdHIgPSB0aGlzLl9pbWFnZURhdGEuZGF0YVtpbmRleCArIDBdO1xuXHRcdFx0ZyA9IHRoaXMuX2ltYWdlRGF0YS5kYXRhW2luZGV4ICsgMV07XG5cdFx0XHRiID0gdGhpcy5faW1hZ2VEYXRhLmRhdGFbaW5kZXggKyAyXTtcblx0XHRcdGEgPSB0aGlzLl9pbWFnZURhdGEuZGF0YVtpbmRleCArIDNdO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLl9sb2NrZWQpIHtcblx0XHRcdHRoaXMuX2ltYWdlRGF0YSA9IG51bGw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIChhIDw8IDI0KSB8IChyIDw8IDE2KSB8IChnIDw8IDgpIHwgYjtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0geFxuXHQgKiBAcGFyYW0geVxuXHQgKiBAcGFyYW0gY29sb3Jcblx0ICovXG5cdHB1YmxpYyBzZXRQaXhlbCh4LCB5LCBjb2xvcjpudW1iZXIpXG5cdHtcblx0XHR2YXIgYXJnYjpudW1iZXJbXSA9IENvbG9yVXRpbHMuZmxvYXQzMkNvbG9yVG9BUkdCKGNvbG9yKTtcblxuXHRcdGlmICghdGhpcy5fbG9ja2VkKVxuXHRcdFx0dGhpcy5faW1hZ2VEYXRhID0gdGhpcy5fY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy5fcmVjdC53aWR0aCwgdGhpcy5fcmVjdC5oZWlnaHQpO1xuXG5cdFx0aWYgKHRoaXMuX2ltYWdlRGF0YSkge1xuXHRcdFx0dmFyIGluZGV4Om51bWJlciA9ICh4ICsgeSp0aGlzLl9pbWFnZUNhbnZhcy53aWR0aCkqNDtcblxuXHRcdFx0dGhpcy5faW1hZ2VEYXRhLmRhdGFbaW5kZXggKyAwXSA9IGFyZ2JbMV07XG5cdFx0XHR0aGlzLl9pbWFnZURhdGEuZGF0YVtpbmRleCArIDFdID0gYXJnYlsyXTtcblx0XHRcdHRoaXMuX2ltYWdlRGF0YS5kYXRhW2luZGV4ICsgMl0gPSBhcmdiWzNdO1xuXHRcdFx0dGhpcy5faW1hZ2VEYXRhLmRhdGFbaW5kZXggKyAzXSA9IDI1NTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuX2xvY2tlZCkge1xuXHRcdFx0dGhpcy5fY29udGV4dC5wdXRJbWFnZURhdGEodGhpcy5faW1hZ2VEYXRhLCAwLCAwKTtcblx0XHRcdHRoaXMuX2ltYWdlRGF0YSA9IG51bGw7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSByZWN0XG5cdCAqIEBwYXJhbSBpbnB1dEJ5dGVBcnJheVxuXHQgKi9cblx0cHVibGljIHNldFBpeGVscyhyZWN0OlJlY3RhbmdsZSwgaW5wdXRCeXRlQXJyYXk6Qnl0ZUFycmF5KVxuXHR7XG5cdFx0aWYgKCF0aGlzLl9sb2NrZWQpXG5cdFx0XHR0aGlzLl9pbWFnZURhdGEgPSB0aGlzLl9jb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB0aGlzLl9yZWN0LndpZHRoLCB0aGlzLl9yZWN0LmhlaWdodCk7XG5cblx0XHRpZiAodGhpcy5faW1hZ2VEYXRhKSB7XG5cdFx0XHRpbnB1dEJ5dGVBcnJheS5wb3NpdGlvbiA9IDA7XG5cdFx0XHR2YXIgaTpudW1iZXIgLyp1aW50Ki8sIGo6bnVtYmVyIC8qdWludCovLCBpbmRleDpudW1iZXIgLyp1aW50Ki87XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgcmVjdC53aWR0aDsgKytpKSB7XG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCByZWN0LmhlaWdodDsgKytqKSB7XG5cdFx0XHRcdFx0aW5kZXggPSAoaSArIHJlY3QueCArIChqICsgcmVjdC55KSp0aGlzLl9pbWFnZUNhbnZhcy53aWR0aCkqNDtcblxuXHRcdFx0XHRcdHRoaXMuX2ltYWdlRGF0YS5kYXRhW2luZGV4ICsgMF0gPSBpbnB1dEJ5dGVBcnJheS5yZWFkVW5zaWduZWRJbnQoKTtcblx0XHRcdFx0XHR0aGlzLl9pbWFnZURhdGEuZGF0YVtpbmRleCArIDFdID0gaW5wdXRCeXRlQXJyYXkucmVhZFVuc2lnbmVkSW50KCk7XG5cdFx0XHRcdFx0dGhpcy5faW1hZ2VEYXRhLmRhdGFbaW5kZXggKyAyXSA9IGlucHV0Qnl0ZUFycmF5LnJlYWRVbnNpZ25lZEludCgpO1xuXHRcdFx0XHRcdHRoaXMuX2ltYWdlRGF0YS5kYXRhW2luZGV4ICsgM10gPSBpbnB1dEJ5dGVBcnJheS5yZWFkVW5zaWduZWRJbnQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghdGhpcy5fbG9ja2VkKSB7XG5cdFx0XHR0aGlzLl9jb250ZXh0LnB1dEltYWdlRGF0YSh0aGlzLl9pbWFnZURhdGEsIDAsIDApO1xuXHRcdFx0dGhpcy5faW1hZ2VEYXRhID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIHhcblx0ICogQHBhcmFtIHlcblx0ICogQHBhcmFtIGNvbG9yXG5cdCAqL1xuXHRwdWJsaWMgc2V0UGl4ZWwzMih4LCB5LCBjb2xvcjpudW1iZXIpXG5cdHtcblx0XHR2YXIgYXJnYjpudW1iZXJbXSA9IENvbG9yVXRpbHMuZmxvYXQzMkNvbG9yVG9BUkdCKGNvbG9yKTtcblxuXHRcdGlmICghdGhpcy5fbG9ja2VkKVxuXHRcdFx0dGhpcy5faW1hZ2VEYXRhID0gdGhpcy5fY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy5fcmVjdC53aWR0aCwgdGhpcy5fcmVjdC5oZWlnaHQpO1xuXG5cdFx0aWYgKHRoaXMuX2ltYWdlRGF0YSkge1xuXHRcdFx0dmFyIGluZGV4Om51bWJlciA9ICh4ICsgeSp0aGlzLl9pbWFnZUNhbnZhcy53aWR0aCkqNDtcblxuXHRcdFx0dGhpcy5faW1hZ2VEYXRhLmRhdGFbaW5kZXggKyAwXSA9IGFyZ2JbMV07XG5cdFx0XHR0aGlzLl9pbWFnZURhdGEuZGF0YVtpbmRleCArIDFdID0gYXJnYlsyXTtcblx0XHRcdHRoaXMuX2ltYWdlRGF0YS5kYXRhW2luZGV4ICsgMl0gPSBhcmdiWzNdO1xuXHRcdFx0dGhpcy5faW1hZ2VEYXRhLmRhdGFbaW5kZXggKyAzXSA9IGFyZ2JbMF07XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLl9sb2NrZWQpIHtcblx0XHRcdHRoaXMuX2NvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuX2ltYWdlRGF0YSwgMCwgMCk7XG5cdFx0XHR0aGlzLl9pbWFnZURhdGEgPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBzZXRWZWN0b3IocmVjdDpSZWN0YW5nbGUsIGlucHV0VmVjdG9yOkFycmF5PG51bWJlcj4pXG5cdHtcblx0XHRpZiAoIXRoaXMuX2xvY2tlZClcblx0XHRcdHRoaXMuX2ltYWdlRGF0YSA9IHRoaXMuX2NvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMuX3JlY3Qud2lkdGgsIHRoaXMuX3JlY3QuaGVpZ2h0KTtcblxuXHRcdGlmICh0aGlzLl9pbWFnZURhdGEpIHtcblx0XHRcdHZhciBpOm51bWJlciAvKnVpbnQqLywgajpudW1iZXIgLyp1aW50Ki8sIGluZGV4Om51bWJlciAvKnVpbnQqLywgYXJnYjpudW1iZXJbXSAvKnVpbnQqLztcblx0XHRcdGZvciAoaSA9IDA7IGkgPCByZWN0LndpZHRoOyArK2kpIHtcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IHJlY3QuaGVpZ2h0OyArK2opIHtcblx0XHRcdFx0XHRhcmdiID0gQ29sb3JVdGlscy5mbG9hdDMyQ29sb3JUb0FSR0IoaW5wdXRWZWN0b3JbaSArIGoqcmVjdC53aWR0aF0pO1xuXHRcdFx0XHRcdGluZGV4ID0gKGkgKyByZWN0LnggKyAoaiArIHJlY3QueSkqdGhpcy5faW1hZ2VDYW52YXMud2lkdGgpKjQ7XG5cblx0XHRcdFx0XHR0aGlzLl9pbWFnZURhdGEuZGF0YVtpbmRleCArIDBdID0gYXJnYlsxXTtcblx0XHRcdFx0XHR0aGlzLl9pbWFnZURhdGEuZGF0YVtpbmRleCArIDFdID0gYXJnYlsyXTtcblx0XHRcdFx0XHR0aGlzLl9pbWFnZURhdGEuZGF0YVtpbmRleCArIDJdID0gYXJnYlszXTtcblx0XHRcdFx0XHR0aGlzLl9pbWFnZURhdGEuZGF0YVtpbmRleCArIDNdID0gYXJnYlswXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghdGhpcy5fbG9ja2VkKSB7XG5cdFx0XHR0aGlzLl9jb250ZXh0LnB1dEltYWdlRGF0YSh0aGlzLl9pbWFnZURhdGEsIDAsIDApO1xuXHRcdFx0dGhpcy5faW1hZ2VEYXRhID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ29weSBhbiBIVE1MSW1hZ2VFbGVtZW50IG9yIEJpdG1hcERhdGEgb2JqZWN0XG5cdCAqXG5cdCAqIEBwYXJhbSBpbWcge0JpdG1hcERhdGF9IC8ge0hUTUxJbWFnZUVsZW1lbnR9XG5cdCAqIEBwYXJhbSBzb3VyY2VSZWN0IC0gc291cmNlIHJlY3RhbmdlIHRvIGNvcHkgZnJvbVxuXHQgKiBAcGFyYW0gZGVzdFJlY3QgLSBkZXN0aW5hdG9pbiByZWN0YW5nZSB0byBjb3B5IHRvXG5cdCAqL1xuXHRwdWJsaWMgZHJhd0ltYWdlKGltZzpCaXRtYXBEYXRhLCBzb3VyY2VSZWN0OlJlY3RhbmdsZSwgZGVzdFJlY3Q6UmVjdGFuZ2xlKTtcblx0cHVibGljIGRyYXdJbWFnZShpbWc6SFRNTEltYWdlRWxlbWVudCwgc291cmNlUmVjdDpSZWN0YW5nbGUsIGRlc3RSZWN0OlJlY3RhbmdsZSk7XG5cdHB1YmxpYyBkcmF3SW1hZ2UoaW1nOmFueSwgc291cmNlUmVjdDpSZWN0YW5nbGUsIGRlc3RSZWN0OlJlY3RhbmdsZSlcblx0e1xuXHRcdGlmICh0aGlzLl9sb2NrZWQpIHtcblx0XHRcdC8vIElmIGNhbnZhcyBpcyBsb2NrZWQ6XG5cdFx0XHQvL1xuXHRcdFx0Ly8gICAgICAxKSBjb3B5IGltYWdlIGRhdGEgYmFjayB0byBjYW52YXNcblx0XHRcdC8vICAgICAgMikgZHJhdyBvYmplY3Rcblx0XHRcdC8vICAgICAgMykgcmVhZCBfaW1hZ2VEYXRhIGJhY2sgb3V0XG5cblx0XHRcdGlmICh0aGlzLl9pbWFnZURhdGEpXG5cdFx0XHRcdHRoaXMuX2NvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuX2ltYWdlRGF0YSwgMCwgMCk7IC8vIGF0IGNvb3JkcyAwLDBcblxuXHRcdFx0dGhpcy5fZHJhd0ltYWdlKGltZywgc291cmNlUmVjdCwgZGVzdFJlY3QpO1xuXG5cdFx0XHRpZiAodGhpcy5faW1hZ2VEYXRhKVxuXHRcdFx0XHR0aGlzLl9pbWFnZURhdGEgPSB0aGlzLl9jb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB0aGlzLl9yZWN0LndpZHRoLCB0aGlzLl9yZWN0LmhlaWdodCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fZHJhd0ltYWdlKGltZywgc291cmNlUmVjdCwgZGVzdFJlY3QpXG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBfZHJhd0ltYWdlKGltZzpCaXRtYXBEYXRhLCBzb3VyY2VSZWN0OlJlY3RhbmdsZSwgZGVzdFJlY3Q6UmVjdGFuZ2xlKTtcblx0cHJpdmF0ZSBfZHJhd0ltYWdlKGltZzpIVE1MSW1hZ2VFbGVtZW50LCBzb3VyY2VSZWN0OlJlY3RhbmdsZSwgZGVzdFJlY3Q6UmVjdGFuZ2xlKTtcblx0cHJpdmF0ZSBfZHJhd0ltYWdlKGltZzphbnksIHNvdXJjZVJlY3Q6UmVjdGFuZ2xlLCBkZXN0UmVjdDpSZWN0YW5nbGUpXG5cdHtcblx0XHRpZiAoaW1nIGluc3RhbmNlb2YgQml0bWFwRGF0YSlcblx0XHRcdHRoaXMuX2NvbnRleHQuZHJhd0ltYWdlKGltZy5jYW52YXMsIHNvdXJjZVJlY3QueCwgc291cmNlUmVjdC55LCBzb3VyY2VSZWN0LndpZHRoLCBzb3VyY2VSZWN0LmhlaWdodCwgZGVzdFJlY3QueCwgZGVzdFJlY3QueSwgZGVzdFJlY3Qud2lkdGgsIGRlc3RSZWN0LmhlaWdodCk7XG5cdFx0ZWxzZSBpZiAoaW1nIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudClcblx0XHRcdHRoaXMuX2NvbnRleHQuZHJhd0ltYWdlKGltZywgc291cmNlUmVjdC54LCBzb3VyY2VSZWN0LnksIHNvdXJjZVJlY3Qud2lkdGgsIHNvdXJjZVJlY3QuaGVpZ2h0LCBkZXN0UmVjdC54LCBkZXN0UmVjdC55LCBkZXN0UmVjdC53aWR0aCwgZGVzdFJlY3QuaGVpZ2h0KTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gYm1wZFxuXHQgKiBAcGFyYW0gc291cmNlUmVjdFxuXHQgKiBAcGFyYW0gZGVzdFJlY3Rcblx0ICovXG5cdHB1YmxpYyBjb3B5UGl4ZWxzKGJtcGQ6Qml0bWFwRGF0YSwgc291cmNlUmVjdDpSZWN0YW5nbGUsIGRlc3RSZWN0OlJlY3RhbmdsZSk7XG5cdHB1YmxpYyBjb3B5UGl4ZWxzKGJtcGQ6SFRNTEltYWdlRWxlbWVudCwgc291cmNlUmVjdDpSZWN0YW5nbGUsIGRlc3RSZWN0OlJlY3RhbmdsZSk7XG5cdHB1YmxpYyBjb3B5UGl4ZWxzKGJtcGQ6YW55LCBzb3VyY2VSZWN0OlJlY3RhbmdsZSwgZGVzdFJlY3Q6UmVjdGFuZ2xlKVxuXHR7XG5cblx0XHRpZiAodGhpcy5fbG9ja2VkKSB7XG5cblx0XHRcdC8vIElmIGNhbnZhcyBpcyBsb2NrZWQ6XG5cdFx0XHQvL1xuXHRcdFx0Ly8gICAgICAxKSBjb3B5IGltYWdlIGRhdGEgYmFjayB0byBjYW52YXNcblx0XHRcdC8vICAgICAgMikgZHJhdyBvYmplY3Rcblx0XHRcdC8vICAgICAgMykgcmVhZCBfaW1hZ2VEYXRhIGJhY2sgb3V0XG5cblx0XHRcdGlmICh0aGlzLl9pbWFnZURhdGEpXG5cdFx0XHRcdHRoaXMuX2NvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuX2ltYWdlRGF0YSwgMCwgMCk7IC8vIGF0IGNvb3JkcyAwLDBcblxuXHRcdFx0dGhpcy5fY29weVBpeGVscyhibXBkLCBzb3VyY2VSZWN0LCBkZXN0UmVjdCk7XG5cblx0XHRcdGlmICh0aGlzLl9pbWFnZURhdGEpXG5cdFx0XHRcdHRoaXMuX2ltYWdlRGF0YSA9IHRoaXMuX2NvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMuX3JlY3Qud2lkdGgsIHRoaXMuX3JlY3QuaGVpZ2h0KTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9jb3B5UGl4ZWxzKGJtcGQsIHNvdXJjZVJlY3QsIGRlc3RSZWN0KTtcblx0XHR9XG5cblx0fVxuXG5cdHByaXZhdGUgX2NvcHlQaXhlbHMoYm1wZDpCaXRtYXBEYXRhLCBzb3VyY2VSZWN0OlJlY3RhbmdsZSwgZGVzdFJlY3Q6UmVjdGFuZ2xlKTtcblx0cHJpdmF0ZSBfY29weVBpeGVscyhibXBkOkhUTUxJbWFnZUVsZW1lbnQsIHNvdXJjZVJlY3Q6UmVjdGFuZ2xlLCBkZXN0UmVjdDpSZWN0YW5nbGUpO1xuXHRwcml2YXRlIF9jb3B5UGl4ZWxzKGJtcGQ6YW55LCBzb3VyY2VSZWN0OlJlY3RhbmdsZSwgZGVzdFJlY3Q6UmVjdGFuZ2xlKVxuXHR7XG5cblx0XHRpZiAoYm1wZCBpbnN0YW5jZW9mIEJpdG1hcERhdGEpIHtcblx0XHRcdHRoaXMuX2NvbnRleHQuZHJhd0ltYWdlKGJtcGQuY2FudmFzLCBzb3VyY2VSZWN0LngsIHNvdXJjZVJlY3QueSwgc291cmNlUmVjdC53aWR0aCwgc291cmNlUmVjdC5oZWlnaHQsIGRlc3RSZWN0LngsIGRlc3RSZWN0LnksIGRlc3RSZWN0LndpZHRoLCBkZXN0UmVjdC5oZWlnaHQpO1xuXHRcdH0gZWxzZSBpZiAoYm1wZCBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQpIHtcblx0XHRcdHRoaXMuX2NvbnRleHQuZHJhd0ltYWdlKGJtcGQsIHNvdXJjZVJlY3QueCwgc291cmNlUmVjdC55LCBzb3VyY2VSZWN0LndpZHRoLCBzb3VyY2VSZWN0LmhlaWdodCwgZGVzdFJlY3QueCwgZGVzdFJlY3QueSwgZGVzdFJlY3Qud2lkdGgsIGRlc3RSZWN0LmhlaWdodCk7XG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIHJlY3Rcblx0ICogQHBhcmFtIGNvbG9yXG5cdCAqL1xuXHRwdWJsaWMgZmlsbFJlY3QocmVjdDpSZWN0YW5nbGUsIGNvbG9yOm51bWJlcilcblx0e1xuXHRcdGlmICh0aGlzLl9sb2NrZWQpIHtcblxuXHRcdFx0Ly8gSWYgY2FudmFzIGlzIGxvY2tlZDpcblx0XHRcdC8vXG5cdFx0XHQvLyAgICAgIDEpIGNvcHkgaW1hZ2UgZGF0YSBiYWNrIHRvIGNhbnZhc1xuXHRcdFx0Ly8gICAgICAyKSBhcHBseSBmaWxsXG5cdFx0XHQvLyAgICAgIDMpIHJlYWQgX2ltYWdlRGF0YSBiYWNrIG91dFxuXG5cdFx0XHRpZiAodGhpcy5faW1hZ2VEYXRhKVxuXHRcdFx0XHR0aGlzLl9jb250ZXh0LnB1dEltYWdlRGF0YSh0aGlzLl9pbWFnZURhdGEsIDAsIDApOyAvLyBhdCBjb29yZHMgMCwwXG5cblx0XHRcdHRoaXMuX2ZpbGxSZWN0KHJlY3QsIGNvbG9yKTtcblxuXHRcdFx0aWYgKHRoaXMuX2ltYWdlRGF0YSlcblx0XHRcdFx0dGhpcy5faW1hZ2VEYXRhID0gdGhpcy5fY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy5fcmVjdC53aWR0aCwgdGhpcy5fcmVjdC5oZWlnaHQpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHRoaXMuX2ZpbGxSZWN0KHJlY3QsIGNvbG9yKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIHJlY3Rcblx0ICogQHBhcmFtIGNvbG9yXG5cdCAqL1xuXHRwcml2YXRlIF9maWxsUmVjdChyZWN0OlJlY3RhbmdsZSwgY29sb3I6bnVtYmVyKVxuXHR7XG5cdFx0aWYgKGNvbG9yID09IDB4MCAmJiB0aGlzLl90cmFuc3BhcmVudCkge1xuXHRcdFx0dGhpcy5fY29udGV4dC5jbGVhclJlY3QocmVjdC54LCByZWN0LnksIHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGFyZ2I6bnVtYmVyW10gPSBDb2xvclV0aWxzLmZsb2F0MzJDb2xvclRvQVJHQihjb2xvcik7XG5cblx0XHRcdGlmICh0aGlzLl90cmFuc3BhcmVudClcblx0XHRcdFx0dGhpcy5fY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgnICsgYXJnYlsxXSArICcsJyArIGFyZ2JbMl0gKyAnLCcgKyBhcmdiWzNdICsgJywnICsgYXJnYlswXS8yNTUgKyAnKSc7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHRoaXMuX2NvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoJyArIGFyZ2JbMV0gKyAnLCcgKyBhcmdiWzJdICsgJywnICsgYXJnYlszXSArICcsMSknO1xuXG5cdFx0XHR0aGlzLl9jb250ZXh0LmZpbGxSZWN0KHJlY3QueCwgcmVjdC55LCByZWN0LndpZHRoLCByZWN0LmhlaWdodCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSBzb3VyY2Vcblx0ICogQHBhcmFtIG1hdHJpeFxuXHQgKi9cblx0cHVibGljIGRyYXcoc291cmNlOkJpdG1hcERhdGEsIG1hdHJpeD86TWF0cml4KTtcblx0cHVibGljIGRyYXcoc291cmNlOkhUTUxJbWFnZUVsZW1lbnQsIG1hdHJpeD86TWF0cml4KTtcblx0cHVibGljIGRyYXcoc291cmNlOmFueSwgbWF0cml4PzpNYXRyaXgpXG5cdHtcblx0XHRpZiAodGhpcy5fbG9ja2VkKSB7XG5cblx0XHRcdC8vIElmIGNhbnZhcyBpcyBsb2NrZWQ6XG5cdFx0XHQvL1xuXHRcdFx0Ly8gICAgICAxKSBjb3B5IGltYWdlIGRhdGEgYmFjayB0byBjYW52YXNcblx0XHRcdC8vICAgICAgMikgZHJhdyBvYmplY3Rcblx0XHRcdC8vICAgICAgMykgcmVhZCBfaW1hZ2VEYXRhIGJhY2sgb3V0XG5cblx0XHRcdGlmICh0aGlzLl9pbWFnZURhdGEpXG5cdFx0XHRcdHRoaXMuX2NvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuX2ltYWdlRGF0YSwgMCwgMCk7IC8vIGF0IGNvb3JkcyAwLDBcblxuXHRcdFx0dGhpcy5fZHJhdyhzb3VyY2UsIG1hdHJpeCk7XG5cblx0XHRcdGlmICh0aGlzLl9pbWFnZURhdGEpXG5cdFx0XHRcdHRoaXMuX2ltYWdlRGF0YSA9IHRoaXMuX2NvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMuX3JlY3Qud2lkdGgsIHRoaXMuX3JlY3QuaGVpZ2h0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fZHJhdyhzb3VyY2UsIG1hdHJpeCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBfZHJhdyhzb3VyY2U6Qml0bWFwRGF0YSwgbWF0cml4Ok1hdHJpeCk7XG5cdHByaXZhdGUgX2RyYXcoc291cmNlOkhUTUxJbWFnZUVsZW1lbnQsIG1hdHJpeDpNYXRyaXgpO1xuXHRwcml2YXRlIF9kcmF3KHNvdXJjZTphbnksIG1hdHJpeDpNYXRyaXgpXG5cdHtcblx0XHRpZiAoc291cmNlIGluc3RhbmNlb2YgQml0bWFwRGF0YSkge1xuXHRcdFx0dGhpcy5fY29udGV4dC5zYXZlKCk7XG5cblx0XHRcdGlmIChtYXRyaXggIT0gbnVsbClcblx0XHRcdFx0dGhpcy5fY29udGV4dC5zZXRUcmFuc2Zvcm0obWF0cml4LmEsIG1hdHJpeC5iLCBtYXRyaXguYywgbWF0cml4LmQsIG1hdHJpeC50eCwgbWF0cml4LnR5KTtcblxuXHRcdFx0dGhpcy5fY29udGV4dC5kcmF3SW1hZ2Uoc291cmNlLmNhbnZhcywgMCwgMCk7XG5cdFx0XHR0aGlzLl9jb250ZXh0LnJlc3RvcmUoKTtcblxuXHRcdH0gZWxzZSBpZiAoc291cmNlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCkge1xuXHRcdFx0dGhpcy5fY29udGV4dC5zYXZlKCk7XG5cblx0XHRcdGlmIChtYXRyaXggIT0gbnVsbClcblx0XHRcdFx0dGhpcy5fY29udGV4dC5zZXRUcmFuc2Zvcm0obWF0cml4LmEsIG1hdHJpeC5iLCBtYXRyaXguYywgbWF0cml4LmQsIG1hdHJpeC50eCwgbWF0cml4LnR5KTtcblxuXHRcdFx0dGhpcy5fY29udGV4dC5kcmF3SW1hZ2Uoc291cmNlLCAwLCAwKTtcblx0XHRcdHRoaXMuX2NvbnRleHQucmVzdG9yZSgpO1xuXHRcdH1cblxuXHR9XG5cblx0cHVibGljIGNvcHlDaGFubmVsKHNvdXJjZUJpdG1hcDpCaXRtYXBEYXRhLCBzb3VyY2VSZWN0OlJlY3RhbmdsZSwgZGVzdFBvaW50OlBvaW50LCBzb3VyY2VDaGFubmVsOm51bWJlciwgZGVzdENoYW5uZWw6bnVtYmVyKVxuXHR7XG5cdFx0dmFyIGltYWdlRGF0YTpJbWFnZURhdGEgPSBzb3VyY2VCaXRtYXAuaW1hZ2VEYXRhO1xuXG5cdFx0aWYgKCF0aGlzLl9sb2NrZWQpXG5cdFx0XHR0aGlzLl9pbWFnZURhdGEgPSB0aGlzLl9jb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB0aGlzLl9yZWN0LndpZHRoLCB0aGlzLl9yZWN0LmhlaWdodCk7XG5cblx0XHRpZiAodGhpcy5faW1hZ2VEYXRhKSB7XG5cdFx0XHR2YXIgc291cmNlRGF0YTpBcnJheTxudW1iZXI+ID0gc291cmNlQml0bWFwLmltYWdlRGF0YS5kYXRhO1xuXHRcdFx0dmFyIGRlc3REYXRhOkFycmF5PG51bWJlcj4gPSB0aGlzLl9pbWFnZURhdGEuZGF0YTtcblxuXHRcdFx0dmFyIHNvdXJjZU9mZnNldDpudW1iZXIgPSBNYXRoLnJvdW5kKE1hdGgubG9nKHNvdXJjZUNoYW5uZWwpL01hdGgubG9nKDIpKTtcblx0XHRcdHZhciBkZXN0T2Zmc2V0Om51bWJlciA9IE1hdGgucm91bmQoTWF0aC5sb2coZGVzdENoYW5uZWwpL01hdGgubG9nKDIpKTtcblxuXHRcdFx0dmFyIGk6bnVtYmVyIC8qdWludCovLCBqOm51bWJlciAvKnVpbnQqLywgc291cmNlSW5kZXg6bnVtYmVyIC8qdWludCovLCBkZXN0SW5kZXg6bnVtYmVyIC8qdWludCovO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IHNvdXJjZVJlY3Qud2lkdGg7ICsraSkge1xuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgc291cmNlUmVjdC5oZWlnaHQ7ICsraikge1xuXHRcdFx0XHRcdHNvdXJjZUluZGV4ID0gKGkgKyBzb3VyY2VSZWN0LnggKyAoaiArIHNvdXJjZVJlY3QueSkqc291cmNlQml0bWFwLndpZHRoKSo0O1xuXHRcdFx0XHRcdGRlc3RJbmRleCA9IChpICsgZGVzdFBvaW50LnggKyAoaiArIGRlc3RQb2ludC55KSp0aGlzLndpZHRoKSo0O1xuXG5cdFx0XHRcdFx0ZGVzdERhdGFbZGVzdEluZGV4ICsgZGVzdE9mZnNldF0gPSBzb3VyY2VEYXRhW3NvdXJjZUluZGV4ICsgc291cmNlT2Zmc2V0XTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghdGhpcy5fbG9ja2VkKSB7XG5cdFx0XHR0aGlzLl9jb250ZXh0LnB1dEltYWdlRGF0YSh0aGlzLl9pbWFnZURhdGEsIDAsIDApO1xuXHRcdFx0dGhpcy5faW1hZ2VEYXRhID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgY29sb3JUcmFuc2Zvcm0ocmVjdDpSZWN0YW5nbGUsIGNvbG9yVHJhbnNmb3JtOkNvbG9yVHJhbnNmb3JtKVxuXHR7XG5cdFx0aWYgKCF0aGlzLl9sb2NrZWQpXG5cdFx0XHR0aGlzLl9pbWFnZURhdGEgPSB0aGlzLl9jb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB0aGlzLl9yZWN0LndpZHRoLCB0aGlzLl9yZWN0LmhlaWdodCk7XG5cblx0XHRpZiAodGhpcy5faW1hZ2VEYXRhKSB7XG5cdFx0XHR2YXIgZGF0YTpBcnJheTxudW1iZXI+ID0gdGhpcy5faW1hZ2VEYXRhLmRhdGE7XG5cblx0XHRcdHZhciBpOm51bWJlciAvKnVpbnQqLywgajpudW1iZXIgLyp1aW50Ki8sIGluZGV4Om51bWJlciAvKnVpbnQqLztcblx0XHRcdGZvciAoaSA9IDA7IGkgPCByZWN0LndpZHRoOyArK2kpIHtcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IHJlY3QuaGVpZ2h0OyArK2opIHtcblx0XHRcdFx0XHRpbmRleCA9IChpICsgcmVjdC54ICsgKGogKyByZWN0LnkpKnRoaXMud2lkdGgpKjQ7XG5cblx0XHRcdFx0XHRkYXRhW2luZGV4XSA9IGRhdGFbaW5kZXhdKmNvbG9yVHJhbnNmb3JtLnJlZE11bHRpcGxpZXIgKyBjb2xvclRyYW5zZm9ybS5yZWRPZmZzZXQ7XG5cdFx0XHRcdFx0ZGF0YVtpbmRleCArIDFdID0gZGF0YVtpbmRleCArIDFdKmNvbG9yVHJhbnNmb3JtLmdyZWVuTXVsdGlwbGllciArIGNvbG9yVHJhbnNmb3JtLmdyZWVuT2Zmc2V0O1xuXHRcdFx0XHRcdGRhdGFbaW5kZXggKyAyXSA9IGRhdGFbaW5kZXggKyAyXSpjb2xvclRyYW5zZm9ybS5ibHVlTXVsdGlwbGllciArIGNvbG9yVHJhbnNmb3JtLmJsdWVPZmZzZXQ7XG5cdFx0XHRcdFx0ZGF0YVtpbmRleCArIDNdID0gZGF0YVtpbmRleCArIDNdKmNvbG9yVHJhbnNmb3JtLmFscGhhTXVsdGlwbGllciArIGNvbG9yVHJhbnNmb3JtLmFscGhhT2Zmc2V0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLl9sb2NrZWQpIHtcblx0XHRcdHRoaXMuX2NvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuX2ltYWdlRGF0YSwgMCwgMCk7XG5cdFx0XHR0aGlzLl9pbWFnZURhdGEgPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0ge0ltYWdlRGF0YX1cblx0ICovXG5cdHB1YmxpYyBzZXQgaW1hZ2VEYXRhKHZhbHVlOkltYWdlRGF0YSlcblx0e1xuXHRcdHRoaXMuX2NvbnRleHQucHV0SW1hZ2VEYXRhKHZhbHVlLCAwLCAwKTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7SW1hZ2VEYXRhfVxuXHQgKi9cblx0cHVibGljIGdldCBpbWFnZURhdGEoKTpJbWFnZURhdGFcblx0e1xuXHRcdHJldHVybiB0aGlzLl9jb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB0aGlzLl9yZWN0LndpZHRoLCB0aGlzLl9yZWN0LmhlaWdodClcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfVxuXHQgKi9cblx0cHVibGljIGdldCB3aWR0aCgpOm51bWJlclxuXHR7XG5cdFx0cmV0dXJuIDxudW1iZXI+IHRoaXMuX2ltYWdlQ2FudmFzLndpZHRoO1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfVxuXHQgKi9cblx0cHVibGljIHNldCB3aWR0aCh2YWx1ZTpudW1iZXIpXG5cdHtcblx0XHR0aGlzLl9yZWN0LndpZHRoID0gdmFsdWU7XG5cdFx0dGhpcy5faW1hZ2VDYW52YXMud2lkdGggPSB2YWx1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfVxuXHQgKi9cblx0cHVibGljIGdldCBoZWlnaHQoKTpudW1iZXJcblx0e1xuXHRcdHJldHVybiA8bnVtYmVyPiB0aGlzLl9pbWFnZUNhbnZhcy5oZWlnaHQ7XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9XG5cdCAqL1xuXHRwdWJsaWMgc2V0IGhlaWdodCh2YWx1ZTpudW1iZXIpXG5cdHtcblx0XHR0aGlzLl9yZWN0LmhlaWdodCA9IHZhbHVlO1xuXHRcdHRoaXMuX2ltYWdlQ2FudmFzLmhlaWdodCA9IHZhbHVlO1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVjdGFuZ2xlfVxuXHQgKi9cblx0cHVibGljIGdldCByZWN0KCk6UmVjdGFuZ2xlXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fcmVjdDtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7SFRNTENhbnZhc0VsZW1lbnR9XG5cdCAqL1xuXHRwdWJsaWMgZ2V0IGNhbnZhcygpXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5faW1hZ2VDYW52YXM7XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICogQHJldHVybnMge0hUTUxDYW52YXNFbGVtZW50fVxuXHQgKi9cblx0cHVibGljIGdldCBjb250ZXh0KCk6Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fY29udGV4dDtcblx0fVxuXG5cdHB1YmxpYyBjbG9uZSgpOkJpdG1hcERhdGEge1xuXHRcdHZhciB0OkJpdG1hcERhdGEgPSBuZXcgQml0bWFwRGF0YSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy50cmFuc3BhcmVudCk7XG5cdFx0dC5kcmF3KHRoaXMpO1xuXHRcdHJldHVybiB0O1xuXHR9XG59XG5cbmV4cG9ydCA9IEJpdG1hcERhdGE7Il19